{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { useState } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\";\nimport EditFields from \"./EditFields\";\nimport { Field, reduxForm, submit } from \"redux-form\"; // import { Field, reduxForm } from \"redux-form\";\n// import { submit } from \"redux-form\";\n// import React, { useState, useEffect } from \"react\";\n// import Edit from \"./Edit\";\n\nfunction TaskRow(props) {\n  // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\n  // TaskRow = createReduxForm(TaskRow);\n  // constructor(props) {\n  //     super(props);\n  //     this.nameChange = this.nameChange.bind(this);\n  //     this.levelChange = this.levelChange.bind(this);\n  // }\n  const [nameChange, setNameChange] = useState(\"\");\n  const [levelChange, setLevelChange] = useState(1);\n  const [editName, setEditName] = useState(props.editName);\n  const [isEdit, setIsEdit] = useState(false); // const [id, setId] = useState(props.task.id);\n\n  function update(newName, newLevel) {\n    console.log(newName, newLevel); // const index = this.state.Task.findIndex((task) => task.name == oldName);\n\n    props.updateTask({\n      id: props.task.id,\n      name: newName,\n      level: newLevel\n    });\n  }\n\n  function handleSave() {\n    // props.toggleEdit();\n    setIsEdit(false);\n    console.log(editName, nameChange, parseInt(levelChange));\n    update(nameChange, parseInt(levelChange));\n    props.updateChart();\n  }\n\n  function toggleEditOrSave(task) {\n    if (isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, \"Done\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  function handleEdit(name, level) {\n    console.log(name);\n    console.log(nameChange);\n    props.editTask({\n      id: props.task.id,\n      name: props.task.name,\n      level: props.task.level\n    });\n    setIsEdit(true);\n    setNameChange(name);\n    setLevelChange(level);\n    setEditName(name);\n    console.log(nameChange); // props.toggleEdit();\n    // props.newTask({ name: name, level: level });\n    // props.editTask({ name: name, level: level });\n  }\n\n  function level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  function submit(values) {\n    return sleep(1000) // simulate server latency\n    .then(() => {\n      if (![\"john\", \"paul\", \"george\", \"ringo\"].includes(values.username)) {\n        throw new SubmissionError({\n          username: \"User does not exist\",\n          _error: \"Login failed!\"\n        });\n      } else if (values.password !== \"redux-form\") {\n        throw new SubmissionError({\n          password: \"Wrong password\",\n          _error: \"Login failed!\"\n        });\n      } else {\n        window.alert(`You submitted:\\n\\n${JSON.stringify(values, null, 2)}`);\n      }\n    });\n  }\n\n  function isEditName(task) {\n    // console.log(task.name !== editName || isEdit === false);\n    if (task.name !== editName || isEdit === false) {\n      // console.log(\n      //     \"nor \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (isEdit === true) {\n      // console.log(\n      //     \"tex \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return (\n        /*#__PURE__*/\n        // <Edit newName={this.state.newName}></Edit>\n        React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"form\", {\n          onSubmit: submit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Field, {\n          name: \"name\",\n          type: \"text\",\n          component: renderField // label=\"last name\"\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }\n        })))\n      );\n    }\n  }\n\n  function isEditLevel(task) {\n    if (task.name !== editName || isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 20\n        }\n      }, level(task.level));\n    } else if (isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: levelChange,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: e => setLevelChange(e.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  } // function levelChange(e) {\n  //     // this.setState({\n  //     //     newLevel: e.target.value,\n  //     // });\n  //     console.log(e.target.value);\n  //     this.props.newTask({\n  //         name: this.props.newTaskName,\n  //         level: e.target.value,\n  //     });npm\n  //\n\n\n  const renderField = ({\n    input,\n    label,\n    type,\n    meta: {\n      touched,\n      error\n    }\n  }) => {\n    console.log(input);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      pill: true,\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, \"OldName: \" + nameChange)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n      type: type,\n      className: \"form-control\" // value={input.value}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }))));\n  };\n\n  console.log(\"row-render\"); // console.log(\n  //     \"this.props.editTaskTarget\",\n  //     this.props.editTaskTarget ? this.props.editTaskTarget : null\n  // );\n\n  return (\n    /*#__PURE__*/\n    // <tr key={index}>\n    React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, props.index + 1), isEditName(props.task), isEditLevel(props.task), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, toggleEditOrSave(props.task), /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: () => {\n        // return this.delete(this.state.task.name);\n        return props.deleteTask(props.task.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 21\n      }\n    }, \"Delete\"))))\n  );\n}\n\nconst mapStateToProps = state => ({\n  // isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  // editTaskTarget: state.EditTask,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskId => {\n      dispatch(Action.deleteTask(taskId));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    },\n    editTask: task => {\n      dispatch(Action.editTask(task));\n    },\n    newTask: task => {\n      dispatch(Action.newTask(task));\n    },\n    updateTask: newTask => {\n      dispatch(Action.updateTask(newTask));\n    },\n    updateChart: () => {\n      dispatch(Action.resetChart());\n    }\n  };\n}\n\nTaskRow = reduxForm({\n  // a unique name for the form\n  form: \"row\"\n})(TaskRow);\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow); //export default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","useState","ButtonGroup","Form","Button","Badge","connect","Action","EditFields","Field","reduxForm","submit","TaskRow","props","nameChange","setNameChange","levelChange","setLevelChange","editName","setEditName","isEdit","setIsEdit","update","newName","newLevel","console","log","updateTask","id","task","name","level","handleSave","parseInt","updateChart","toggleEditOrSave","handleEdit","editTask","sleep","ms","Promise","resolve","setTimeout","values","then","includes","username","SubmissionError","_error","password","window","alert","JSON","stringify","isEditName","renderField","isEditLevel","e","target","value","input","label","type","meta","touched","error","index","deleteTask","mapStateToProps","state","EditTask","newTaskName","NewTask","newTaskLevel","mapDispatchToProps","dispatch","taskId","toggleEdit","newTask","resetChart","form"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\nimport EditFields from \"./EditFields\";\r\nimport { Field, reduxForm, submit } from \"redux-form\";\r\n\r\n// import { Field, reduxForm } from \"redux-form\";\r\n// import { submit } from \"redux-form\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Edit from \"./Edit\";\r\nfunction TaskRow(props) {\r\n    // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\r\n    // TaskRow = createReduxForm(TaskRow);\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.nameChange = this.nameChange.bind(this);\r\n    //     this.levelChange = this.levelChange.bind(this);\r\n    // }\r\n\r\n    const [nameChange, setNameChange] = useState(\"\");\r\n    const [levelChange, setLevelChange] = useState(1);\r\n    const [editName, setEditName] = useState(props.editName);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    // const [id, setId] = useState(props.task.id);\r\n\r\n    function update(newName, newLevel) {\r\n        console.log(newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        props.updateTask({ id: props.task.id, name: newName, level: newLevel });\r\n    }\r\n\r\n    function handleSave() {\r\n        // props.toggleEdit();\r\n        setIsEdit(false);\r\n        console.log(editName, nameChange, parseInt(levelChange));\r\n        update(nameChange, parseInt(levelChange));\r\n        props.updateChart();\r\n    }\r\n\r\n    function toggleEditOrSave(task) {\r\n        if (isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => handleSave(task.name, task.level)}\r\n                >\r\n                    Done\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleEdit(name, level) {\r\n        console.log(name);\r\n        console.log(nameChange);\r\n        props.editTask({\r\n            id: props.task.id,\r\n            name: props.task.name,\r\n            level: props.task.level,\r\n        });\r\n        setIsEdit(true);\r\n        setNameChange(name);\r\n        setLevelChange(level);\r\n        setEditName(name);\r\n        console.log(nameChange);\r\n        // props.toggleEdit();\r\n        // props.newTask({ name: name, level: level });\r\n        // props.editTask({ name: name, level: level });\r\n    }\r\n\r\n    function level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n    function submit(values) {\r\n        return sleep(1000) // simulate server latency\r\n            .then(() => {\r\n                if (\r\n                    ![\"john\", \"paul\", \"george\", \"ringo\"].includes(\r\n                        values.username\r\n                    )\r\n                ) {\r\n                    throw new SubmissionError({\r\n                        username: \"User does not exist\",\r\n                        _error: \"Login failed!\",\r\n                    });\r\n                } else if (values.password !== \"redux-form\") {\r\n                    throw new SubmissionError({\r\n                        password: \"Wrong password\",\r\n                        _error: \"Login failed!\",\r\n                    });\r\n                } else {\r\n                    window.alert(\r\n                        `You submitted:\\n\\n${JSON.stringify(values, null, 2)}`\r\n                    );\r\n                }\r\n            });\r\n    }\r\n\r\n    function isEditName(task) {\r\n        // console.log(task.name !== editName || isEdit === false);\r\n\r\n        if (task.name !== editName || isEdit === false) {\r\n            // console.log(\r\n            //     \"nor \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n\r\n            return <td>{task.name}</td>;\r\n        } else if (isEdit === true) {\r\n            // console.log(\r\n            //     \"tex \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n\r\n            return (\r\n                // <Edit newName={this.state.newName}></Edit>\r\n\r\n                <td>\r\n                    {/* <Form.Control\r\n                        type=\"text\"\r\n                        value={nameChange}\r\n                        onChange={(e) => setNameChange(e.target.value)}\r\n                    ></Form.Control> */}\r\n                    {/* <EditFields nameChange={task.name}></EditFields> */}\r\n                    <form onSubmit={submit}>\r\n                        <Field\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            component={renderField}\r\n                            // label=\"last name\"\r\n                        />\r\n                    </form>\r\n                    {/* <Field\r\n                        // previousValue={nameChange}\r\n                        name=\"row\"\r\n                        value={nameChange}\r\n                        className=\"form-control\"\r\n                        component=\"input\"\r\n                        type=\"text\"\r\n                    /> */}\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    function isEditLevel(task) {\r\n        if (task.name !== editName || isEdit === false) {\r\n            return <td className=\"text-center\">{level(task.level)}</td>;\r\n        } else if (isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={levelChange}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={(e) => setLevelChange(e.target.value)}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    // function levelChange(e) {\r\n    //     // this.setState({\r\n    //     //     newLevel: e.target.value,\r\n    //     // });\r\n    //     console.log(e.target.value);\r\n    //     this.props.newTask({\r\n    //         name: this.props.newTaskName,\r\n    //         level: e.target.value,\r\n    //     });npm\r\n    //\r\n    const renderField = ({ input, label, type, meta: { touched, error } }) => {\r\n        console.log(input);\r\n        return (\r\n            <div>\r\n                <h6>\r\n                    <Badge pill variant=\"primary\">\r\n                        {\"OldName: \" + nameChange}\r\n                    </Badge>\r\n                </h6>\r\n                <div>\r\n                    <input\r\n                        {...input}\r\n                        type={type}\r\n                        className=\"form-control\"\r\n                        // value={input.value}\r\n                    />\r\n                </div>\r\n                {/* {touched && error && <span className=\"text-danger\">{error}</span>} */}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    console.log(\"row-render\");\r\n    // console.log(\r\n    //     \"this.props.editTaskTarget\",\r\n    //     this.props.editTaskTarget ? this.props.editTaskTarget : null\r\n    // );\r\n    return (\r\n        // <tr key={index}>\r\n        <tr>\r\n            <td className=\"text-center\">{props.index + 1}</td>\r\n            {isEditName(props.task)}\r\n            {isEditLevel(props.task)}\r\n            {/* <td>{task.name}</td> */}\r\n            {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n            <td className=\"text-center\">\r\n                <ButtonGroup>\r\n                    {toggleEditOrSave(props.task)}\r\n                    {/* <Button\r\n                    variant=\"warning\"\r\n                    onClick={() =>\r\n                        this.handleEdit(task.name, task.level)\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button> */}\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => {\r\n                            // return this.delete(this.state.task.name);\r\n                            return props.deleteTask(props.task.id);\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    // editTaskTarget: state.EditTask,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskId) => {\r\n            dispatch(Action.deleteTask(taskId));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n        editTask: (task) => {\r\n            dispatch(Action.editTask(task));\r\n        },\r\n        newTask: (task) => {\r\n            dispatch(Action.newTask(task));\r\n        },\r\n        updateTask: (newTask) => {\r\n            dispatch(Action.updateTask(newTask));\r\n        },\r\n        updateChart: () => {\r\n            dispatch(Action.resetChart());\r\n        },\r\n    };\r\n}\r\nTaskRow = reduxForm({\r\n    // a unique name for the form\r\n    form: \"row\",\r\n})(TaskRow);\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
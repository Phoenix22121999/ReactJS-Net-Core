{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\Web\\\\React\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { Component } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Edit from \"./Edit\";\nexport default class TaskRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: this.props.index,\n      task: this.props.task,\n      editName: this.props.task.name,\n      newName: this.props.task.name,\n      newLevel: 1,\n      isEdit: false\n    };\n    this.nameChange = this.nameChange.bind(this);\n  }\n\n  handleSave() {\n    console.log(this.state.editName, this.state.newName, this.state.newLevel);\n    this.setState({\n      isEdit: false,\n      task: {\n        name: this.state.newName,\n        level: this.state.newLevel\n      }\n    });\n    this.props.saveClick(this.state.editName, this.state.newName, this.state.newLevel);\n  }\n\n  toggleEditOrSave(task) {\n    if (this.state.isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      }, \"Save\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  handleEdit(name, level) {\n    this.setState({\n      editName: name,\n      newName: name,\n      newLevel: level,\n      isEdit: true\n    }); // console.log(\"edit\", name, \" \", level);\n    //this.props.setNameAndLevel(name, level);\n  }\n\n  level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  nameChange(e) {\n    this.setState({\n      newName: e.target.value\n    });\n  }\n\n  isEditName(task) {\n    if (task.name !== this.state.editName || this.state.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (this.state.isEdit === true) {\n      // console.log(\"text \", task.name);\n      return (\n        /*#__PURE__*/\n        // <Edit newName={this.state.newName}></Edit>\n        React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          type: \"text\",\n          value: this.state.newName,\n          onChange: this.nameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }\n        }))\n      );\n    }\n  }\n\n  delete(name) {\n    // console.log(\"delete\");\n    const tmpArr = this.state.Task.filter(task => {\n      return task.name !== name;\n    });\n    this.setState({\n      Task: tmpArr\n    });\n  }\n\n  isEditLevel(task) {\n    if (task.name !== this.state.editName || this.state.isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 20\n        }\n      }, this.level(task.level));\n    } else if (this.state.isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.newLevel,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: this.levelChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  }\n\n  levelChange(e) {\n    this.setState({\n      newLevel: e.target.value\n    });\n  }\n\n  render() {\n    console.log(\"row-render\");\n    return (\n      /*#__PURE__*/\n      // <tr key={index}>\n      React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }\n      }, this.state.index + 1), this.isEditName(this.state.task), this.isEditLevel(this.state.task), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }, this.toggleEditOrSave(this.state.task), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => {\n          return this.delete(this.state.task.name);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }\n      }, \"Delete\"))))\n    );\n  }\n\n}","map":{"version":3,"sources":["E:/Học Tập/Web/React/react-app/src/Component/TaskRow.js"],"names":["React","Component","ButtonGroup","Form","Button","Badge","Edit","TaskRow","constructor","props","state","index","task","editName","name","newName","newLevel","isEdit","nameChange","bind","handleSave","console","log","setState","level","saveClick","toggleEditOrSave","handleEdit","e","target","value","isEditName","delete","tmpArr","Task","filter","isEditLevel","levelChange","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nimport Edit from \"./Edit\";\r\nexport default class TaskRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            index: this.props.index,\r\n            task: this.props.task,\r\n            editName: this.props.task.name,\r\n            newName: this.props.task.name,\r\n            newLevel: 1,\r\n            isEdit: false,\r\n        };\r\n        this.nameChange = this.nameChange.bind(this);\r\n    }\r\n\r\n    handleSave() {\r\n        console.log(\r\n            this.state.editName,\r\n            this.state.newName,\r\n            this.state.newLevel\r\n        );\r\n        this.setState({\r\n            isEdit: false,\r\n            task: {\r\n                name: this.state.newName,\r\n                level: this.state.newLevel,\r\n            },\r\n        });\r\n        this.props.saveClick(\r\n            this.state.editName,\r\n            this.state.newName,\r\n            this.state.newLevel\r\n        );\r\n    }\r\n\r\n    toggleEditOrSave(task) {\r\n        if (this.state.isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleSave(task.name, task.level)}\r\n                >\r\n                    Save\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleEdit(name, level) {\r\n        this.setState({\r\n            editName: name,\r\n            newName: name,\r\n            newLevel: level,\r\n            isEdit: true,\r\n        });\r\n\r\n        // console.log(\"edit\", name, \" \", level);\r\n        //this.props.setNameAndLevel(name, level);\r\n    }\r\n\r\n    level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    nameChange(e) {\r\n        this.setState({ newName: e.target.value });\r\n    }\r\n\r\n    isEditName(task) {\r\n        if (task.name !== this.state.editName || this.state.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n            return <td>{task.name}</td>;\r\n        } else if (this.state.isEdit === true) {\r\n            // console.log(\"text \", task.name);\r\n            return (\r\n                // <Edit newName={this.state.newName}></Edit>\r\n                <td>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={this.state.newName}\r\n                        onChange={this.nameChange}\r\n                    ></Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    delete(name) {\r\n        // console.log(\"delete\");\r\n        const tmpArr = this.state.Task.filter((task) => {\r\n            return task.name !== name;\r\n        });\r\n        this.setState({\r\n            Task: tmpArr,\r\n        });\r\n    }\r\n\r\n    isEditLevel(task) {\r\n        if (task.name !== this.state.editName || this.state.isEdit === false) {\r\n            return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n        } else if (this.state.isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={this.state.newLevel}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={this.levelChange}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    levelChange(e) {\r\n        this.setState({\r\n            newLevel: e.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log(\"row-render\");\r\n        return (\r\n            // <tr key={index}>\r\n            <tr>\r\n                <td className=\"text-center\">{this.state.index + 1}</td>\r\n                {this.isEditName(this.state.task)}\r\n                {this.isEditLevel(this.state.task)}\r\n                {/* <td>{task.name}</td> */}\r\n                {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n                <td className=\"text-center\">\r\n                    <ButtonGroup>\r\n                        {this.toggleEditOrSave(this.state.task)}\r\n                        {/* <Button\r\n                    variant=\"warning\"\r\n                    onClick={() =>\r\n                        this.handleEdit(task.name, task.level)\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button> */}\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            onClick={() => {\r\n                                return this.delete(this.state.task.name);\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
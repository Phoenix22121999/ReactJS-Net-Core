{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { useState } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\"; // import React, { useState, useEffect } from \"react\";\n// import Edit from \"./Edit\";\n\nfunction TaskRow(props) {\n  // constructor(props) {\n  //     super(props);\n  //     this.nameChange = this.nameChange.bind(this);\n  //     this.levelChange = this.levelChange.bind(this);\n  // }\n  const [nameChange, setNameChange] = useState(\"\");\n  const [levelChange, setLevelChange] = useState(1);\n  const [editName, setEditName] = useState(props.editName);\n  const [isEdit, setIsEdit] = useState(false);\n  const [id, setId] = useState(props.task.id);\n\n  function update(oldName, newName, newLevel) {\n    console.log(oldName, newName, newLevel); // const index = this.state.Task.findIndex((task) => task.name == oldName);\n\n    props.updateTask(oldName, {\n      name: newName,\n      level: newLevel\n    });\n  }\n\n  function handleSave() {\n    // props.toggleEdit();\n    setIsEdit(false);\n    console.log(editName, nameChange, parseInt(levelChange));\n    update(editName, nameChange, parseInt(levelChange));\n    props.updateChart();\n  }\n\n  function toggleEditOrSave(task) {\n    if (isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }, \"Done\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  function handleEdit(name, level) {\n    setIsEdit(true);\n    setNameChange(name);\n    setLevelChange(level);\n    setEditName(name); // props.toggleEdit();\n    // props.newTask({ name: name, level: level });\n    // props.editTask({ name: name, level: level });\n  }\n\n  function level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  } // function nameChange(e) {\n  //     // this.setState({ newName: e.target.value });\n  //     this.props.newTask({\n  //         name: e.target.value,\n  //         level: this.props.newTaskLevel,\n  //     });\n  // }\n\n\n  function isEditName(task) {\n    // console.log(task.name !== editName || isEdit === false);\n    if (task.name !== editName || isEdit === false) {\n      // console.log(\n      //     \"nor \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (isEdit === true) {\n      // console.log(\n      //     \"tex \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return (\n        /*#__PURE__*/\n        // <Edit newName={this.state.newName}></Edit>\n        React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          type: \"text\",\n          value: nameChange,\n          onChange: e => setNameChange(e.target.value),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }\n        }))\n      );\n    }\n  }\n\n  function isEditLevel(task) {\n    if (task.name !== editName || isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 20\n        }\n      }, level(task.level));\n    } else if (isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: levelChange,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: e => setLevelChange(e.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  } // function levelChange(e) {\n  //     // this.setState({\n  //     //     newLevel: e.target.value,\n  //     // });\n  //     console.log(e.target.value);\n  //     this.props.newTask({\n  //         name: this.props.newTaskName,\n  //         level: e.target.value,\n  //     });\n  // }\n\n\n  console.log(\"row-render\"); // console.log(\n  //     \"this.props.editTaskTarget\",\n  //     this.props.editTaskTarget ? this.props.editTaskTarget : null\n  // );\n\n  return (\n    /*#__PURE__*/\n    // <tr key={index}>\n    React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, props.index + 1), isEditName(props.task), isEditLevel(props.task), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, toggleEditOrSave(props.task), /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: () => {\n        // return this.delete(this.state.task.name);\n        return props.deleteTask(props.task.id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }, \"Delete\"))))\n  );\n}\n\nconst mapStateToProps = state => ({\n  // isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  // editTaskTarget: state.EditTask,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskId => {\n      dispatch(Action.deleteTask(taskId));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    },\n    editTask: task => {\n      dispatch(Action.editTask(task));\n    },\n    newTask: task => {\n      dispatch(Action.newTask(task));\n    },\n    updateTask: (oldName, newTask) => {\n      dispatch(Action.updateTask(oldName, newTask));\n    },\n    updateChart: () => {\n      dispatch(Action.resetChart());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","useState","ButtonGroup","Form","Button","Badge","connect","Action","TaskRow","props","nameChange","setNameChange","levelChange","setLevelChange","editName","setEditName","isEdit","setIsEdit","id","setId","task","update","oldName","newName","newLevel","console","log","updateTask","name","level","handleSave","parseInt","updateChart","toggleEditOrSave","handleEdit","isEditName","e","target","value","isEditLevel","index","deleteTask","mapStateToProps","state","EditTask","newTaskName","NewTask","newTaskLevel","mapDispatchToProps","dispatch","taskId","toggleEdit","editTask","newTask","resetChart"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Edit from \"./Edit\";\r\nfunction TaskRow(props) {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.nameChange = this.nameChange.bind(this);\r\n    //     this.levelChange = this.levelChange.bind(this);\r\n    // }\r\n\r\n    const [nameChange, setNameChange] = useState(\"\");\r\n    const [levelChange, setLevelChange] = useState(1);\r\n    const [editName, setEditName] = useState(props.editName);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [id, setId] = useState(props.task.id);\r\n\r\n    function update(oldName, newName, newLevel) {\r\n        console.log(oldName, newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        props.updateTask(oldName, { name: newName, level: newLevel });\r\n    }\r\n\r\n    function handleSave() {\r\n        // props.toggleEdit();\r\n        setIsEdit(false);\r\n        console.log(editName, nameChange, parseInt(levelChange));\r\n        update(editName, nameChange, parseInt(levelChange));\r\n        props.updateChart();\r\n    }\r\n\r\n    function toggleEditOrSave(task) {\r\n        if (isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => handleSave(task.name, task.level)}\r\n                >\r\n                    Done\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleEdit(name, level) {\r\n        setIsEdit(true);\r\n        setNameChange(name);\r\n        setLevelChange(level);\r\n        setEditName(name);\r\n        // props.toggleEdit();\r\n        // props.newTask({ name: name, level: level });\r\n        // props.editTask({ name: name, level: level });\r\n    }\r\n\r\n    function level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    // function nameChange(e) {\r\n    //     // this.setState({ newName: e.target.value });\r\n    //     this.props.newTask({\r\n    //         name: e.target.value,\r\n    //         level: this.props.newTaskLevel,\r\n    //     });\r\n    // }\r\n\r\n    function isEditName(task) {\r\n        // console.log(task.name !== editName || isEdit === false);\r\n\r\n        if (task.name !== editName || isEdit === false) {\r\n            // console.log(\r\n            //     \"nor \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n\r\n            return <td>{task.name}</td>;\r\n        } else if (isEdit === true) {\r\n            // console.log(\r\n            //     \"tex \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n            return (\r\n                // <Edit newName={this.state.newName}></Edit>\r\n                <td>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={nameChange}\r\n                        onChange={(e) => setNameChange(e.target.value)}\r\n                    ></Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    function isEditLevel(task) {\r\n        if (task.name !== editName || isEdit === false) {\r\n            return <td className=\"text-center\">{level(task.level)}</td>;\r\n        } else if (isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={levelChange}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={(e) => setLevelChange(e.target.value)}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    // function levelChange(e) {\r\n    //     // this.setState({\r\n    //     //     newLevel: e.target.value,\r\n    //     // });\r\n    //     console.log(e.target.value);\r\n    //     this.props.newTask({\r\n    //         name: this.props.newTaskName,\r\n    //         level: e.target.value,\r\n    //     });\r\n    // }\r\n\r\n    console.log(\"row-render\");\r\n    // console.log(\r\n    //     \"this.props.editTaskTarget\",\r\n    //     this.props.editTaskTarget ? this.props.editTaskTarget : null\r\n    // );\r\n    return (\r\n        // <tr key={index}>\r\n        <tr>\r\n            <td className=\"text-center\">{props.index + 1}</td>\r\n            {isEditName(props.task)}\r\n            {isEditLevel(props.task)}\r\n            {/* <td>{task.name}</td> */}\r\n            {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n            <td className=\"text-center\">\r\n                <ButtonGroup>\r\n                    {toggleEditOrSave(props.task)}\r\n                    {/* <Button\r\n                    variant=\"warning\"\r\n                    onClick={() =>\r\n                        this.handleEdit(task.name, task.level)\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button> */}\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => {\r\n                            // return this.delete(this.state.task.name);\r\n                            return props.deleteTask(props.task.id);\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    // editTaskTarget: state.EditTask,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskId) => {\r\n            dispatch(Action.deleteTask(taskId));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n        editTask: (task) => {\r\n            dispatch(Action.editTask(task));\r\n        },\r\n        newTask: (task) => {\r\n            dispatch(Action.newTask(task));\r\n        },\r\n        updateTask: (oldName, newTask) => {\r\n            dispatch(Action.updateTask(oldName, newTask));\r\n        },\r\n        updateChart: () => {\r\n            dispatch(Action.resetChart());\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
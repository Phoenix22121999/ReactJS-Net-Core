{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { useState } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\";\nimport EditFields from \"./EditFields\";\nimport \"../Form.css\";\nimport EditForm from \"./EditForm\";\nimport { Field, reduxForm, submit, SubmissionError } from \"redux-form\"; // import { Field, reduxForm } from \"redux-form\";\n// import { submit } from \"redux-form\";\n// import React, { useState, useEffect } from \"react\";\n// import Edit from \"./Edit\";\n\nfunction TaskRow(props) {\n  // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\n  // TaskRow = createReduxForm(TaskRow);\n  // constructor(props) {\n  //     super(props);\n  //     this.nameChange = this.nameChange.bind(this);\n  //     this.levelChange = this.levelChange.bind(this);\n  // }\n  // const { handleSubmit, pristine, reset, submitting } = props;\n  const [nameChange, setNameChange] = useState(\"\");\n  const [levelChange, setLevelChange] = useState(1);\n  const [editName, setEditName] = useState(props.editName);\n  const [isEdit, setIsEdit] = useState(false); // const [id, setId] = useState(props.task.id);\n\n  function test(values) {\n    console.log(values);\n  }\n\n  function update(newName, newLevel) {\n    console.log(newName, newLevel); // const index = this.state.Task.findIndex((task) => task.name == oldName);\n\n    props.updateTask({\n      id: props.task.id,\n      name: newName,\n      level: newLevel\n    });\n  }\n\n  function handleSave() {\n    // props.toggleEdit();\n    setIsEdit(false);\n    console.log(editName, nameChange, parseInt(levelChange));\n    update(nameChange, parseInt(levelChange));\n    props.updateChart();\n  }\n\n  function toggleEditOrSave(task) {\n    if (isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\" // onClick={() => handleSave(task.name, task.level)}\n        ,\n        onClick: () => props.submitform(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }\n      }, \"Done\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  function handleEdit(name, level) {\n    console.log(name);\n    console.log(nameChange);\n    props.editTask({\n      id: props.task.id,\n      name: props.task.name,\n      level: props.task.level\n    });\n    setIsEdit(true);\n    setNameChange(name);\n    setLevelChange(level);\n    setEditName(name);\n    console.log(nameChange); // props.toggleEdit();\n    // props.newTask({ name: name, level: level });\n    // props.editTask({ name: name, level: level });\n  }\n\n  function level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  function test(value) {\n    console.log(\"test \", value);\n  }\n\n  function isEditName(task) {\n    // console.log(task.name !== editName || isEdit === false);\n    if (task.name !== editName || isEdit === false) {\n      // console.log(\n      //     \"nor \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (isEdit === true) {\n      // console.log(\n      //     \"tex \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return (\n        /*#__PURE__*/\n        // <Edit newName={this.state.newName}></Edit>\n        React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(EditFields, {\n          nameChange: task.name,\n          onSubmit: test,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }\n        }))))\n      );\n    }\n  }\n\n  function isEditLevel(task) {\n    if (task.name !== editName || isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 20\n        }\n      }, level(task.level));\n    } else if (isEdit === true) {\n      // console.log(\"select \", task.name);\n      return null; // (\n      //     <td className=\"text-center\">\n      //         <Form.Control\n      //             value={levelChange}\n      //             as=\"select\"\n      //             name=\"ds\"\n      //             id=\"inputDs\"\n      //             onChange={(e) => setLevelChange(e.target.value)}\n      //         >\n      //             <option value={1}>Low</option>\n      //             <option value={2}>Medium</option>\n      //             <option value={3}>High</option>\n      //         </Form.Control>\n      //     </td>\n      // );\n    }\n  }\n\n  const renderSelect = ({\n    input,\n    meta,\n    type,\n    placeholder\n  }) => {\n    return /*#__PURE__*/React.createElement(Form.Control, Object.assign({\n      as: \"select\",\n      custom: true\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"option\", {\n      value: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }\n    }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }\n    }, \"High\"));\n  };\n\n  function isEditForm(task) {\n    console.log(task);\n\n    if (task.name !== editName || isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }\n      }, props.index + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }\n      }, task.name), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }\n      }, level(task.level)), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 29\n        }\n      }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => {\n          // return this.delete(this.state.task.name);\n          return props.deleteTask(props.task.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 29\n        }\n      }, \"Delete\"))));\n    } else if (isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(EditForm, {\n        task: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 20\n        }\n      });\n    }\n  }\n\n  const renderField = ({\n    input,\n    label,\n    type,\n    meta: {\n      touched,\n      error\n    }\n  }) => {\n    // console.log(input);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      pill: true,\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }\n    }, \"OldName: \" + nameChange)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n      type: type,\n      className: \"form-control\" // value={input.value}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }\n    }))));\n  };\n\n  console.log(\"row-render\", props.task); // console.log(handleSubmit);\n  // console.log(\n  //     \"this.props.editTaskTarget\",\n  //     this.props.editTaskTarget ? this.props.editTaskTarget : null\n  // );\n\n  return isEditForm(props.task); // (\n  //     // <tr key={index}>\n  //     <tr>\n  //         <td className=\"text-center\">{props.index + 1}</td>\n  //         {isEditName(props.task)}\n  //         {isEditLevel(props.task)}\n  //         {/* <td>{task.name}</td> */}\n  //         {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\n  //         <td className=\"text-center\">\n  //             <ButtonGroup>\n  //                 {toggleEditOrSave(props.task)}\n  //                 {/* <Button\n  //                 variant=\"warning\"\n  //                 onClick={() =>\n  //                     this.handleEdit(task.name, task.level)\n  //                 }\n  //             >\n  //                 Edit\n  //             </Button> */}\n  //                 <Button\n  //                     variant=\"danger\"\n  //                     onClick={() => {\n  //                         // return this.delete(this.state.task.name);\n  //                         return props.deleteTask(props.task.id);\n  //                     }}\n  //                 >\n  //                     Delete\n  //                 </Button>\n  //             </ButtonGroup>\n  //         </td>\n  //     </tr>\n  // );\n}\n\nconst mapStateToProps = state => ({\n  // isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  // editTaskTarget: state.EditTask,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskId => {\n      dispatch(Action.deleteTask(taskId));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    },\n    editTask: task => {\n      dispatch(Action.editTask(task));\n    },\n    newTask: task => {\n      dispatch(Action.newTask(task));\n    },\n    updateTask: newTask => {\n      dispatch(Action.updateTask(newTask));\n    },\n    updateChart: () => {\n      dispatch(Action.resetChart());\n    },\n    submitform: () => {\n      dispatch(submit(\"row\"));\n    }\n  };\n}\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nfunction submitform(values) {\n  console.log(values); // return sleep(1000) // simulate server latency\n  //     .then(() => {\n  //         console.log(\"vô\", values);\n  //         console.log(\"vô\", );\n  //     });\n}\n\nTaskRow = reduxForm({\n  // a unique name for the form\n  form: \"row\",\n  onSubmit: submitform\n})(TaskRow);\nconnect(mapStateToProps, mapDispatchToProps)(submitform);\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow); //export default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","useState","ButtonGroup","InputGroup","Row","Col","Form","Button","Badge","connect","Action","EditFields","EditForm","Field","reduxForm","submit","SubmissionError","TaskRow","props","nameChange","setNameChange","levelChange","setLevelChange","editName","setEditName","isEdit","setIsEdit","test","values","console","log","update","newName","newLevel","updateTask","id","task","name","level","handleSave","parseInt","updateChart","toggleEditOrSave","submitform","handleEdit","editTask","value","isEditName","isEditLevel","renderSelect","input","meta","type","placeholder","isEditForm","index","deleteTask","renderField","label","touched","error","mapStateToProps","state","EditTask","newTaskName","NewTask","newTaskLevel","mapDispatchToProps","dispatch","taskId","toggleEdit","newTask","resetChart","sleep","ms","Promise","resolve","setTimeout","form","onSubmit"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\nimport EditFields from \"./EditFields\";\r\nimport \"../Form.css\";\r\nimport EditForm from \"./EditForm\";\r\nimport { Field, reduxForm, submit, SubmissionError } from \"redux-form\";\r\n\r\n// import { Field, reduxForm } from \"redux-form\";\r\n// import { submit } from \"redux-form\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Edit from \"./Edit\";\r\nfunction TaskRow(props) {\r\n    // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\r\n    // TaskRow = createReduxForm(TaskRow);\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.nameChange = this.nameChange.bind(this);\r\n    //     this.levelChange = this.levelChange.bind(this);\r\n    // }\r\n    // const { handleSubmit, pristine, reset, submitting } = props;\r\n    const [nameChange, setNameChange] = useState(\"\");\r\n    const [levelChange, setLevelChange] = useState(1);\r\n    const [editName, setEditName] = useState(props.editName);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    // const [id, setId] = useState(props.task.id);\r\n\r\n    function test(values) {\r\n        console.log(values);\r\n    }\r\n\r\n    function update(newName, newLevel) {\r\n        console.log(newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        props.updateTask({ id: props.task.id, name: newName, level: newLevel });\r\n    }\r\n\r\n    function handleSave() {\r\n        // props.toggleEdit();\r\n        setIsEdit(false);\r\n        console.log(editName, nameChange, parseInt(levelChange));\r\n        update(nameChange, parseInt(levelChange));\r\n        props.updateChart();\r\n    }\r\n\r\n    function toggleEditOrSave(task) {\r\n        if (isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    // onClick={() => handleSave(task.name, task.level)}\r\n                    onClick={() => props.submitform()}\r\n                >\r\n                    Done\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    function handleEdit(name, level) {\r\n        console.log(name);\r\n        console.log(nameChange);\r\n        props.editTask({\r\n            id: props.task.id,\r\n            name: props.task.name,\r\n            level: props.task.level,\r\n        });\r\n        setIsEdit(true);\r\n        setNameChange(name);\r\n        setLevelChange(level);\r\n        setEditName(name);\r\n        console.log(nameChange);\r\n        // props.toggleEdit();\r\n        // props.newTask({ name: name, level: level });\r\n        // props.editTask({ name: name, level: level });\r\n    }\r\n\r\n    function level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    function test(value) {\r\n        console.log(\"test \", value);\r\n    }\r\n\r\n    function isEditName(task) {\r\n        // console.log(task.name !== editName || isEdit === false);\r\n\r\n        if (task.name !== editName || isEdit === false) {\r\n            // console.log(\r\n            //     \"nor \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n\r\n            return <td>{task.name}</td>;\r\n        } else if (isEdit === true) {\r\n            // console.log(\r\n            //     \"tex \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n\r\n            return (\r\n                // <Edit newName={this.state.newName}></Edit>\r\n\r\n                <td>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <EditFields\r\n                                nameChange={task.name}\r\n                                onSubmit={test}\r\n                            ></EditFields>\r\n                        </Col>\r\n                        {/* <Col md={{ span: 3, offset: 1 }}>\r\n                            <Form.Control\r\n                                value={levelChange}\r\n                                as=\"select\"\r\n                                name=\"ds\"\r\n                                id=\"inputDs\"\r\n                                onChange={(e) => setLevelChange(e.target.value)}\r\n                            >\r\n                                <option value={1}>Low</option>\r\n                                <option value={2}>Medium</option>\r\n                                <option value={3}>High</option>\r\n                            </Form.Control>\r\n                        </Col> */}\r\n                    </Row>\r\n                    {/* <InputGroup>\r\n                        <EditFields\r\n                            nameChange={task.name}\r\n                            onSubmit={test}\r\n                        ></EditFields>\r\n                        <Form.Control\r\n                            value={levelChange}\r\n                            as=\"select\"\r\n                            name=\"ds\"\r\n                            id=\"inputDs\"\r\n                            onChange={(e) => setLevelChange(e.target.value)}\r\n                        >\r\n                            <option value={1}>Low</option>\r\n                            <option value={2}>Medium</option>\r\n                            <option value={3}>High</option>\r\n                        </Form.Control>\r\n                    </InputGroup> */}\r\n\r\n                    {/* <Form.Control\r\n                        type=\"text\"\r\n                        value={nameChange}\r\n                        onChange={(e) => setNameChange(e.target.value)}\r\n                    ></Form.Control> */}\r\n\r\n                    {/* <form\r\n                        onSubmit={() => {\r\n                            test();\r\n                        }}\r\n                    >\r\n                        <Field\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            component={renderField}\r\n                            // label=\"last name\"\r\n                        />\r\n                    </form> */}\r\n                    {/* <Field\r\n                        // previousValue={nameChange}\r\n                        name=\"row\"\r\n                        value={nameChange}\r\n                        className=\"form-control\"\r\n                        component=\"input\"\r\n                        type=\"text\"\r\n                    /> */}\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    function isEditLevel(task) {\r\n        if (task.name !== editName || isEdit === false) {\r\n            return <td className=\"text-center\">{level(task.level)}</td>;\r\n        } else if (isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return null;\r\n            // (\r\n            //     <td className=\"text-center\">\r\n            //         <Form.Control\r\n            //             value={levelChange}\r\n            //             as=\"select\"\r\n            //             name=\"ds\"\r\n            //             id=\"inputDs\"\r\n            //             onChange={(e) => setLevelChange(e.target.value)}\r\n            //         >\r\n            //             <option value={1}>Low</option>\r\n            //             <option value={2}>Medium</option>\r\n            //             <option value={3}>High</option>\r\n            //         </Form.Control>\r\n            //     </td>\r\n            // );\r\n        }\r\n    }\r\n\r\n    const renderSelect = ({ input, meta, type, placeholder }) => {\r\n        return (\r\n            <Form.Control as=\"select\" custom {...input}>\r\n                <option value={1}>Low</option>\r\n                <option value={2}>Medium</option>\r\n                <option value={3}>High</option>\r\n            </Form.Control>\r\n        );\r\n    };\r\n\r\n    function isEditForm(task) {\r\n        console.log(task);\r\n        if (task.name !== editName || isEdit === false) {\r\n            return (\r\n                <tr>\r\n                    <td className=\"text-center\">{props.index + 1}</td>\r\n                    {/* {isEditName(props.task)} */}\r\n                    {/* {isEditLevel(props.task)} */}\r\n                    <td>{task.name}</td>\r\n                    <td className=\"text-center\">{level(task.level)}</td>\r\n                    <td className=\"text-center\">\r\n                        <ButtonGroup>\r\n                            {/* {toggleEditOrSave(props.task)} */}\r\n                            <Button\r\n                                variant=\"warning\"\r\n                                onClick={() =>\r\n                                    handleEdit(task.name, task.level)\r\n                                }\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"danger\"\r\n                                onClick={() => {\r\n                                    // return this.delete(this.state.task.name);\r\n                                    return props.deleteTask(props.task.id);\r\n                                }}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        } else if (isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return <EditForm task={task}></EditForm>;\r\n        }\r\n    }\r\n\r\n    const renderField = ({ input, label, type, meta: { touched, error } }) => {\r\n        // console.log(input);\r\n        return (\r\n            <div>\r\n                <h6>\r\n                    <Badge pill variant=\"primary\">\r\n                        {\"OldName: \" + nameChange}\r\n                    </Badge>\r\n                </h6>\r\n                <div>\r\n                    <input\r\n                        {...input}\r\n                        type={type}\r\n                        className=\"form-control\"\r\n                        // value={input.value}\r\n                    />\r\n                </div>\r\n                {/* {touched && error && <span className=\"text-danger\">{error}</span>} */}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    console.log(\"row-render\", props.task);\r\n    // console.log(handleSubmit);\r\n    // console.log(\r\n    //     \"this.props.editTaskTarget\",\r\n    //     this.props.editTaskTarget ? this.props.editTaskTarget : null\r\n    // );\r\n    return isEditForm(props.task);\r\n\r\n    // (\r\n\r\n    //     // <tr key={index}>\r\n    //     <tr>\r\n    //         <td className=\"text-center\">{props.index + 1}</td>\r\n    //         {isEditName(props.task)}\r\n    //         {isEditLevel(props.task)}\r\n    //         {/* <td>{task.name}</td> */}\r\n    //         {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n    //         <td className=\"text-center\">\r\n    //             <ButtonGroup>\r\n    //                 {toggleEditOrSave(props.task)}\r\n    //                 {/* <Button\r\n    //                 variant=\"warning\"\r\n    //                 onClick={() =>\r\n    //                     this.handleEdit(task.name, task.level)\r\n    //                 }\r\n    //             >\r\n    //                 Edit\r\n    //             </Button> */}\r\n    //                 <Button\r\n    //                     variant=\"danger\"\r\n    //                     onClick={() => {\r\n    //                         // return this.delete(this.state.task.name);\r\n    //                         return props.deleteTask(props.task.id);\r\n    //                     }}\r\n    //                 >\r\n    //                     Delete\r\n    //                 </Button>\r\n    //             </ButtonGroup>\r\n    //         </td>\r\n    //     </tr>\r\n    // );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    // editTaskTarget: state.EditTask,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskId) => {\r\n            dispatch(Action.deleteTask(taskId));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n        editTask: (task) => {\r\n            dispatch(Action.editTask(task));\r\n        },\r\n        newTask: (task) => {\r\n            dispatch(Action.newTask(task));\r\n        },\r\n        updateTask: (newTask) => {\r\n            dispatch(Action.updateTask(newTask));\r\n        },\r\n        updateChart: () => {\r\n            dispatch(Action.resetChart());\r\n        },\r\n        submitform: () => {\r\n            dispatch(submit(\"row\"));\r\n        },\r\n    };\r\n}\r\n\r\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\nfunction submitform(values) {\r\n    console.log(values);\r\n    // return sleep(1000) // simulate server latency\r\n    //     .then(() => {\r\n    //         console.log(\"vô\", values);\r\n    //         console.log(\"vô\", );\r\n    //     });\r\n}\r\nTaskRow = reduxForm({\r\n    // a unique name for the form\r\n    form: \"row\",\r\n    onSubmit: submitform,\r\n})(TaskRow);\r\nconnect(mapStateToProps, mapDispatchToProps)(submitform);\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
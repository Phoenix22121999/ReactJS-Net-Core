{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Search from \"./Component/Search\";\nimport SortDropDown from \"./Component/SortDropDown\";\nimport * as Action from \"./Actions/index\";\nimport * as URL from \"./Const/URL\";\nimport AddTaskButton from \"./Component/AddTaskButton\";\nimport Chatbox from \"./Component/Chatbox\";\nimport TaskTable from \"./Component/TaskTable\";\nimport ShowChartButton from \"./Component/ShowChartButton\";\nimport AddTaskReduxForm from \"./Component/AddTaskReduxForm\";\nimport Chart from \"./Component/Chart\";\nimport { connect } from \"react-redux\";\nimport SignInSignUpRouter from \"./Component/SignInSignUpRouter\";\nimport AppNavbar from \"./Component/AppNavbar\";\nimport connection from \"./Reducer/ConnectHub\";\nimport ChatGroup from \"./Component/ChatGroup\";\nimport { Col } from \"react-bootstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatToggle: false\n    };\n    this.AddTask = this.AddTask.bind(this);\n    this.checkLogin = this.checkLogin.bind(this);\n    this.toggleChat = this.toggleChat.bind(this);\n    connection.on(\"ReceiveMessage\", message => {\n      console.log(\"đã nhận:\", message);\n      fetch(\"http://localhost:3000/api/Todo\", {\n        method: \"GET\"\n      }).then(response => {\n        // console.log(response);\n        return response.json();\n      }).catch(e => {\n        console.error(\"Err\", e);\n      }).then(data => {\n        // console.log(data);\n        localStorage.setItem(\"Tasks\", JSON.stringify(data)); // console.log(data);\n        // Cookies.set(\"Task\", data);\n        // console.log(localStorage.getItem(\"Tasks\"));\n      }).then(() => {\n        this.props.resetTask();\n      });\n    });\n  }\n\n  componentDidMount() {\n    connection.on(\"ReceiveChatMessageFromSomeOne\", (message, usernameSend, usernameReceive) => {\n      console.log(\"đã nhận:\", message, \"Form\", usernameSend);\n      fetch(URL.URL_GETUSERNAME, {\n        method: \"GET\"\n      }).then(Response => Response.json()).then(data => {\n        console.log(data);\n        this.props.updateUser(data);\n      });\n      this.props.updateChat(usernameSend, usernameReceive, message);\n      this.setState({\n        chatToggle: true\n      });\n\n      if (usernameSend !== this.props.username.username) {\n        this.props.updateUserChatWith(usernameSend);\n      } else {\n        this.props.updateUserChatWith(usernameReceive);\n      }\n    });\n  }\n\n  toggleChat() {\n    this.setState({\n      chatToggle: !this.state.chatToggle\n    });\n    fetch(URL.URL_GETUSERNAME, {\n      method: \"GET\"\n    }).then(Response => Response.json()).then(data => {\n      console.log(data);\n      this.props.updateListUser(data);\n    });\n  }\n\n  getTask() {\n    fetch(URL.URL_API).then(response => response.json()).catch(e => {\n      console.log(\"Err\", e);\n    }).then(data => {\n      // console.log(data);\n      localStorage.setItem(\"Tasks\", JSON.stringify(data)); // Cookies.set(\"Task\", data);\n      // console.log(localStorage.getItem(\"Tasks\"));\n    });\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async AddTask(Values) {\n    console.log(Values);\n    let tl = JSON.parse(localStorage.getItem(\"Tasks\"));\n    let lastTask = tl[tl.length - 1];\n    this.props.addTaskAction({\n      id: parseInt(lastTask.id + 1),\n      name: Values.name,\n      level: parseInt(Values.level)\n    });\n    this.props.closeFormAction();\n    await this.sleep(750);\n    this.props.updateChart();\n  }\n\n  checkLogin() {\n    fetch(URL.URL_CHECK_LOGIN, {\n      method: \"GET\"\n    }).then(Response => Response.json()).then(data => {\n      if (data.userName === null) {\n        this.props.NotLogin();\n      } else {\n        this.getTask();\n        this.props.IsLogin();\n      }\n    });\n  }\n\n  logout() {\n    fetch(URL.URL_LOGOUT, {\n      method: \"GET\"\n    }).then(Response => Response.json()).then(data => {\n      // console.log(data);\n      // console.log(data.isCompleted);\n      if (data.isCompleted) {\n        this.props.NotLogin();\n      }\n    });\n  }\n\n  UNSAFE_componentWillMount() {\n    console.log(\"UNSAFE_componentWillMount\");\n    this.checkLogin();\n  }\n\n  render() {\n    console.log(\"render App\");\n\n    if (this.props.showForm) {\n      // console.log(\"d\");\n      var form = /*#__PURE__*/React.createElement(AddTaskReduxForm, {\n        form: \"AddForm\",\n        onSubmit: this.AddTask,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      });\n    } else form = null;\n\n    if (this.props.showChart) {\n      var chart = /*#__PURE__*/React.createElement(Chart, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }, \" \");\n    } else chart = null;\n\n    if (this.props.isLogin) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        fluid: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(AppNavbar, {\n        toggleChat: this.toggleChat,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(SortDropDown, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(ShowChartButton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(AddTaskButton, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 25\n        }\n      }, form), /*#__PURE__*/React.createElement(Row, {\n        style: {\n          backgroundColor: \"#1b262c\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          margin: \"1rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }\n      }, chart), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(TaskTable // connection={this.props.connection}\n      , {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }\n      })), this.state.chatToggle ? /*#__PURE__*/React.createElement(Col, {\n        className: \"chat_row\",\n        md: {\n          span: 6,\n          offset: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 33\n        }\n      }, \">\", /*#__PURE__*/React.createElement(ChatGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 38\n        }\n      }), /*#__PURE__*/React.createElement(Chatbox, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 37\n        }\n      }), \">\")) : null));\n    } else if (!this.props.isLogin) return /*#__PURE__*/React.createElement(SignInSignUpRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 20\n      }\n    });\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    addTaskAction: task => {\n      dispatch(Action.addTask(task));\n    },\n    closeFormAction: () => {\n      dispatch(Action.closeForm());\n    },\n    // setNewTask: (task) => {\n    //     dispatch(Action.setNewTask(task));\n    // },\n    updateChart: () => {\n      dispatch(Action.resetChart());\n    },\n    // ToggleLogin: () => {\n    //     dispatch(Action.toggleLogin());\n    // },\n    IsLogin: () => {\n      dispatch(Action.isLogin());\n    },\n    NotLogin: () => {\n      dispatch(Action.notLogin());\n    },\n    updateUser: username => {\n      dispatch(Action.updateUser(username));\n    },\n    resetTask: () => {\n      dispatch(Action.resetTask());\n    },\n    updateChat: (usernameSend, usernameReceive, message) => {\n      dispatch(Action.updateChat(usernameSend, usernameReceive, message));\n    },\n    updateListUser: listUser => {\n      dispatch(Action.updateListUser(listUser));\n    },\n    updateUserChatWith: username => {\n      dispatch(Action.updateUserChatWith(username));\n    }\n  };\n}\n\nconst mapStateToProps = state => ({\n  isLogin: state.IsLogin,\n  showForm: state.ToggleForm,\n  showChart: state.ToggleChart,\n  username: state.LoginUserName\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/App.js"],"names":["React","Component","Container","Row","Search","SortDropDown","Action","URL","AddTaskButton","Chatbox","TaskTable","ShowChartButton","AddTaskReduxForm","Chart","connect","SignInSignUpRouter","AppNavbar","connection","ChatGroup","Col","App","constructor","props","state","chatToggle","AddTask","bind","checkLogin","toggleChat","on","message","console","log","fetch","method","then","response","json","catch","e","error","data","localStorage","setItem","JSON","stringify","resetTask","componentDidMount","usernameSend","usernameReceive","URL_GETUSERNAME","Response","updateUser","updateChat","setState","username","updateUserChatWith","updateListUser","getTask","URL_API","sleep","ms","Promise","resolve","setTimeout","Values","tl","parse","getItem","lastTask","length","addTaskAction","id","parseInt","name","level","closeFormAction","updateChart","URL_CHECK_LOGIN","userName","NotLogin","IsLogin","logout","URL_LOGOUT","isCompleted","UNSAFE_componentWillMount","render","showForm","form","showChart","chart","isLogin","backgroundColor","alignItems","justifyContent","margin","span","offset","mapDispatchToProps","dispatch","task","addTask","closeForm","resetChart","notLogin","listUser","mapStateToProps","ToggleForm","ToggleChart","LoginUserName"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Search from \"./Component/Search\";\nimport SortDropDown from \"./Component/SortDropDown\";\nimport * as Action from \"./Actions/index\";\nimport * as URL from \"./Const/URL\";\nimport AddTaskButton from \"./Component/AddTaskButton\";\nimport Chatbox from \"./Component/Chatbox\";\nimport TaskTable from \"./Component/TaskTable\";\nimport ShowChartButton from \"./Component/ShowChartButton\";\nimport AddTaskReduxForm from \"./Component/AddTaskReduxForm\";\nimport Chart from \"./Component/Chart\";\nimport { connect } from \"react-redux\";\nimport SignInSignUpRouter from \"./Component/SignInSignUpRouter\";\nimport AppNavbar from \"./Component/AppNavbar\";\nimport connection from \"./Reducer/ConnectHub\";\nimport ChatGroup from \"./Component/ChatGroup\";\nimport { Col } from \"react-bootstrap\";\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chatToggle: false,\n        };\n        this.AddTask = this.AddTask.bind(this);\n        this.checkLogin = this.checkLogin.bind(this);\n        this.toggleChat = this.toggleChat.bind(this);\n        connection.on(\"ReceiveMessage\", (message) => {\n            console.log(\"đã nhận:\", message);\n            fetch(\"http://localhost:3000/api/Todo\", {\n                method: \"GET\",\n            })\n                .then((response) => {\n                    // console.log(response);\n                    return response.json();\n                })\n                .catch((e) => {\n                    console.error(\"Err\", e);\n                })\n                .then((data) => {\n                    // console.log(data);\n                    localStorage.setItem(\"Tasks\", JSON.stringify(data));\n                    // console.log(data);\n                    // Cookies.set(\"Task\", data);\n                    // console.log(localStorage.getItem(\"Tasks\"));\n                })\n                .then(() => {\n                    this.props.resetTask();\n                });\n        });\n    }\n    componentDidMount() {\n        connection.on(\n            \"ReceiveChatMessageFromSomeOne\",\n            (message, usernameSend, usernameReceive) => {\n                console.log(\"đã nhận:\", message, \"Form\", usernameSend);\n                fetch(URL.URL_GETUSERNAME, { method: \"GET\" })\n                    .then((Response) => Response.json())\n                    .then((data) => {\n                        console.log(data);\n                        this.props.updateUser(data);\n                    });\n                this.props.updateChat(usernameSend, usernameReceive, message);\n                this.setState({\n                    chatToggle: true,\n                });\n                if (usernameSend !== this.props.username.username) {\n                    this.props.updateUserChatWith(usernameSend);\n                } else {\n                    this.props.updateUserChatWith(usernameReceive);\n                }\n            }\n        );\n    }\n\n    toggleChat() {\n        this.setState({ chatToggle: !this.state.chatToggle });\n        fetch(URL.URL_GETUSERNAME, { method: \"GET\" })\n            .then((Response) => Response.json())\n            .then((data) => {\n                console.log(data);\n                this.props.updateListUser(data);\n            });\n    }\n\n    getTask() {\n        fetch(URL.URL_API)\n            .then((response) => response.json())\n            .catch((e) => {\n                console.log(\"Err\", e);\n            })\n            .then((data) => {\n                // console.log(data);\n                localStorage.setItem(\"Tasks\", JSON.stringify(data));\n                // Cookies.set(\"Task\", data);\n                // console.log(localStorage.getItem(\"Tasks\"));\n            });\n    }\n\n    sleep(ms) {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    }\n    async AddTask(Values) {\n        console.log(Values);\n        let tl = JSON.parse(localStorage.getItem(\"Tasks\"));\n        let lastTask = tl[tl.length - 1];\n        this.props.addTaskAction({\n            id: parseInt(lastTask.id + 1),\n            name: Values.name,\n            level: parseInt(Values.level),\n        });\n        this.props.closeFormAction();\n        await this.sleep(750);\n        this.props.updateChart();\n    }\n    checkLogin() {\n        fetch(URL.URL_CHECK_LOGIN, {\n            method: \"GET\",\n        })\n            .then((Response) => Response.json())\n            .then((data) => {\n                if (data.userName === null) {\n                    this.props.NotLogin();\n                } else {\n                    this.getTask();\n                    this.props.IsLogin();\n                }\n            });\n    }\n\n    logout() {\n        fetch(URL.URL_LOGOUT, {\n            method: \"GET\",\n        })\n            .then((Response) => Response.json())\n            .then((data) => {\n                // console.log(data);\n                // console.log(data.isCompleted);\n                if (data.isCompleted) {\n                    this.props.NotLogin();\n                }\n            });\n    }\n\n    UNSAFE_componentWillMount() {\n        console.log(\"UNSAFE_componentWillMount\");\n        this.checkLogin();\n    }\n\n    render() {\n        console.log(\"render App\");\n        if (this.props.showForm) {\n            // console.log(\"d\");\n            var form = (\n                <AddTaskReduxForm\n                    form=\"AddForm\"\n                    onSubmit={this.AddTask}\n                ></AddTaskReduxForm>\n            );\n        } else form = null;\n\n        if (this.props.showChart) {\n            var chart = <Chart> </Chart>;\n        } else chart = null;\n        if (this.props.isLogin) {\n            return (\n                <div>\n                    <Container fluid>\n                        {/* <Values form=\"row\" /> */}\n                        <AppNavbar toggleChat={this.toggleChat}></AppNavbar>\n\n                        <Row>\n                            <Search></Search>\n                            <SortDropDown></SortDropDown>\n                            <ShowChartButton></ShowChartButton>\n                            <AddTaskButton></AddTaskButton>\n                        </Row>\n\n                        <Row>{form}</Row>\n                        {/* <Chart> </Chart> */}\n                        <Row\n                            style={{\n                                backgroundColor: \"#1b262c\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                                margin: \"1rem\",\n                            }}\n                        >\n                            {chart}\n                        </Row>\n                        <Row>\n                            <TaskTable\n                            // connection={this.props.connection}\n                            ></TaskTable>\n                        </Row>\n                        {this.state.chatToggle ? (\n                            <Col\n                                className=\"chat_row\"\n                                md={{ span: 6, offset: 6 }}\n                            >\n                                <Row>\n                                    ><ChatGroup></ChatGroup>\n                                    <Chatbox></Chatbox>>\n                                </Row>\n                            </Col>\n                        ) : null}\n                    </Container>\n                    {/* <div className=\"chatboxflow\"> */}\n                    {/* <Button className=\"btn-chatbox\" onClick={this.toggleChat}>\n                        <FontAwesomeIcon icon={faComments} size=\"1x\" />\n                    </Button> */}\n\n                    {/* </div> */}\n                </div>\n            );\n        } else if (!this.props.isLogin)\n            return <SignInSignUpRouter></SignInSignUpRouter>;\n    }\n}\nfunction mapDispatchToProps(dispatch, props) {\n    return {\n        addTaskAction: (task) => {\n            dispatch(Action.addTask(task));\n        },\n        closeFormAction: () => {\n            dispatch(Action.closeForm());\n        },\n        // setNewTask: (task) => {\n        //     dispatch(Action.setNewTask(task));\n        // },\n        updateChart: () => {\n            dispatch(Action.resetChart());\n        },\n        // ToggleLogin: () => {\n        //     dispatch(Action.toggleLogin());\n        // },\n        IsLogin: () => {\n            dispatch(Action.isLogin());\n        },\n        NotLogin: () => {\n            dispatch(Action.notLogin());\n        },\n        updateUser: (username) => {\n            dispatch(Action.updateUser(username));\n        },\n        resetTask: () => {\n            dispatch(Action.resetTask());\n        },\n        updateChat: (usernameSend, usernameReceive, message) => {\n            dispatch(Action.updateChat(usernameSend, usernameReceive, message));\n        },\n        updateListUser: (listUser) => {\n            dispatch(Action.updateListUser(listUser));\n        },\n        updateUserChatWith: (username) => {\n            dispatch(Action.updateUserChatWith(username));\n        },\n    };\n}\nconst mapStateToProps = (state) => ({\n    isLogin: state.IsLogin,\n    showForm: state.ToggleForm,\n    showChart: state.ToggleChart,\n    username: state.LoginUserName,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}
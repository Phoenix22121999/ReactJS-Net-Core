{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\AddTaskForm.js\";\nimport React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\";\n\nfunction AddTaskForm(props) {\n  // constructor(props) {\n  //     super(props);\n  //     // this.state = {\n  //     //     // adding: this.props.showForm,\n  //     //     // taskName: this.props.name,\n  //     //     // taskLevel: this.props.level,\n  //     //     // oldTaskName: this.props.name,\n  //     // };\n  //     this.closeForm = this.closeForm.bind(this);\n  //     this.levelChange = this.levelChange.bind(this);\n  //     this.nameChange = this.nameChange.bind(this);\n  //     this.submitForm = this.submitForm.bind(this);\n  //     this.saveForm = this.saveForm.bind(this);\n  // }\n  function submitForm() {\n    this.props.addTaskAction({\n      name: this.props.newTaskName,\n      level: parseInt(this.props.newTaskLevel)\n    });\n  }\n\n  function levelChange(e) {\n    this.props.setNewTask({\n      name: this.props.newTaskName,\n      level: e.target.value\n    });\n  }\n\n  function nameChange(e) {\n    this.props.setNewTask({\n      name: e.target.value,\n      level: this.props.newTaskLevel\n    });\n  }\n\n  function saveForm() {\n    this.props.updateTask(this.state.oldTaskName, this.state.taskName, parseInt(this.state.taskLevel));\n  }\n\n  function addSaveToggle(edit) {\n    if (edit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        onClick: this.saveForm,\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, \"Save\");\n    } else return /*#__PURE__*/React.createElement(Button, {\n      onClick: this.submitForm,\n      variant: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, \"Add\");\n  }\n\n  function closeForm() {\n    this.props.closeForm();\n  }\n\n  return /*#__PURE__*/React.createElement(Col, {\n    md: {\n      span: 5,\n      offset: 7\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    srOnly: true,\n    htmlFor: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"label\"), /*#__PURE__*/React.createElement(Form.Control, {\n    value: this.props.newTaskName,\n    onChange: this.nameChange,\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Task Name\",\n    ref: \"task_name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    srOnly: true,\n    htmlFor: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, \"label\"), /*#__PURE__*/React.createElement(Form.Control, {\n    value: this.props.newTaskLevel,\n    as: \"select\",\n    name: \"ds\",\n    id: \"inputDs\",\n    onChange: this.levelChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  }, \"High\")))), /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroup, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 25\n    }\n  }, this.addSaveToggle(this.props.edit), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      this.props.closeFormAction();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  }, \"Cancel\"))))));\n}\n\nconst mapStateToProps = state => ({\n  toggleForm: state.ToggleForm,\n  toggleEdit: state.ToggleEdit,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    addTaskAction: task => {\n      dispatch(Action.addTask(task));\n    },\n    closeFormAction: () => {\n      dispatch(Action.closeForm());\n    },\n    setNewTask: task => {\n      dispatch(Action.setNewTask(task));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTaskForm);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/AddTaskForm.js"],"names":["React","Component","Form","Col","Button","ButtonGroup","connect","Action","AddTaskForm","props","submitForm","addTaskAction","name","newTaskName","level","parseInt","newTaskLevel","levelChange","e","setNewTask","target","value","nameChange","saveForm","updateTask","state","oldTaskName","taskName","taskLevel","addSaveToggle","edit","closeForm","span","offset","closeFormAction","mapStateToProps","toggleForm","ToggleForm","toggleEdit","ToggleEdit","NewTask","mapDispatchToProps","dispatch","task","addTask"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\nfunction AddTaskForm(props) {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     // this.state = {\r\n    //     //     // adding: this.props.showForm,\r\n    //     //     // taskName: this.props.name,\r\n    //     //     // taskLevel: this.props.level,\r\n    //     //     // oldTaskName: this.props.name,\r\n    //     // };\r\n    //     this.closeForm = this.closeForm.bind(this);\r\n    //     this.levelChange = this.levelChange.bind(this);\r\n    //     this.nameChange = this.nameChange.bind(this);\r\n    //     this.submitForm = this.submitForm.bind(this);\r\n    //     this.saveForm = this.saveForm.bind(this);\r\n    // }\r\n\r\n    function submitForm() {\r\n        this.props.addTaskAction({\r\n            name: this.props.newTaskName,\r\n            level: parseInt(this.props.newTaskLevel),\r\n        });\r\n    }\r\n\r\n    function levelChange(e) {\r\n        this.props.setNewTask({\r\n            name: this.props.newTaskName,\r\n            level: e.target.value,\r\n        });\r\n    }\r\n\r\n    function nameChange(e) {\r\n        this.props.setNewTask({\r\n            name: e.target.value,\r\n            level: this.props.newTaskLevel,\r\n        });\r\n    }\r\n    function saveForm() {\r\n        this.props.updateTask(\r\n            this.state.oldTaskName,\r\n            this.state.taskName,\r\n            parseInt(this.state.taskLevel)\r\n        );\r\n    }\r\n    function addSaveToggle(edit) {\r\n        if (edit) {\r\n            return (\r\n                <Button onClick={this.saveForm} variant=\"primary\">\r\n                    Save\r\n                </Button>\r\n            );\r\n        } else\r\n            return (\r\n                <Button onClick={this.submitForm} variant=\"primary\">\r\n                    Add\r\n                </Button>\r\n            );\r\n    }\r\n\r\n    function closeForm() {\r\n        this.props.closeForm();\r\n    }\r\n\r\n    return (\r\n        <Col md={{ span: 5, offset: 7 }}>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col md={8}>\r\n                        <Form.Group>\r\n                            <Form.Label srOnly={true} htmlFor=\"true\">\r\n                                label\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                value={this.props.newTaskName}\r\n                                onChange={this.nameChange}\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Task Name\"\r\n                                ref=\"task_name\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <Form.Label srOnly={true} htmlFor=\"true\">\r\n                            label\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            value={this.props.newTaskLevel}\r\n                            as=\"select\"\r\n                            name=\"ds\"\r\n                            id=\"inputDs\"\r\n                            onChange={this.levelChange}\r\n                        >\r\n                            <option value={1}>Low</option>\r\n                            <option value={2}>Medium</option>\r\n                            <option value={3}>High</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col md={12}>\r\n                        <ButtonGroup md={12}>\r\n                            {this.addSaveToggle(this.props.edit)}\r\n                            {/* <Button\r\n                                    onClick={this.submitForm}\r\n                                    variant=\"primary\"\r\n                                >\r\n                                    Add\r\n                                </Button> \r\n                                this.closeForm*/}\r\n\r\n                            <Button\r\n                                onClick={() => {\r\n                                    this.props.closeFormAction();\r\n                                }}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n        </Col>\r\n    );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    toggleForm: state.ToggleForm,\r\n    toggleEdit: state.ToggleEdit,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch, props) {\r\n    return {\r\n        addTaskAction: (task) => {\r\n            dispatch(Action.addTask(task));\r\n        },\r\n        closeFormAction: () => {\r\n            dispatch(Action.closeForm());\r\n        },\r\n        setNewTask: (task) => {\r\n            dispatch(Action.setNewTask(task));\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTaskForm);\r\n"]},"metadata":{},"sourceType":"module"}
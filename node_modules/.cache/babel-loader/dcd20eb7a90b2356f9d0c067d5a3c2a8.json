{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\AddTaskForm.js\";\nimport React, { Component } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\";\nimport { useState, useEffect } from \"react\";\n\nfunction AddTaskForm(props) {\n  // constructor(props) {\n  //     super(props);\n  //     // state = {\n  //     //     // adding: props.showForm,\n  //     //     // taskName: props.name,\n  //     //     // taskLevel: props.level,\n  //     //     // oldTaskName: props.name,\n  //     // };\n  //     closeForm = closeForm.bind(this);\n  //     levelChange = levelChange.bind(this);\n  //     nameChange = nameChange.bind(this);\n  //     submitForm = submitForm.bind(this);\n  //     saveForm = saveForm.bind(this);\n  // }\n  const [isAdd, setIsAdd] = useState(false);\n  const [nameChange, setNameChange] = useState(\"\");\n  const [levelChange, setLevelChange] = useState(1);\n\n  function submitForm() {\n    props.addTaskAction({\n      name: props.newTaskName,\n      level: parseInt(props.newTaskLevel)\n    });\n  } // function levelChange(e) {\n  //     props.setNewTask({\n  //         name: props.newTaskName,\n  //         level: e.target.value,\n  //     });\n  // }\n  // function nameChange(e) {\n  //     props.setNewTask({\n  //         name: e.target.value,\n  //         level: props.newTaskLevel,\n  //     });\n  // }\n  // function saveForm() {\n  //     props.updateTask(\n  //         state.oldTaskName,\n  //         state.taskName,\n  //         parseInt(state.taskLevel)\n  //     );\n  // }\n  // function addSaveToggle(edit) {\n  //     if (edit) {\n  //         return (\n  //             <Button onClick={saveForm} variant=\"primary\">\n  //                 Save\n  //             </Button>\n  //         );\n  //     } else\n  //         return (\n  //             <Button onClick={submitForm} variant=\"primary\">\n  //                 Add\n  //             </Button>\n  //         );\n  // }\n\n\n  function closeForm() {\n    props.closeForm();\n  }\n\n  return /*#__PURE__*/React.createElement(Col, {\n    md: {\n      span: 5,\n      offset: 7\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    srOnly: true,\n    htmlFor: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }, \"label\"), /*#__PURE__*/React.createElement(Form.Control, {\n    value: props.newTaskName,\n    onChange: nameChange,\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"Task Name\",\n    ref: \"task_name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    srOnly: true,\n    htmlFor: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, \"label\"), /*#__PURE__*/React.createElement(Form.Control, {\n    value: props.newTaskLevel,\n    as: \"select\",\n    name: \"ds\",\n    id: \"inputDs\",\n    onChange: levelChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 29\n    }\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }, \"High\")))), /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroup, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: submitForm,\n    variant: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 29\n    }\n  }, \"Add\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      props.closeFormAction();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, \"Cancel\"))))));\n}\n\nconst mapStateToProps = state => ({\n  toggleForm: state.ToggleForm,\n  toggleEdit: state.ToggleEdit // newTaskName: state.NewTask.name,\n  // newTaskLevel: state.NewTask.level,\n\n});\n\nfunction mapDispatchToProps(dispatch, props) {\n  return {\n    addTaskAction: task => {\n      dispatch(Action.addTask(task));\n    },\n    closeFormAction: () => {\n      dispatch(Action.closeForm());\n    },\n    setNewTask: task => {\n      dispatch(Action.setNewTask(task));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTaskForm);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/AddTaskForm.js"],"names":["React","Component","Form","Col","Button","ButtonGroup","connect","Action","useState","useEffect","AddTaskForm","props","isAdd","setIsAdd","nameChange","setNameChange","levelChange","setLevelChange","submitForm","addTaskAction","name","newTaskName","level","parseInt","newTaskLevel","closeForm","span","offset","closeFormAction","mapStateToProps","state","toggleForm","ToggleForm","toggleEdit","ToggleEdit","mapDispatchToProps","dispatch","task","addTask","setNewTask"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nfunction AddTaskForm(props) {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     // state = {\r\n    //     //     // adding: props.showForm,\r\n    //     //     // taskName: props.name,\r\n    //     //     // taskLevel: props.level,\r\n    //     //     // oldTaskName: props.name,\r\n    //     // };\r\n    //     closeForm = closeForm.bind(this);\r\n    //     levelChange = levelChange.bind(this);\r\n    //     nameChange = nameChange.bind(this);\r\n    //     submitForm = submitForm.bind(this);\r\n    //     saveForm = saveForm.bind(this);\r\n    // }\r\n    const [isAdd, setIsAdd] = useState(false);\r\n    const [nameChange, setNameChange] = useState(\"\");\r\n    const [levelChange, setLevelChange] = useState(1);\r\n\r\n    function submitForm() {\r\n        props.addTaskAction({\r\n            name: props.newTaskName,\r\n            level: parseInt(props.newTaskLevel),\r\n        });\r\n    }\r\n\r\n    // function levelChange(e) {\r\n    //     props.setNewTask({\r\n    //         name: props.newTaskName,\r\n    //         level: e.target.value,\r\n    //     });\r\n    // }\r\n\r\n    // function nameChange(e) {\r\n    //     props.setNewTask({\r\n    //         name: e.target.value,\r\n    //         level: props.newTaskLevel,\r\n    //     });\r\n    // }\r\n    // function saveForm() {\r\n    //     props.updateTask(\r\n    //         state.oldTaskName,\r\n    //         state.taskName,\r\n    //         parseInt(state.taskLevel)\r\n    //     );\r\n    // }\r\n    // function addSaveToggle(edit) {\r\n    //     if (edit) {\r\n    //         return (\r\n    //             <Button onClick={saveForm} variant=\"primary\">\r\n    //                 Save\r\n    //             </Button>\r\n    //         );\r\n    //     } else\r\n    //         return (\r\n    //             <Button onClick={submitForm} variant=\"primary\">\r\n    //                 Add\r\n    //             </Button>\r\n    //         );\r\n    // }\r\n\r\n    function closeForm() {\r\n        props.closeForm();\r\n    }\r\n\r\n    return (\r\n        <Col md={{ span: 5, offset: 7 }}>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col md={8}>\r\n                        <Form.Group>\r\n                            <Form.Label srOnly={true} htmlFor=\"true\">\r\n                                label\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                value={props.newTaskName}\r\n                                onChange={nameChange}\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Task Name\"\r\n                                ref=\"task_name\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <Form.Label srOnly={true} htmlFor=\"true\">\r\n                            label\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            value={props.newTaskLevel}\r\n                            as=\"select\"\r\n                            name=\"ds\"\r\n                            id=\"inputDs\"\r\n                            onChange={levelChange}\r\n                        >\r\n                            <option value={1}>Low</option>\r\n                            <option value={2}>Medium</option>\r\n                            <option value={3}>High</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col md={12}>\r\n                        <ButtonGroup md={12}>\r\n                            {/* {addSaveToggle(props.edit)} */}\r\n                            <Button onClick={submitForm} variant=\"primary\">\r\n                                Add\r\n                            </Button>\r\n                            {/* <Button\r\n                                    onClick={submitForm}\r\n                                    variant=\"primary\"\r\n                                >\r\n                                    Add\r\n                                </Button> \r\n                                closeForm*/}\r\n\r\n                            <Button\r\n                                onClick={() => {\r\n                                    props.closeFormAction();\r\n                                }}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n        </Col>\r\n    );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    toggleForm: state.ToggleForm,\r\n    toggleEdit: state.ToggleEdit,\r\n    // newTaskName: state.NewTask.name,\r\n    // newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch, props) {\r\n    return {\r\n        addTaskAction: (task) => {\r\n            dispatch(Action.addTask(task));\r\n        },\r\n        closeFormAction: () => {\r\n            dispatch(Action.closeForm());\r\n        },\r\n        setNewTask: (task) => {\r\n            dispatch(Action.setNewTask(task));\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTaskForm);\r\n"]},"metadata":{},"sourceType":"module"}
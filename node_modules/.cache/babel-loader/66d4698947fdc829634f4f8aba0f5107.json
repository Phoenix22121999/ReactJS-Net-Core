{"ast":null,"code":"import * as TYPE from \"../Const/Types\";\nimport TaskList from \"../Tasks/Task.json\";\nvar local;\nlocal = localStorage.getItem(\"Tasks\");\n\nif (local === \"undefined\") {\n  console.log(\"resetdata\"); //local = JSON.stringify(TaskList.Task);\n\n  localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n}\n\nlocal = localStorage.getItem(\"Tasks\");\nconst initialState = JSON.parse(local);\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case TYPE.LIST:\n      console.log(\"reducer\", action);\n      return state;\n\n    case TYPE.ADD_TASK:\n      console.log(\"reducer\", action);\n      state.push(action.task); // console.log(\"state\", state);\n      // console.log(\"js\", JSON.stringify(state));\n\n      localStorage.setItem(\"Tasks\", JSON.stringify(state));\n      return [...state];\n\n    case TYPE.DELETE_TASK:\n      console.log(\"reducer\", action);\n      let tmpArr = state.filter(task => {\n        return task.name !== action.taskName;\n      });\n      console.log(\"state\", tmpArr);\n      console.log(\"js\", JSON.stringify(tmpArr));\n      localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\n      return [...tmpArr];\n\n    case TYPE.UPDATE_TASK:\n      console.log(\"reducer\", action);\n      let updateArr = state.map(task => {\n        if (task.name === oldName) {\n          return {\n            name: newName,\n            level: newLevel\n          };\n        } else return task;\n      });\n      console.log(\"state\", updateArr);\n      console.log(\"js\", JSON.stringify(updateArr));\n      localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\n      return [...tmpArr];\n\n    default:\n      return state;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Reducer/ListTask.js"],"names":["TYPE","TaskList","local","localStorage","getItem","console","log","setItem","JSON","stringify","Task","initialState","parse","state","action","type","LIST","ADD_TASK","push","task","DELETE_TASK","tmpArr","filter","name","taskName","UPDATE_TASK","updateArr","map","oldName","newName","level","newLevel"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,IAAIC,KAAJ;AACAA,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAR;;AACA,IAAIF,KAAK,KAAK,WAAd,EAA2B;AACvBG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EADuB,CAEvB;;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeR,QAAQ,CAACS,IAAxB,CAA9B;AACH;;AACDR,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAR;AACA,MAAMO,YAAY,GAAGH,IAAI,CAACI,KAAL,CAAWV,KAAX,CAArB;AAEA,gBAAe,CAACW,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKf,IAAI,CAACgB,IAAV;AACIX,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,MAAvB;AACA,aAAOD,KAAP;;AACJ,SAAKb,IAAI,CAACiB,QAAV;AACIZ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,MAAvB;AACAD,MAAAA,KAAK,CAACK,IAAN,CAAWJ,MAAM,CAACK,IAAlB,EAFJ,CAGI;AACA;;AACAhB,MAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeI,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKb,IAAI,CAACoB,WAAV;AACIf,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,MAAvB;AACA,UAAIO,MAAM,GAAGR,KAAK,CAACS,MAAN,CAAcH,IAAD,IAAU;AAChC,eAAOA,IAAI,CAACI,IAAL,KAAcT,MAAM,CAACU,QAA5B;AACH,OAFY,CAAb;AAGAnB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBe,MAArB;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBE,IAAI,CAACC,SAAL,CAAeY,MAAf,CAAlB;AACAlB,MAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeY,MAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,MAAJ,CAAP;;AACJ,SAAKrB,IAAI,CAACyB,WAAV;AACIpB,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,MAAvB;AACA,UAAIY,SAAS,GAAGb,KAAK,CAACc,GAAN,CAAWR,IAAD,IAAU;AAChC,YAAIA,IAAI,CAACI,IAAL,KAAcK,OAAlB,EAA2B;AACvB,iBAAO;AAAEL,YAAAA,IAAI,EAAEM,OAAR;AAAiBC,YAAAA,KAAK,EAAEC;AAAxB,WAAP;AACH,SAFD,MAEO,OAAOZ,IAAP;AACV,OAJe,CAAhB;AAKAd,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBoB,SAArB;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBE,IAAI,CAACC,SAAL,CAAeiB,SAAf,CAAlB;AACAvB,MAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeiB,SAAf,CAA9B;AACA,aAAO,CAAC,GAAGL,MAAJ,CAAP;;AACJ;AACI,aAAOR,KAAP;AAhCR;;AAkCA,SAAOA,KAAP;AACH,CApCD","sourcesContent":["import * as TYPE from \"../Const/Types\";\r\nimport TaskList from \"../Tasks/Task.json\";\r\nvar local;\r\nlocal = localStorage.getItem(\"Tasks\");\r\nif (local === \"undefined\") {\r\n    console.log(\"resetdata\");\r\n    //local = JSON.stringify(TaskList.Task);\r\n    localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n}\r\nlocal = localStorage.getItem(\"Tasks\");\r\nconst initialState = JSON.parse(local);\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TYPE.LIST:\r\n            console.log(\"reducer\", action);\r\n            return state;\r\n        case TYPE.ADD_TASK:\r\n            console.log(\"reducer\", action);\r\n            state.push(action.task);\r\n            // console.log(\"state\", state);\r\n            // console.log(\"js\", JSON.stringify(state));\r\n            localStorage.setItem(\"Tasks\", JSON.stringify(state));\r\n            return [...state];\r\n        case TYPE.DELETE_TASK:\r\n            console.log(\"reducer\", action);\r\n            let tmpArr = state.filter((task) => {\r\n                return task.name !== action.taskName;\r\n            });\r\n            console.log(\"state\", tmpArr);\r\n            console.log(\"js\", JSON.stringify(tmpArr));\r\n            localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\r\n            return [...tmpArr];\r\n        case TYPE.UPDATE_TASK:\r\n            console.log(\"reducer\", action);\r\n            let updateArr = state.map((task) => {\r\n                if (task.name === oldName) {\r\n                    return { name: newName, level: newLevel };\r\n                } else return task;\r\n            });\r\n            console.log(\"state\", updateArr);\r\n            console.log(\"js\", JSON.stringify(updateArr));\r\n            localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\r\n            return [...tmpArr];\r\n        default:\r\n            return state;\r\n    }\r\n    return state;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
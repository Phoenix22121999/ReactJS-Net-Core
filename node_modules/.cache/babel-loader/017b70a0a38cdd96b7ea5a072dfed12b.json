{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { useState } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport * as URL from \"../Const/URL\";\nimport $ from \"jquery\";\nimport { SubmissionError } from \"redux-form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\"; // import EditFields from \"./EditFields\";\n\nimport \"../Form.css\";\nimport EditForm from \"./EditForm\"; // import { Field, reduxForm, submit } from \"redux-form\";\n// import { Field, reduxForm } from \"redux-form\";\n// import { submit } from \"redux-form\";\n// import React, { useState, useEffect } from \"react\";\n// import Edit from \"./Edit\";\n\nfunction TaskRow(props) {\n  // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\n  // TaskRow = createReduxForm(TaskRow);\n  // constructor(props) {\n  //     super(props);\n  //     this.nameChange = this.nameChange.bind(this);\n  //     this.levelChange = this.levelChange.bind(this);\n  // }\n  // const { handleSubmit, pristine, reset, submitting } = props;\n  const [nameChange, setNameChange] = useState(\"\");\n  const [levelChange, setLevelChange] = useState(1);\n  const [editName, setEditName] = useState(props.editName);\n  const [isEdit, setIsEdit] = useState(false);\n  const [isError, setError] = useState(false); // const [id, setId] = useState(props.task.id);\n  // function test(values) {\n  //     console.log(values);\n  // }\n  // function update(newName, newLevel) {\n  //     console.log(newName, newLevel);\n  //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\n  //     props.updateTask({ id: props.task.id, name: newName, level: newLevel });\n  // }\n\n  function getTask() {\n    fetch(URL.URL_API).then(response => response.json()).catch(e => {\n      console.log(\"Err\", e);\n    }).then(data => {\n      // console.log(data);\n      localStorage.setItem(\"Tasks\", JSON.stringify(data)); // Cookies.set(\"Task\", data);\n      // console.log(localStorage.getItem(\"Tasks\"));\n    });\n  }\n\n  function update(values) {\n    console.log(values);\n    return fetch(URL.URL_API + \"/\" + props.task.id, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: props.task.id,\n        name: values.name,\n        level: parseInt(values.level)\n      })\n    }).then(response => {\n      console.log(\"response\", response);\n      if (response.ok) return response;else return response.json();\n      console.log(response);\n    }).then(response => {\n      console.log(response.status === 400);\n\n      if (response.status === 400) {\n        throw new SubmissionError({\n          Name: \"Name\",\n          _error: \"Name\"\n        });\n        console.log(response.errors.Name); // if (response.errors.Name !== undefined) {\n        //     var errName = response.errors.Name[0];\n        //     $(`#${props.task.id}.form-control`).css({\n        //         border: \"2px solid red\",\n        //         boxShadow: \"0 0 3px #CC0000\",\n        //     });\n        // } else {\n        //     $(`#${props.task.id}.form-control`).css({\n        //         border: \"none\",\n        //         boxShadow: \"none\",\n        //     });\n        // }\n        // console.log(response.errors.Level);\n        // if (response.errors.Level !== undefined) {\n        //     console.log(\"vô level\");\n        //     var errLevel = response.errors.Level[0];\n        //     $(`#${props.task.id}.custom-select`).css({\n        //         border: \"2px solid red\",\n        //         boxShadow: \"0 0 3px #CC0000\",\n        //     });\n        // } else {\n        //     console.log(\"vô level none\");\n        //     $(`#${props.task.id}.custom-select`).css({\n        //         border: \"none\",\n        //         boxShadow: \"none\",\n        //     });\n        // }\n        // let errStr = `${errName}${errLevel}`;\n\n        throw Error();\n      }\n\n      return getTask();\n    }).then(() => {\n      console.log(\"update \");\n      props.updateTask({\n        id: props.task.id,\n        name: values.name,\n        level: parseInt(values.level)\n      });\n      props.updateChart();\n      props.toggleEdit();\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  function handleEdit(name, level) {\n    // console.log(name);\n    // console.log(nameChange);\n    props.editTask({\n      id: props.task.id,\n      name: props.task.name,\n      level: props.task.level\n    });\n    setIsEdit(true);\n    setNameChange(name);\n    setLevelChange(level);\n    setEditName(name); // console.log(nameChange);\n    // props.toggleEdit();\n    // props.newTask({ name: name, level: level });\n    // props.editTask({ name: name, level: level });\n  }\n\n  function level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  function isEditForm(task) {\n    // console.log(task);\n    if (task.name !== editName || isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, props.index + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }\n      }, task.name), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }\n      }, level(task.level)), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 29\n        }\n      }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => {\n          // return this.delete(this.state.task.name);\n          return props.deleteTask(props.task.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 29\n        }\n      }, \"Delete\"))));\n    } else if (isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(EditForm, {\n        error: isError,\n        form: \"Row\" + (props.index + 1),\n        task: task,\n        index: props.index,\n        onSubmit: update,\n        onClose: () => {\n          setIsEdit(false);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      });\n    }\n  }\n\n  console.log(\"row-render\");\n  return isEditForm(props.task);\n}\n\nconst mapStateToProps = state => ({\n  // isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  // editTaskTarget: state.EditTask,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskId => {\n      dispatch(Action.deleteTask(taskId));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    },\n    editTask: task => {\n      dispatch(Action.editTask(task));\n    },\n    newTask: task => {\n      dispatch(Action.newTask(task));\n    },\n    updateTask: newTask => {\n      dispatch(Action.updateTask(newTask));\n    },\n    updateChart: () => {\n      dispatch(Action.resetChart());\n    } // submitform: () => {\n    //     dispatch(submit(\"row\"));\n    // },\n\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","useState","ButtonGroup","URL","$","SubmissionError","Button","Badge","connect","Action","EditForm","TaskRow","props","nameChange","setNameChange","levelChange","setLevelChange","editName","setEditName","isEdit","setIsEdit","isError","setError","getTask","fetch","URL_API","then","response","json","catch","e","console","log","data","localStorage","setItem","JSON","stringify","update","values","task","id","method","headers","Accept","body","name","level","parseInt","ok","status","Name","_error","errors","Error","updateTask","updateChart","toggleEdit","error","handleEdit","editTask","isEditForm","index","deleteTask","mapStateToProps","state","EditTask","newTaskName","NewTask","newTaskLevel","mapDispatchToProps","dispatch","taskId","newTask","resetChart"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB,C,CACA;;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;AAEA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAACW,KAAK,CAACK,QAAP,CAAxC;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACoB,OAAD,EAAUC,QAAV,IAAsBrB,QAAQ,CAAC,KAAD,CAApC,CAboB,CAcpB;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,WAASsB,OAAT,GAAmB;AACfC,IAAAA,KAAK,CAACrB,GAAG,CAACsB,OAAL,CAAL,CACKC,IADL,CACWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADxB,EAEKC,KAFL,CAEYC,CAAD,IAAO;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,CAAnB;AACH,KAJL,EAKKJ,IALL,CAKWO,IAAD,IAAU;AACZ;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA9B,EAFY,CAGZ;AACA;AACH,KAVL;AAWH;;AAED,WAASK,MAAT,CAAgBC,MAAhB,EAAwB;AACpBR,IAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACA,WAAOf,KAAK,CAACrB,GAAG,CAACsB,OAAJ,GAAc,GAAd,GAAoBb,KAAK,CAAC4B,IAAN,CAAWC,EAAhC,EAAoC;AAC5CC,MAAAA,MAAM,EAAE,KADoC;AAE5CC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX,OAFmC;AAM5CC,MAAAA,IAAI,EAAET,IAAI,CAACC,SAAL,CAAe;AACjBI,QAAAA,EAAE,EAAE7B,KAAK,CAAC4B,IAAN,CAAWC,EADE;AAEjBK,QAAAA,IAAI,EAAEP,MAAM,CAACO,IAFI;AAGjBC,QAAAA,KAAK,EAAEC,QAAQ,CAACT,MAAM,CAACQ,KAAR;AAHE,OAAf;AANsC,KAApC,CAAL,CAYFrB,IAZE,CAYIC,QAAD,IAAc;AAChBI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB;AAEA,UAAIA,QAAQ,CAACsB,EAAb,EAAiB,OAAOtB,QAAP,CAAjB,KACK,OAAOA,QAAQ,CAACC,IAAT,EAAP;AACLG,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACH,KAlBE,EAmBFD,IAnBE,CAmBIC,QAAD,IAAc;AAChBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACuB,MAAT,KAAoB,GAAhC;;AACA,UAAIvB,QAAQ,CAACuB,MAAT,KAAoB,GAAxB,EAA6B;AACzB,cAAM,IAAI7C,eAAJ,CAAoB;AACtB8C,UAAAA,IAAI,EAAE,MADgB;AAEtBC,UAAAA,MAAM,EAAE;AAFc,SAApB,CAAN;AAIArB,QAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAAC0B,MAAT,CAAgBF,IAA5B,EALyB,CAMzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,cAAMG,KAAK,EAAX;AACH;;AACD,aAAO/B,OAAO,EAAd;AACH,KA3DE,EA4DFG,IA5DE,CA4DG,MAAM;AACRK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEApB,MAAAA,KAAK,CAAC2C,UAAN,CAAiB;AACbd,QAAAA,EAAE,EAAE7B,KAAK,CAAC4B,IAAN,CAAWC,EADF;AAEbK,QAAAA,IAAI,EAAEP,MAAM,CAACO,IAFA;AAGbC,QAAAA,KAAK,EAAEC,QAAQ,CAACT,MAAM,CAACQ,KAAR;AAHF,OAAjB;AAKAnC,MAAAA,KAAK,CAAC4C,WAAN;AACA5C,MAAAA,KAAK,CAAC6C,UAAN;AACH,KAtEE,EAuEF5B,KAvEE,CAuEK6B,KAAD,IAAW;AACd3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,KAAZ;AACH,KAzEE,CAAP;AA0EH;;AAED,WAASC,UAAT,CAAoBb,IAApB,EAA0BC,KAA1B,EAAiC;AAC7B;AACA;AACAnC,IAAAA,KAAK,CAACgD,QAAN,CAAe;AACXnB,MAAAA,EAAE,EAAE7B,KAAK,CAAC4B,IAAN,CAAWC,EADJ;AAEXK,MAAAA,IAAI,EAAElC,KAAK,CAAC4B,IAAN,CAAWM,IAFN;AAGXC,MAAAA,KAAK,EAAEnC,KAAK,CAAC4B,IAAN,CAAWO;AAHP,KAAf;AAKA3B,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAN,IAAAA,aAAa,CAACgC,IAAD,CAAb;AACA9B,IAAAA,cAAc,CAAC+B,KAAD,CAAd;AACA7B,IAAAA,WAAW,CAAC4B,IAAD,CAAX,CAX6B,CAY7B;AACA;AACA;AACA;AACH;;AAED,WAASC,KAAT,CAAeA,KAAf,EAAsB;AAClB,YAAQA,KAAR;AACI,WAAK,CAAL;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;;AACJ,WAAK,CAAL;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;;AACJ,WAAK,CAAL;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACJ;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AARR;AAUH;;AAED,WAASc,UAAT,CAAoBrB,IAApB,EAA0B;AACtB;AACA,QAAIA,IAAI,CAACM,IAAL,KAAc7B,QAAd,IAA0BE,MAAM,KAAK,KAAzC,EAAgD;AAC5C,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BP,KAAK,CAACkD,KAAN,GAAc,CAA3C,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKtB,IAAI,CAACM,IAAV,CAJJ,eAKI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BC,KAAK,CAACP,IAAI,CAACO,KAAN,CAAlC,CALJ,eAMI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAC,SADZ;AAEI,QAAA,OAAO,EAAE,MACLY,UAAU,CAACnB,IAAI,CAACM,IAAN,EAAYN,IAAI,CAACO,KAAjB,CAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAUI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAC,QADZ;AAEI,QAAA,OAAO,EAAE,MAAM;AACX;AACA,iBAAOnC,KAAK,CAACmD,UAAN,CAAiBnD,KAAK,CAAC4B,IAAN,CAAWC,EAA5B,CAAP;AACH,SALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,CADJ,CANJ,CADJ;AA+BH,KAhCD,MAgCO,IAAItB,MAAM,KAAK,IAAf,EAAqB;AACxB;AACA,0BACI,oBAAC,QAAD;AACI,QAAA,KAAK,EAAEE,OADX;AAEI,QAAA,IAAI,EAAE,SAAST,KAAK,CAACkD,KAAN,GAAc,CAAvB,CAFV;AAGI,QAAA,IAAI,EAAEtB,IAHV;AAII,QAAA,KAAK,EAAE5B,KAAK,CAACkD,KAJjB;AAKI,QAAA,QAAQ,EAAExB,MALd;AAMI,QAAA,OAAO,EAAE,MAAM;AACXlB,UAAAA,SAAS,CAAC,KAAD,CAAT;AACH,SARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAYH;AACJ;;AAEDW,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,SAAO6B,UAAU,CAACjD,KAAK,CAAC4B,IAAP,CAAjB;AACH;;AAED,MAAMwB,eAAe,GAAIC,KAAD,KAAY;AAChC;AACAhD,EAAAA,QAAQ,EAAEgD,KAAK,CAACC,QAAN,CAAepB,IAFO;AAGhC;AACAqB,EAAAA,WAAW,EAAEF,KAAK,CAACG,OAAN,CAActB,IAJK;AAKhCuB,EAAAA,YAAY,EAAEJ,KAAK,CAACG,OAAN,CAAcrB;AALI,CAAZ,CAAxB;;AAQA,SAASuB,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHR,IAAAA,UAAU,EAAGS,MAAD,IAAY;AACpBD,MAAAA,QAAQ,CAAC9D,MAAM,CAACsD,UAAP,CAAkBS,MAAlB,CAAD,CAAR;AACH,KAHE;AAIHf,IAAAA,UAAU,EAAE,MAAM;AACdc,MAAAA,QAAQ,CAAC9D,MAAM,CAACgD,UAAP,EAAD,CAAR;AACH,KANE;AAOHG,IAAAA,QAAQ,EAAGpB,IAAD,IAAU;AAChB+B,MAAAA,QAAQ,CAAC9D,MAAM,CAACmD,QAAP,CAAgBpB,IAAhB,CAAD,CAAR;AACH,KATE;AAUHiC,IAAAA,OAAO,EAAGjC,IAAD,IAAU;AACf+B,MAAAA,QAAQ,CAAC9D,MAAM,CAACgE,OAAP,CAAejC,IAAf,CAAD,CAAR;AACH,KAZE;AAaHe,IAAAA,UAAU,EAAGkB,OAAD,IAAa;AACrBF,MAAAA,QAAQ,CAAC9D,MAAM,CAAC8C,UAAP,CAAkBkB,OAAlB,CAAD,CAAR;AACH,KAfE;AAgBHjB,IAAAA,WAAW,EAAE,MAAM;AACfe,MAAAA,QAAQ,CAAC9D,MAAM,CAACiE,UAAP,EAAD,CAAR;AACH,KAlBE,CAmBH;AACA;AACA;;AArBG,GAAP;AAuBH;;AAED,eAAelE,OAAO,CAACwD,eAAD,EAAkBM,kBAAlB,CAAP,CAA6C3D,OAA7C,CAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport * as URL from \"../Const/URL\";\r\nimport $ from \"jquery\";\r\nimport { SubmissionError } from \"redux-form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n// import EditFields from \"./EditFields\";\r\nimport \"../Form.css\";\r\nimport EditForm from \"./EditForm\";\r\n// import { Field, reduxForm, submit } from \"redux-form\";\r\n\r\n// import { Field, reduxForm } from \"redux-form\";\r\n// import { submit } from \"redux-form\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Edit from \"./Edit\";\r\nfunction TaskRow(props) {\r\n    // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\r\n    // TaskRow = createReduxForm(TaskRow);\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.nameChange = this.nameChange.bind(this);\r\n    //     this.levelChange = this.levelChange.bind(this);\r\n    // }\r\n    // const { handleSubmit, pristine, reset, submitting } = props;\r\n    const [nameChange, setNameChange] = useState(\"\");\r\n    const [levelChange, setLevelChange] = useState(1);\r\n    const [editName, setEditName] = useState(props.editName);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [isError, setError] = useState(false);\r\n    // const [id, setId] = useState(props.task.id);\r\n\r\n    // function test(values) {\r\n    //     console.log(values);\r\n    // }\r\n\r\n    // function update(newName, newLevel) {\r\n    //     console.log(newName, newLevel);\r\n    //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n    //     props.updateTask({ id: props.task.id, name: newName, level: newLevel });\r\n    // }\r\n    function getTask() {\r\n        fetch(URL.URL_API)\r\n            .then((response) => response.json())\r\n            .catch((e) => {\r\n                console.log(\"Err\", e);\r\n            })\r\n            .then((data) => {\r\n                // console.log(data);\r\n                localStorage.setItem(\"Tasks\", JSON.stringify(data));\r\n                // Cookies.set(\"Task\", data);\r\n                // console.log(localStorage.getItem(\"Tasks\"));\r\n            });\r\n    }\r\n\r\n    function update(values) {\r\n        console.log(values);\r\n        return fetch(URL.URL_API + \"/\" + props.task.id, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                id: props.task.id,\r\n                name: values.name,\r\n                level: parseInt(values.level),\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                console.log(\"response\", response);\r\n\r\n                if (response.ok) return response;\r\n                else return response.json();\r\n                console.log(response);\r\n            })\r\n            .then((response) => {\r\n                console.log(response.status === 400);\r\n                if (response.status === 400) {\r\n                    throw new SubmissionError({\r\n                        Name: \"Name\",\r\n                        _error: \"Name\",\r\n                    });\r\n                    console.log(response.errors.Name);\r\n                    // if (response.errors.Name !== undefined) {\r\n                    //     var errName = response.errors.Name[0];\r\n                    //     $(`#${props.task.id}.form-control`).css({\r\n                    //         border: \"2px solid red\",\r\n                    //         boxShadow: \"0 0 3px #CC0000\",\r\n                    //     });\r\n                    // } else {\r\n                    //     $(`#${props.task.id}.form-control`).css({\r\n                    //         border: \"none\",\r\n                    //         boxShadow: \"none\",\r\n                    //     });\r\n                    // }\r\n                    // console.log(response.errors.Level);\r\n                    // if (response.errors.Level !== undefined) {\r\n                    //     console.log(\"vô level\");\r\n                    //     var errLevel = response.errors.Level[0];\r\n                    //     $(`#${props.task.id}.custom-select`).css({\r\n                    //         border: \"2px solid red\",\r\n                    //         boxShadow: \"0 0 3px #CC0000\",\r\n                    //     });\r\n                    // } else {\r\n                    //     console.log(\"vô level none\");\r\n\r\n                    //     $(`#${props.task.id}.custom-select`).css({\r\n                    //         border: \"none\",\r\n                    //         boxShadow: \"none\",\r\n                    //     });\r\n                    // }\r\n                    // let errStr = `${errName}${errLevel}`;\r\n                    throw Error();\r\n                }\r\n                return getTask();\r\n            })\r\n            .then(() => {\r\n                console.log(\"update \");\r\n\r\n                props.updateTask({\r\n                    id: props.task.id,\r\n                    name: values.name,\r\n                    level: parseInt(values.level),\r\n                });\r\n                props.updateChart();\r\n                props.toggleEdit();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function handleEdit(name, level) {\r\n        // console.log(name);\r\n        // console.log(nameChange);\r\n        props.editTask({\r\n            id: props.task.id,\r\n            name: props.task.name,\r\n            level: props.task.level,\r\n        });\r\n        setIsEdit(true);\r\n        setNameChange(name);\r\n        setLevelChange(level);\r\n        setEditName(name);\r\n        // console.log(nameChange);\r\n        // props.toggleEdit();\r\n        // props.newTask({ name: name, level: level });\r\n        // props.editTask({ name: name, level: level });\r\n    }\r\n\r\n    function level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    function isEditForm(task) {\r\n        // console.log(task);\r\n        if (task.name !== editName || isEdit === false) {\r\n            return (\r\n                <tr>\r\n                    <td className=\"text-center\">{props.index + 1}</td>\r\n                    {/* {isEditName(props.task)} */}\r\n                    {/* {isEditLevel(props.task)} */}\r\n                    <td>{task.name}</td>\r\n                    <td className=\"text-center\">{level(task.level)}</td>\r\n                    <td className=\"text-center\">\r\n                        <ButtonGroup>\r\n                            {/* {toggleEditOrSave(props.task)} */}\r\n                            <Button\r\n                                variant=\"warning\"\r\n                                onClick={() =>\r\n                                    handleEdit(task.name, task.level)\r\n                                }\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"danger\"\r\n                                onClick={() => {\r\n                                    // return this.delete(this.state.task.name);\r\n                                    return props.deleteTask(props.task.id);\r\n                                }}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        } else if (isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <EditForm\r\n                    error={isError}\r\n                    form={\"Row\" + (props.index + 1)}\r\n                    task={task}\r\n                    index={props.index}\r\n                    onSubmit={update}\r\n                    onClose={() => {\r\n                        setIsEdit(false);\r\n                    }}\r\n                ></EditForm>\r\n            );\r\n        }\r\n    }\r\n\r\n    console.log(\"row-render\");\r\n\r\n    return isEditForm(props.task);\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    // editTaskTarget: state.EditTask,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskId) => {\r\n            dispatch(Action.deleteTask(taskId));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n        editTask: (task) => {\r\n            dispatch(Action.editTask(task));\r\n        },\r\n        newTask: (task) => {\r\n            dispatch(Action.newTask(task));\r\n        },\r\n        updateTask: (newTask) => {\r\n            dispatch(Action.updateTask(newTask));\r\n        },\r\n        updateChart: () => {\r\n            dispatch(Action.resetChart());\r\n        },\r\n        // submitform: () => {\r\n        //     dispatch(submit(\"row\"));\r\n        // },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
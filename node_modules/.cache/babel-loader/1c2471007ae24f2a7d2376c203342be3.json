{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskTable.js\";\nimport React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Edit from \"./Edit\";\nimport TaskRow from \"./TaskRow\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\";\n\nclass TaskTable extends Component {\n  constructor(props) {\n    super(props); // local = localStorage.getItem(\"Tasks\");\n    // if (local === \"undefined\") {\n    //     console.log(local);\n    //     //local = JSON.stringify(TaskList.Task);\n    //     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n    // }\n    //localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n    // this.addTask = this.addTask.bind(this);\n    // this.delete = this.delete.bind(this);\n    // this.update = this.update.bind(this);\n    // this.handleEdit = this.handleEdit.bind(this);\n    // this.nameChange = this.nameChange.bind(this);\n    // this.levelChange = this.levelChange.bind(this);\n    // this.handleSave = this.handleSave.bind(this);\n    // this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\n    // this.state = {\n    //     // Task: JSON.parse(local),\n    //     // newTask: this.props.newTask,\n    //     isEdit: false,\n    // };\n    //console.log(this.state.TaskList.Task);\n  } // update(oldName, newName, newLevel) {\n  //     // console.log(oldName, newName, newLevel);\n  //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\n  //     const tmpArr = this.state.Task.map((task) => {\n  //         if (task.name === oldName) {\n  //             return { name: newName, level: newLevel };\n  //         } else return task;\n  //     });\n  //     this.setState({\n  //         Task: tmpArr,\n  //     });\n  //     //console.log(tmpArr);\n  //     // this.state.Task[index].name = newName;\n  //     // this.state.Task[index].level = newLevel;\n  // }\n  // delete(name) {\n  //     // console.log(\"delete\");\n  //     const tmpArr = this.props.Task.filter((task) => {\n  //         return task.name !== name;\n  //     });\n  //     this.setState({\n  //         Task: tmpArr,\n  //     });\n  // }\n  // handleEdit(name, level) {\n  //     this.setState({\n  //         isEdit: true,\n  //     });\n  //     // console.log(\"edit\", name, \" \", level);\n  //     this.props.setNameAndLevel(name, level);\n  // }\n  // nameChange(e) {\n  //     this.setState({\n  //         newName: e.target.value,\n  //         isEdit: true,\n  //     });\n  // }\n  // isEditName(task) {\n  //     if (task.name !== this.props.editName || this.props.isEdit === false) {\n  //         // console.log(\"nor \", task.name);\n  //         return <td>{task.name}</td>;\n  //     } else if (this.props.isEdit === true) {\n  //         // console.log(\"text \", task.name);\n  //         return (\n  //             <Edit newName={this.props.newName}></Edit>\n  //             // <td>\n  //             //     <Form.Control\n  //             //         type=\"text\"\n  //             //         value={this.state.newName}\n  //             //         onChange={this.nameChange}\n  //             //     ></Form.Control>\n  //             // </td>\n  //         );\n  //     }\n  // }\n  // isEditLevel(task) {\n  //     if (task.name !== this.props.editName || this.props.isEdit === false) {\n  //         // console.log(\"nor \", task.name);\n  //         return <td className=\"text-center\">{this.level(task.level)}</td>;\n  //     } else if (this.props.isEdit === true) {\n  //         // console.log(\"select \", task.name);\n  //         return (\n  //             <td className=\"text-center\">\n  //                 <Form.Control\n  //                     value={this.state.newLevel}\n  //                     as=\"select\"\n  //                     name=\"ds\"\n  //                     id=\"inputDs\"\n  //                     onChange={this.levelChange}\n  //                 >\n  //                     <option value={1}>Low</option>\n  //                     <option value={2}>Medium</option>\n  //                     <option value={3}>High</option>\n  //                 </Form.Control>\n  //             </td>\n  //         );\n  //     }\n  // }\n  // levelChange(e) {\n  //     this.setState({\n  //         newLevel: e.target.value,\n  //     });\n  // }\n  // addTask(newTask) {\n  //     // console.log(newTask);\n  //     if (newTask !== null) {\n  //         const taskListAdded = [...this.state.Task, ...newTask];\n  //         //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\n  //         this.setState({\n  //             Task: taskListAdded,\n  //         });\n  //         this.props.resetNewTask();\n  //         return taskListAdded;\n  //     } else return this.state.Task;\n  // }\n  // level(level) {\n  //     switch (level) {\n  //         case 1:\n  //             return <Badge variant=\"light\">Low</Badge>;\n  //         case 2:\n  //             return <Badge variant=\"info\">Medium</Badge>;\n  //         case 3:\n  //             return <Badge variant=\"danger\">High</Badge>;\n  //         default:\n  //             return <Badge variant=\"primary\">No Level</Badge>;\n  //     }\n  // }\n  // handleSave(oldName, newName, newLevel) {\n  //     // this.setState({ isEdit: false });\n  //     this.update(oldName, newName, parseInt(newLevel));\n  // }\n  // toggleEditOrSave(task) {\n  //     if (this.props.isEdit) {\n  //         return (\n  //             <Button\n  //                 variant=\"warning\"\n  //                 onClick={() => this.handleSave(task.name, task.level)}\n  //             >\n  //                 Save\n  //             </Button>\n  //         );\n  //     } else {\n  //         return (\n  //             <Button\n  //                 variant=\"warning\"\n  //                 onClick={() => this.handleEdit(task.name, task.level)}\n  //             >\n  //                 Edit\n  //             </Button>\n  //         );\n  //     }\n  // }\n  // sort(arr, by, dir) {\n  //     switch (by) {\n  //         case \"Name\":\n  //             switch (dir) {\n  //                 case \"DESC\":\n  //                     return arr.sort((a, b) => {\n  //                         // console.log(\"DESC\", a.name - b.name);\n  //                         if (b.name < a.name) {\n  //                             return -1;\n  //                         }\n  //                         if (b.name > a.name) {\n  //                             return 1;\n  //                         }\n  //                         // name trÃ¹ng nhau\n  //                         return 0;\n  //                         // return b.name - a.name;\n  //                     });\n  //                 default:\n  //                     return arr.sort((a, b) => {\n  //                         // console.log(\"ASC\", a.name - b.name);\n  //                         if (b.name < a.name) {\n  //                             return 1;\n  //                         }\n  //                         if (b.name > a.name) {\n  //                             return -1;\n  //                         }\n  //                         return 0;\n  //                     });\n  //             }\n  //         default:\n  //             switch (dir) {\n  //                 case \"DESC\":\n  //                     return arr.sort((a, b) => {\n  //                         return b.level - a.level;\n  //                     });\n  //                 default:\n  //                     return arr.sort((a, b) => {\n  //                         return a.level - b.level;\n  //                     });\n  //             }\n  //     }\n  // }\n\n\n  render() {\n    console.log(\"table-render\"); // console.log(this.props.Task);\n\n    const taskList = this.props.Task.map((task, index) => {\n      return /*#__PURE__*/React.createElement(TaskRow, {\n        key: index,\n        index: index,\n        task: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 20\n        }\n      });\n    });\n    console.log(\"table-render\");\n    return /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 25\n      }\n    }, \"List Task\"), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"10%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 37\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 37\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 37\n      }\n    }, \"Level\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 37\n      }\n    }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 29\n      }\n    }, taskList)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  Task: state.TaskList // isEdit: state.ToggleEdit,\n  // editName: state.EditTask.name,\n  // newName: state.NewTask.name,\n\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskTable);","map":{"version":3,"sources":["E:/Há»c Táº­p/React-Redux/react-app/src/Component/TaskTable.js"],"names":["React","Component","Card","Col","Table","Badge","Form","Button","Edit","TaskRow","connect","Action","TaskTable","constructor","props","render","console","log","taskList","Task","map","task","index","width","mapStateToProps","state","TaskList","mapDispatchToProps","dispatch","toggleEdit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB;;AAEA,MAAMC,SAAN,SAAwBX,SAAxB,CAAkC;AAC9BY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACH,GA3B6B,CA6B9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADK,CAGL;;AAEA,UAAMC,QAAQ,GAAG,KAAKJ,KAAL,CAAWK,IAAX,CAAgBC,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClD,0BAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,KAAd;AAAqB,QAAA,KAAK,EAAEA,KAA5B;AAAmC,QAAA,IAAI,EAAED,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFgB,CAAjB;AAGAL,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,wBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAwB,MAAA,KAAK,MAA7B;AAA8B,MAAA,OAAO,EAAC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,KAAK,EAAE;AAAEM,QAAAA,KAAK,EAAE;AAAT,OADX;AAEI,MAAA,SAAS,EAAC,aAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AACI,MAAA,KAAK,EAAE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OADX;AAEI,MAAA,SAAS,EAAC,aAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARJ,eAcI;AACI,MAAA,KAAK,EAAE;AAAEA,QAAAA,KAAK,EAAE;AAAT,OADX;AAEI,MAAA,SAAS,EAAC,aAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ,CADJ,CADJ,eAwBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQL,QAAR,CAxBJ,CAFJ,CADJ,CADJ,CADJ;AAmCH;;AAxQ6B;;AA0QlC,MAAMM,eAAe,GAAIC,KAAD,KAAY;AAChCN,EAAAA,IAAI,EAAEM,KAAK,CAACC,QADoB,CAEhC;AACA;AACA;;AAJgC,CAAZ,CAAxB;;AAOA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHC,IAAAA,UAAU,EAAE,MAAM;AACdD,MAAAA,QAAQ,CAACjB,MAAM,CAACkB,UAAP,EAAD,CAAR;AACH;AAHE,GAAP;AAKH;;AAED,eAAenB,OAAO,CAACc,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cf,SAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Edit from \"./Edit\";\r\nimport TaskRow from \"./TaskRow\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n\r\nclass TaskTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // local = localStorage.getItem(\"Tasks\");\r\n        // if (local === \"undefined\") {\r\n        //     console.log(local);\r\n        //     //local = JSON.stringify(TaskList.Task);\r\n        //     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n        // }\r\n\r\n        //localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n        // this.addTask = this.addTask.bind(this);\r\n        // this.delete = this.delete.bind(this);\r\n        // this.update = this.update.bind(this);\r\n        // this.handleEdit = this.handleEdit.bind(this);\r\n        // this.nameChange = this.nameChange.bind(this);\r\n        // this.levelChange = this.levelChange.bind(this);\r\n        // this.handleSave = this.handleSave.bind(this);\r\n        // this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\r\n\r\n        // this.state = {\r\n        //     // Task: JSON.parse(local),\r\n        //     // newTask: this.props.newTask,\r\n        //     isEdit: false,\r\n        // };\r\n\r\n        //console.log(this.state.TaskList.Task);\r\n    }\r\n\r\n    // update(oldName, newName, newLevel) {\r\n    //     // console.log(oldName, newName, newLevel);\r\n    //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n    //     const tmpArr = this.state.Task.map((task) => {\r\n    //         if (task.name === oldName) {\r\n    //             return { name: newName, level: newLevel };\r\n    //         } else return task;\r\n    //     });\r\n    //     this.setState({\r\n    //         Task: tmpArr,\r\n    //     });\r\n    //     //console.log(tmpArr);\r\n    //     // this.state.Task[index].name = newName;\r\n    //     // this.state.Task[index].level = newLevel;\r\n    // }\r\n\r\n    // delete(name) {\r\n    //     // console.log(\"delete\");\r\n    //     const tmpArr = this.props.Task.filter((task) => {\r\n    //         return task.name !== name;\r\n    //     });\r\n    //     this.setState({\r\n    //         Task: tmpArr,\r\n    //     });\r\n    // }\r\n\r\n    // handleEdit(name, level) {\r\n    //     this.setState({\r\n    //         isEdit: true,\r\n    //     });\r\n\r\n    //     // console.log(\"edit\", name, \" \", level);\r\n    //     this.props.setNameAndLevel(name, level);\r\n    // }\r\n\r\n    // nameChange(e) {\r\n    //     this.setState({\r\n    //         newName: e.target.value,\r\n    //         isEdit: true,\r\n    //     });\r\n    // }\r\n\r\n    // isEditName(task) {\r\n    //     if (task.name !== this.props.editName || this.props.isEdit === false) {\r\n    //         // console.log(\"nor \", task.name);\r\n    //         return <td>{task.name}</td>;\r\n    //     } else if (this.props.isEdit === true) {\r\n    //         // console.log(\"text \", task.name);\r\n    //         return (\r\n    //             <Edit newName={this.props.newName}></Edit>\r\n    //             // <td>\r\n    //             //     <Form.Control\r\n    //             //         type=\"text\"\r\n    //             //         value={this.state.newName}\r\n    //             //         onChange={this.nameChange}\r\n    //             //     ></Form.Control>\r\n    //             // </td>\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    // isEditLevel(task) {\r\n    //     if (task.name !== this.props.editName || this.props.isEdit === false) {\r\n    //         // console.log(\"nor \", task.name);\r\n    //         return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n    //     } else if (this.props.isEdit === true) {\r\n    //         // console.log(\"select \", task.name);\r\n    //         return (\r\n    //             <td className=\"text-center\">\r\n    //                 <Form.Control\r\n    //                     value={this.state.newLevel}\r\n    //                     as=\"select\"\r\n    //                     name=\"ds\"\r\n    //                     id=\"inputDs\"\r\n    //                     onChange={this.levelChange}\r\n    //                 >\r\n    //                     <option value={1}>Low</option>\r\n    //                     <option value={2}>Medium</option>\r\n    //                     <option value={3}>High</option>\r\n    //                 </Form.Control>\r\n    //             </td>\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    // levelChange(e) {\r\n    //     this.setState({\r\n    //         newLevel: e.target.value,\r\n    //     });\r\n    // }\r\n\r\n    // addTask(newTask) {\r\n    //     // console.log(newTask);\r\n    //     if (newTask !== null) {\r\n    //         const taskListAdded = [...this.state.Task, ...newTask];\r\n    //         //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\r\n    //         this.setState({\r\n    //             Task: taskListAdded,\r\n    //         });\r\n    //         this.props.resetNewTask();\r\n    //         return taskListAdded;\r\n    //     } else return this.state.Task;\r\n    // }\r\n\r\n    // level(level) {\r\n    //     switch (level) {\r\n    //         case 1:\r\n    //             return <Badge variant=\"light\">Low</Badge>;\r\n    //         case 2:\r\n    //             return <Badge variant=\"info\">Medium</Badge>;\r\n    //         case 3:\r\n    //             return <Badge variant=\"danger\">High</Badge>;\r\n    //         default:\r\n    //             return <Badge variant=\"primary\">No Level</Badge>;\r\n    //     }\r\n    // }\r\n\r\n    // handleSave(oldName, newName, newLevel) {\r\n    //     // this.setState({ isEdit: false });\r\n    //     this.update(oldName, newName, parseInt(newLevel));\r\n    // }\r\n\r\n    // toggleEditOrSave(task) {\r\n    //     if (this.props.isEdit) {\r\n    //         return (\r\n    //             <Button\r\n    //                 variant=\"warning\"\r\n    //                 onClick={() => this.handleSave(task.name, task.level)}\r\n    //             >\r\n    //                 Save\r\n    //             </Button>\r\n    //         );\r\n    //     } else {\r\n    //         return (\r\n    //             <Button\r\n    //                 variant=\"warning\"\r\n    //                 onClick={() => this.handleEdit(task.name, task.level)}\r\n    //             >\r\n    //                 Edit\r\n    //             </Button>\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    // sort(arr, by, dir) {\r\n    //     switch (by) {\r\n    //         case \"Name\":\r\n    //             switch (dir) {\r\n    //                 case \"DESC\":\r\n    //                     return arr.sort((a, b) => {\r\n    //                         // console.log(\"DESC\", a.name - b.name);\r\n    //                         if (b.name < a.name) {\r\n    //                             return -1;\r\n    //                         }\r\n    //                         if (b.name > a.name) {\r\n    //                             return 1;\r\n    //                         }\r\n\r\n    //                         // name trÃ¹ng nhau\r\n    //                         return 0;\r\n    //                         // return b.name - a.name;\r\n    //                     });\r\n\r\n    //                 default:\r\n    //                     return arr.sort((a, b) => {\r\n    //                         // console.log(\"ASC\", a.name - b.name);\r\n    //                         if (b.name < a.name) {\r\n    //                             return 1;\r\n    //                         }\r\n    //                         if (b.name > a.name) {\r\n    //                             return -1;\r\n    //                         }\r\n    //                         return 0;\r\n    //                     });\r\n    //             }\r\n\r\n    //         default:\r\n    //             switch (dir) {\r\n    //                 case \"DESC\":\r\n    //                     return arr.sort((a, b) => {\r\n    //                         return b.level - a.level;\r\n    //                     });\r\n\r\n    //                 default:\r\n    //                     return arr.sort((a, b) => {\r\n    //                         return a.level - b.level;\r\n    //                     });\r\n    //             }\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        console.log(\"table-render\");\r\n\r\n        // console.log(this.props.Task);\r\n\r\n        const taskList = this.props.Task.map((task, index) => {\r\n            return <TaskRow key={index} index={index} task={task}></TaskRow>;\r\n        });\r\n        console.log(\"table-render\");\r\n        return (\r\n            <Col>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Header>List Task</Card.Header>\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th\r\n                                        style={{ width: \"10%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        #\r\n                                    </th>\r\n                                    <th>Task</th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Level\r\n                                    </th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Action\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>{taskList}</tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    Task: state.TaskList,\r\n    // isEdit: state.ToggleEdit,\r\n    // editName: state.EditTask.name,\r\n    // newName: state.NewTask.name,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskTable);\r\n"]},"metadata":{},"sourceType":"module"}
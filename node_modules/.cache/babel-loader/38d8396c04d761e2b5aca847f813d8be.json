{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { Component } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\"; // import Edit from \"./Edit\";\n\nclass TaskRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: this.props.index,\n      // task: this.props.task,\n      editName: this.props.task.name,\n      newName: this.props.task.name,\n      newLevel: 1 // isEdit: false,\n\n    };\n    this.nameChange = this.nameChange.bind(this);\n    this.levelChange = this.levelChange.bind(this);\n  }\n\n  update(oldName, newName, newLevel) {\n    // console.log(oldName, newName, newLevel);\n    // const index = this.state.Task.findIndex((task) => task.name == oldName);\n    const local = localStorage.getItem(\"Tasks\");\n    let taskList = JSON.parse(local);\n    const tmpArr = taskList.map(task => {\n      if (task.name === oldName) {\n        return {\n          name: newName,\n          level: newLevel\n        };\n      } else return task;\n    });\n    localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr)); // this.setState({\n    //     Task: tmpArr,\n    // });\n    //console.log(tmpArr);\n    // this.state.Task[index].name = newName;\n    // this.state.Task[index].level = newLevel;\n  }\n\n  handleSave() {\n    this.props.toggleEdit();\n    console.log(this.state.editName, this.state.newName, this.state.newLevel);\n    this.setState({\n      isEdit: false,\n      task: {\n        name: this.state.newName,\n        level: parseInt(this.state.newLevel)\n      }\n    });\n    this.update(this.state.editName, this.state.newName, parseInt(this.state.newLevel));\n  }\n\n  toggleEditOrSave(task) {\n    if (this.props.toggleEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }, \"Save\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  handleEdit(name, level) {\n    this.props.toggleEdit();\n    this.setState({\n      editName: name,\n      newName: name,\n      newLevel: level // isEdit: true,\n\n    }); // console.log(\"edit\", name, \" \", level);\n    //this.props.setNameAndLevel(name, level);\n  }\n\n  level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  nameChange(e) {\n    this.setState({\n      newName: e.target.value\n    });\n  }\n\n  isEditName(task) {\n    if (task.name !== this.state.editName || this.props.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (this.props.isEdit === true) {\n      // console.log(\"text \", task.name);\n      return (\n        /*#__PURE__*/\n        // <Edit newName={this.state.newName}></Edit>\n        React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          type: \"text\",\n          value: this.state.newName,\n          onChange: this.nameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }\n        }))\n      );\n    }\n  }\n\n  delete(name) {\n    // console.log(\"delete\");\n    const tmpArr = this.state.Task.filter(task => {\n      return task.name !== name;\n    });\n    this.setState({\n      Task: tmpArr\n    });\n  }\n\n  isEditLevel(task) {\n    if (task.name !== this.state.editName || this.props.isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 20\n        }\n      }, this.level(task.level));\n    } else if (this.props.isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.newLevel,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: this.levelChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  }\n\n  levelChange(e) {\n    this.setState({\n      newLevel: e.target.value\n    });\n  }\n\n  render() {\n    console.log(\"row-this.state.isEdit\", this.props.isEdit);\n    return (\n      /*#__PURE__*/\n      // <tr key={index}>\n      React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, this.props.index + 1), this.isEditName(this.props.task), this.isEditLevel(this.props.task), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }\n      }, this.toggleEditOrSave(this.props.task), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => {\n          // return this.delete(this.state.task.name);\n          return this.props.deleteTask(this.props.task.name);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }\n      }, \"Delete\"))))\n    );\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isEdit: state.ToggleEdit\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskName => {\n      dispatch(Action.deleteTask(taskName));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","Component","ButtonGroup","Form","Button","Badge","connect","Action","TaskRow","constructor","props","state","index","editName","task","name","newName","newLevel","nameChange","bind","levelChange","update","oldName","local","localStorage","getItem","taskList","JSON","parse","tmpArr","map","level","setItem","stringify","handleSave","toggleEdit","console","log","setState","isEdit","parseInt","toggleEditOrSave","handleEdit","e","target","value","isEditName","delete","Task","filter","isEditLevel","render","deleteTask","mapStateToProps","ToggleEdit","mapDispatchToProps","dispatch","taskName"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB,C,CACA;;AACA,MAAMC,OAAN,SAAsBP,SAAtB,CAAgC;AAC5BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE,KADT;AAET;AACAC,MAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,IAAX,CAAgBC,IAHjB;AAITC,MAAAA,OAAO,EAAE,KAAKN,KAAL,CAAWI,IAAX,CAAgBC,IAJhB;AAKTE,MAAAA,QAAQ,EAAE,CALD,CAMT;;AANS,KAAb;AAQA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACH;;AAEDE,EAAAA,MAAM,CAACC,OAAD,EAAUN,OAAV,EAAmBC,QAAnB,EAA6B;AAC/B;AACA;AACA,UAAMM,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAX,CAAf;AACA,UAAMM,MAAM,GAAGH,QAAQ,CAACI,GAAT,CAAchB,IAAD,IAAU;AAClC,UAAIA,IAAI,CAACC,IAAL,KAAcO,OAAlB,EAA2B;AACvB,eAAO;AAAEP,UAAAA,IAAI,EAAEC,OAAR;AAAiBe,UAAAA,KAAK,EAAEd;AAAxB,SAAP;AACH,OAFD,MAEO,OAAOH,IAAP;AACV,KAJc,CAAf;AAKAU,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACM,SAAL,CAAeJ,MAAf,CAA9B,EAV+B,CAW/B;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDK,EAAAA,UAAU,GAAG;AACT,SAAKxB,KAAL,CAAWyB,UAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CACI,KAAK1B,KAAL,CAAWE,QADf,EAEI,KAAKF,KAAL,CAAWK,OAFf,EAGI,KAAKL,KAAL,CAAWM,QAHf;AAKA,SAAKqB,QAAL,CAAc;AACVC,MAAAA,MAAM,EAAE,KADE;AAEVzB,MAAAA,IAAI,EAAE;AACFC,QAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWK,OADf;AAEFe,QAAAA,KAAK,EAAES,QAAQ,CAAC,KAAK7B,KAAL,CAAWM,QAAZ;AAFb;AAFI,KAAd;AAOA,SAAKI,MAAL,CACI,KAAKV,KAAL,CAAWE,QADf,EAEI,KAAKF,KAAL,CAAWK,OAFf,EAGIwB,QAAQ,CAAC,KAAK7B,KAAL,CAAWM,QAAZ,CAHZ;AAKH;;AAEDwB,EAAAA,gBAAgB,CAAC3B,IAAD,EAAO;AACnB,QAAI,KAAKJ,KAAL,CAAWyB,UAAf,EAA2B;AACvB,0BACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAC,SADZ;AAEI,QAAA,OAAO,EAAE,MAAM,KAAKD,UAAL,CAAgBpB,IAAI,CAACC,IAArB,EAA2BD,IAAI,CAACiB,KAAhC,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH,KATD,MASO;AACH,0BACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAC,SADZ;AAEI,QAAA,OAAO,EAAE,MAAM,KAAKW,UAAL,CAAgB5B,IAAI,CAACC,IAArB,EAA2BD,IAAI,CAACiB,KAAhC,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH;AACJ;;AAEDW,EAAAA,UAAU,CAAC3B,IAAD,EAAOgB,KAAP,EAAc;AACpB,SAAKrB,KAAL,CAAWyB,UAAX;AACA,SAAKG,QAAL,CAAc;AACVzB,MAAAA,QAAQ,EAAEE,IADA;AAEVC,MAAAA,OAAO,EAAED,IAFC;AAGVE,MAAAA,QAAQ,EAAEc,KAHA,CAIV;;AAJU,KAAd,EAFoB,CASpB;AACA;AACH;;AAEDA,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACT,YAAQA,KAAR;AACI,WAAK,CAAL;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP;;AACJ,WAAK,CAAL;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;;AACJ,WAAK,CAAL;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AACJ;AACI,4BAAO,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AARR;AAUH;;AAEDb,EAAAA,UAAU,CAACyB,CAAD,EAAI;AACV,SAAKL,QAAL,CAAc;AAAEtB,MAAAA,OAAO,EAAE2B,CAAC,CAACC,MAAF,CAASC;AAApB,KAAd;AACH;;AAEDC,EAAAA,UAAU,CAAChC,IAAD,EAAO;AACb,QAAIA,IAAI,CAACC,IAAL,KAAc,KAAKJ,KAAL,CAAWE,QAAzB,IAAqC,KAAKH,KAAL,CAAW6B,MAAX,KAAsB,KAA/D,EAAsE;AAClE;AAEA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKzB,IAAI,CAACC,IAAV,CAAP;AACH,KAJD,MAIO,IAAI,KAAKL,KAAL,CAAW6B,MAAX,KAAsB,IAA1B,EAAgC;AACnC;AACA;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,IAAD,CAAM,OAAN;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWK,OAFtB;AAGI,UAAA,QAAQ,EAAE,KAAKE,UAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAFJ;AAUH;AACJ;;AAED6B,EAAAA,MAAM,CAAChC,IAAD,EAAO;AACT;AACA,UAAMc,MAAM,GAAG,KAAKlB,KAAL,CAAWqC,IAAX,CAAgBC,MAAhB,CAAwBnC,IAAD,IAAU;AAC5C,aAAOA,IAAI,CAACC,IAAL,KAAcA,IAArB;AACH,KAFc,CAAf;AAGA,SAAKuB,QAAL,CAAc;AACVU,MAAAA,IAAI,EAAEnB;AADI,KAAd;AAGH;;AAEDqB,EAAAA,WAAW,CAACpC,IAAD,EAAO;AACd,QAAIA,IAAI,CAACC,IAAL,KAAc,KAAKJ,KAAL,CAAWE,QAAzB,IAAqC,KAAKH,KAAL,CAAW6B,MAAX,KAAsB,KAA/D,EAAsE;AAClE,0BAAO;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,KAAKR,KAAL,CAAWjB,IAAI,CAACiB,KAAhB,CAA7B,CAAP;AACH,KAFD,MAEO,IAAI,KAAKrB,KAAL,CAAW6B,MAAX,KAAsB,IAA1B,EAAgC;AACnC;AACA,0BACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD,CAAM,OAAN;AACI,QAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWM,QADtB;AAEI,QAAA,EAAE,EAAC,QAFP;AAGI,QAAA,IAAI,EAAC,IAHT;AAII,QAAA,EAAE,EAAC,SAJP;AAKI,QAAA,QAAQ,EAAE,KAAKG,WALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAOI;AAAQ,QAAA,KAAK,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPJ,eAQI;AAAQ,QAAA,KAAK,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARJ,eASI;AAAQ,QAAA,KAAK,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,CADJ,CADJ;AAeH;AACJ;;AAEDA,EAAAA,WAAW,CAACuB,CAAD,EAAI;AACX,SAAKL,QAAL,CAAc;AACVrB,MAAAA,QAAQ,EAAE0B,CAAC,CAACC,MAAF,CAASC;AADT,KAAd;AAGH;;AAEDM,EAAAA,MAAM,GAAG;AACLf,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqC,KAAK3B,KAAL,CAAW6B,MAAhD;AACA;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6B,KAAK7B,KAAL,CAAWE,KAAX,GAAmB,CAAhD,CADJ,EAEK,KAAKkC,UAAL,CAAgB,KAAKpC,KAAL,CAAWI,IAA3B,CAFL,EAGK,KAAKoC,WAAL,CAAiB,KAAKxC,KAAL,CAAWI,IAA5B,CAHL,eAMI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK2B,gBAAL,CAAsB,KAAK/B,KAAL,CAAWI,IAAjC,CADL,eAUI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAC,QADZ;AAEI,QAAA,OAAO,EAAE,MAAM;AACX;AACA,iBAAO,KAAKJ,KAAL,CAAW0C,UAAX,CACH,KAAK1C,KAAL,CAAWI,IAAX,CAAgBC,IADb,CAAP;AAGH,SAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,CADJ,CANJ;AAFJ;AAkCH;;AA1M2B;;AA6MhC,MAAMsC,eAAe,GAAI1C,KAAD,KAAY;AAChC4B,EAAAA,MAAM,EAAE5B,KAAK,CAAC2C;AADkB,CAAZ,CAAxB;;AAIA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHJ,IAAAA,UAAU,EAAGK,QAAD,IAAc;AACtBD,MAAAA,QAAQ,CAACjD,MAAM,CAAC6C,UAAP,CAAkBK,QAAlB,CAAD,CAAR;AACH,KAHE;AAIHtB,IAAAA,UAAU,EAAE,MAAM;AACdqB,MAAAA,QAAQ,CAACjD,MAAM,CAAC4B,UAAP,EAAD,CAAR;AACH;AANE,GAAP;AAQH;;AAED,eAAe7B,OAAO,CAAC+C,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C/C,OAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n// import Edit from \"./Edit\";\r\nclass TaskRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            index: this.props.index,\r\n            // task: this.props.task,\r\n            editName: this.props.task.name,\r\n            newName: this.props.task.name,\r\n            newLevel: 1,\r\n            // isEdit: false,\r\n        };\r\n        this.nameChange = this.nameChange.bind(this);\r\n        this.levelChange = this.levelChange.bind(this);\r\n    }\r\n\r\n    update(oldName, newName, newLevel) {\r\n        // console.log(oldName, newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        const local = localStorage.getItem(\"Tasks\");\r\n        let taskList = JSON.parse(local);\r\n        const tmpArr = taskList.map((task) => {\r\n            if (task.name === oldName) {\r\n                return { name: newName, level: newLevel };\r\n            } else return task;\r\n        });\r\n        localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\r\n        // this.setState({\r\n        //     Task: tmpArr,\r\n        // });\r\n        //console.log(tmpArr);\r\n        // this.state.Task[index].name = newName;\r\n        // this.state.Task[index].level = newLevel;\r\n    }\r\n\r\n    handleSave() {\r\n        this.props.toggleEdit();\r\n        console.log(\r\n            this.state.editName,\r\n            this.state.newName,\r\n            this.state.newLevel\r\n        );\r\n        this.setState({\r\n            isEdit: false,\r\n            task: {\r\n                name: this.state.newName,\r\n                level: parseInt(this.state.newLevel),\r\n            },\r\n        });\r\n        this.update(\r\n            this.state.editName,\r\n            this.state.newName,\r\n            parseInt(this.state.newLevel)\r\n        );\r\n    }\r\n\r\n    toggleEditOrSave(task) {\r\n        if (this.props.toggleEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleSave(task.name, task.level)}\r\n                >\r\n                    Save\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleEdit(name, level) {\r\n        this.props.toggleEdit();\r\n        this.setState({\r\n            editName: name,\r\n            newName: name,\r\n            newLevel: level,\r\n            // isEdit: true,\r\n        });\r\n\r\n        // console.log(\"edit\", name, \" \", level);\r\n        //this.props.setNameAndLevel(name, level);\r\n    }\r\n\r\n    level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    nameChange(e) {\r\n        this.setState({ newName: e.target.value });\r\n    }\r\n\r\n    isEditName(task) {\r\n        if (task.name !== this.state.editName || this.props.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n\r\n            return <td>{task.name}</td>;\r\n        } else if (this.props.isEdit === true) {\r\n            // console.log(\"text \", task.name);\r\n            return (\r\n                // <Edit newName={this.state.newName}></Edit>\r\n                <td>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={this.state.newName}\r\n                        onChange={this.nameChange}\r\n                    ></Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    delete(name) {\r\n        // console.log(\"delete\");\r\n        const tmpArr = this.state.Task.filter((task) => {\r\n            return task.name !== name;\r\n        });\r\n        this.setState({\r\n            Task: tmpArr,\r\n        });\r\n    }\r\n\r\n    isEditLevel(task) {\r\n        if (task.name !== this.state.editName || this.props.isEdit === false) {\r\n            return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n        } else if (this.props.isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={this.state.newLevel}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={this.levelChange}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    levelChange(e) {\r\n        this.setState({\r\n            newLevel: e.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log(\"row-this.state.isEdit\", this.props.isEdit);\r\n        return (\r\n            // <tr key={index}>\r\n            <tr>\r\n                <td className=\"text-center\">{this.props.index + 1}</td>\r\n                {this.isEditName(this.props.task)}\r\n                {this.isEditLevel(this.props.task)}\r\n                {/* <td>{task.name}</td> */}\r\n                {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n                <td className=\"text-center\">\r\n                    <ButtonGroup>\r\n                        {this.toggleEditOrSave(this.props.task)}\r\n                        {/* <Button\r\n                    variant=\"warning\"\r\n                    onClick={() =>\r\n                        this.handleEdit(task.name, task.level)\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button> */}\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            onClick={() => {\r\n                                // return this.delete(this.state.task.name);\r\n                                return this.props.deleteTask(\r\n                                    this.props.task.name\r\n                                );\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isEdit: state.ToggleEdit,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskName) => {\r\n            dispatch(Action.deleteTask(taskName));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
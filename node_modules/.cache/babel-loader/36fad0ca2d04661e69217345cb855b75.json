{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskTable.js\";\nimport React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Edit from \"./Edit\";\nimport TaskRow from \"./TaskRow\";\nimport { connect } from \"react-redux\";\n\nclass TaskTable extends Component {\n  constructor(props) {\n    super(props); // local = localStorage.getItem(\"Tasks\");\n    // if (local === \"undefined\") {\n    //     console.log(local);\n    //     //local = JSON.stringify(TaskList.Task);\n    //     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n    // }\n    //localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n\n    this.addTask = this.addTask.bind(this); // this.delete = this.delete.bind(this);\n\n    this.update = this.update.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.nameChange = this.nameChange.bind(this);\n    this.levelChange = this.levelChange.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\n    this.state = {\n      // Task: JSON.parse(local),\n      // newTask: this.props.newTask,\n      isEdit: false,\n      editName: \"\",\n      newName: \"\",\n      newLevel: 1\n    }; //console.log(this.state.TaskList.Task);\n  } // UNSAFE_componentWillReceiveProps(nextProps) {\n  //     if (nextProps.newTask !== null) {\n  //         // this.addTask(nextProps.newTask);\n  //         this.addTask(nextProps.newTask);\n  //     }\n  //     if (nextProps.updateTask !== null) {\n  //         this.update(\n  //             nextProps.updateTask.oldName,\n  //             nextProps.updateTask.name,\n  //             nextProps.updateTask.level\n  //         );\n  //     }\n  // }\n  // componentDidUpdate() {\n  //     // console.log(\"local save : \", JSON.stringify(this.state.Task));\n  //     localStorage.setItem(\"Tasks\", JSON.stringify(this.state.Task));\n  // }\n\n\n  update(oldName, newName, newLevel) {\n    // console.log(oldName, newName, newLevel);\n    // const index = this.state.Task.findIndex((task) => task.name == oldName);\n    const tmpArr = this.state.Task.map(task => {\n      if (task.name === oldName) {\n        return {\n          name: newName,\n          level: newLevel\n        };\n      } else return task;\n    });\n    this.setState({\n      Task: tmpArr\n    }); //console.log(tmpArr);\n    // this.state.Task[index].name = newName;\n    // this.state.Task[index].level = newLevel;\n  } // delete(name) {\n  //     // console.log(\"delete\");\n  //     const tmpArr = this.props.Task.filter((task) => {\n  //         return task.name !== name;\n  //     });\n  //     this.setState({\n  //         Task: tmpArr,\n  //     });\n  // }\n\n\n  handleEdit(name, level) {\n    this.setState({\n      editName: name,\n      newName: name,\n      newLevel: level,\n      isEdit: true\n    }); // console.log(\"edit\", name, \" \", level);\n\n    this.props.setNameAndLevel(name, level);\n  }\n\n  nameChange(e) {\n    this.setState({\n      newName: e.target.value,\n      isEdit: true\n    });\n  }\n\n  isEditName(task) {\n    if (task.name !== this.state.editName || this.state.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (this.state.isEdit === true) {\n      // console.log(\"text \", task.name);\n      return /*#__PURE__*/React.createElement(Edit, {\n        newName: this.state.newName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }) // <td>\n      //     <Form.Control\n      //         type=\"text\"\n      //         value={this.state.newName}\n      //         onChange={this.nameChange}\n      //     ></Form.Control>\n      // </td>\n      ;\n    }\n  }\n\n  isEditLevel(task) {\n    if (task.name !== this.state.editName || this.state.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 20\n        }\n      }, this.level(task.level));\n    } else if (this.state.isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.newLevel,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: this.levelChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  }\n\n  levelChange(e) {\n    this.setState({\n      newLevel: e.target.value\n    });\n  }\n\n  addTask(newTask) {\n    // console.log(newTask);\n    if (newTask !== null) {\n      const taskListAdded = [...this.state.Task, ...newTask]; //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\n\n      this.setState({\n        Task: taskListAdded\n      });\n      this.props.resetNewTask();\n      return taskListAdded;\n    } else return this.state.Task;\n  }\n\n  level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  handleSave(oldName, newName, newLevel) {\n    this.setState({\n      isEdit: false\n    });\n    this.update(oldName, newName, parseInt(newLevel));\n  }\n\n  toggleEditOrSave(task) {\n    if (this.state.isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }, \"Save\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  sort(arr, by, dir) {\n    switch (by) {\n      case \"Name\":\n        switch (dir) {\n          case \"DESC\":\n            return arr.sort((a, b) => {\n              // console.log(\"DESC\", a.name - b.name);\n              if (b.name < a.name) {\n                return -1;\n              }\n\n              if (b.name > a.name) {\n                return 1;\n              } // name trÃ¹ng nhau\n\n\n              return 0; // return b.name - a.name;\n            });\n\n          default:\n            return arr.sort((a, b) => {\n              // console.log(\"ASC\", a.name - b.name);\n              if (b.name < a.name) {\n                return 1;\n              }\n\n              if (b.name > a.name) {\n                return -1;\n              }\n\n              return 0;\n            });\n        }\n\n      default:\n        switch (dir) {\n          case \"DESC\":\n            return arr.sort((a, b) => {\n              return b.level - a.level;\n            });\n\n          default:\n            return arr.sort((a, b) => {\n              return a.level - b.level;\n            });\n        }\n\n    }\n  }\n\n  render() {\n    // console.log(this.props.Task);\n    const taskListSearched = this.props.Task.filter(task => {\n      return task.name.toLowerCase().includes(this.props.search.toLowerCase());\n    });\n    const taskListSorted = this.sort(taskListSearched, this.props.by, this.props.dir);\n    console.log(taskListSorted);\n    const taskList = this.props.Task.map((task, index) => {\n      return /*#__PURE__*/React.createElement(TaskRow, {\n        key: index,\n        index: index,\n        task: task,\n        saveClick: this.handleSave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 17\n        }\n      });\n    });\n    console.log(\"table-render\");\n    return /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 25\n      }\n    }, \"List Task\"), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"10%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 37\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 37\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 37\n      }\n    }, \"Level\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 37\n      }\n    }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 29\n      }\n    }, taskList)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  Task: state.TaskList\n});\n\nexport default connect(mapStateToProps, null)(TaskTable);","map":{"version":3,"sources":["E:/Há»c Táº­p/React-Redux/react-app/src/Component/TaskTable.js"],"names":["React","Component","Card","Col","Table","Badge","Form","Button","Edit","TaskRow","connect","TaskTable","constructor","props","addTask","bind","update","handleEdit","nameChange","levelChange","handleSave","toggleEditOrSave","state","isEdit","editName","newName","newLevel","oldName","tmpArr","Task","map","task","name","level","setState","setNameAndLevel","e","target","value","isEditName","isEditLevel","newTask","taskListAdded","resetNewTask","parseInt","sort","arr","by","dir","a","b","render","taskListSearched","filter","toLowerCase","includes","search","taskListSorted","console","log","taskList","index","width","mapStateToProps","TaskList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Edit from \"./Edit\";\r\nimport TaskRow from \"./TaskRow\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass TaskTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // local = localStorage.getItem(\"Tasks\");\r\n        // if (local === \"undefined\") {\r\n        //     console.log(local);\r\n        //     //local = JSON.stringify(TaskList.Task);\r\n        //     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n        // }\r\n\r\n        //localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n        this.addTask = this.addTask.bind(this);\r\n        // this.delete = this.delete.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.nameChange = this.nameChange.bind(this);\r\n        this.levelChange = this.levelChange.bind(this);\r\n        this.handleSave = this.handleSave.bind(this);\r\n        this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\r\n\r\n        this.state = {\r\n            // Task: JSON.parse(local),\r\n            // newTask: this.props.newTask,\r\n            isEdit: false,\r\n            editName: \"\",\r\n            newName: \"\",\r\n            newLevel: 1,\r\n        };\r\n\r\n        //console.log(this.state.TaskList.Task);\r\n    }\r\n    // UNSAFE_componentWillReceiveProps(nextProps) {\r\n    //     if (nextProps.newTask !== null) {\r\n    //         // this.addTask(nextProps.newTask);\r\n    //         this.addTask(nextProps.newTask);\r\n    //     }\r\n    //     if (nextProps.updateTask !== null) {\r\n    //         this.update(\r\n    //             nextProps.updateTask.oldName,\r\n    //             nextProps.updateTask.name,\r\n    //             nextProps.updateTask.level\r\n    //         );\r\n    //     }\r\n    // }\r\n    // componentDidUpdate() {\r\n    //     // console.log(\"local save : \", JSON.stringify(this.state.Task));\r\n    //     localStorage.setItem(\"Tasks\", JSON.stringify(this.state.Task));\r\n    // }\r\n\r\n    update(oldName, newName, newLevel) {\r\n        // console.log(oldName, newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        const tmpArr = this.state.Task.map((task) => {\r\n            if (task.name === oldName) {\r\n                return { name: newName, level: newLevel };\r\n            } else return task;\r\n        });\r\n        this.setState({\r\n            Task: tmpArr,\r\n        });\r\n        //console.log(tmpArr);\r\n        // this.state.Task[index].name = newName;\r\n        // this.state.Task[index].level = newLevel;\r\n    }\r\n\r\n    // delete(name) {\r\n    //     // console.log(\"delete\");\r\n    //     const tmpArr = this.props.Task.filter((task) => {\r\n    //         return task.name !== name;\r\n    //     });\r\n    //     this.setState({\r\n    //         Task: tmpArr,\r\n    //     });\r\n    // }\r\n\r\n    handleEdit(name, level) {\r\n        this.setState({\r\n            editName: name,\r\n            newName: name,\r\n            newLevel: level,\r\n            isEdit: true,\r\n        });\r\n\r\n        // console.log(\"edit\", name, \" \", level);\r\n        this.props.setNameAndLevel(name, level);\r\n    }\r\n\r\n    nameChange(e) {\r\n        this.setState({\r\n            newName: e.target.value,\r\n            isEdit: true,\r\n        });\r\n    }\r\n\r\n    isEditName(task) {\r\n        if (task.name !== this.state.editName || this.state.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n            return <td>{task.name}</td>;\r\n        } else if (this.state.isEdit === true) {\r\n            // console.log(\"text \", task.name);\r\n            return (\r\n                <Edit newName={this.state.newName}></Edit>\r\n                // <td>\r\n                //     <Form.Control\r\n                //         type=\"text\"\r\n                //         value={this.state.newName}\r\n                //         onChange={this.nameChange}\r\n                //     ></Form.Control>\r\n                // </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    isEditLevel(task) {\r\n        if (task.name !== this.state.editName || this.state.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n            return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n        } else if (this.state.isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={this.state.newLevel}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={this.levelChange}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    levelChange(e) {\r\n        this.setState({\r\n            newLevel: e.target.value,\r\n        });\r\n    }\r\n\r\n    addTask(newTask) {\r\n        // console.log(newTask);\r\n        if (newTask !== null) {\r\n            const taskListAdded = [...this.state.Task, ...newTask];\r\n            //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\r\n            this.setState({\r\n                Task: taskListAdded,\r\n            });\r\n            this.props.resetNewTask();\r\n            return taskListAdded;\r\n        } else return this.state.Task;\r\n    }\r\n\r\n    level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    handleSave(oldName, newName, newLevel) {\r\n        this.setState({ isEdit: false });\r\n        this.update(oldName, newName, parseInt(newLevel));\r\n    }\r\n\r\n    toggleEditOrSave(task) {\r\n        if (this.state.isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleSave(task.name, task.level)}\r\n                >\r\n                    Save\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    sort(arr, by, dir) {\r\n        switch (by) {\r\n            case \"Name\":\r\n                switch (dir) {\r\n                    case \"DESC\":\r\n                        return arr.sort((a, b) => {\r\n                            // console.log(\"DESC\", a.name - b.name);\r\n                            if (b.name < a.name) {\r\n                                return -1;\r\n                            }\r\n                            if (b.name > a.name) {\r\n                                return 1;\r\n                            }\r\n\r\n                            // name trÃ¹ng nhau\r\n                            return 0;\r\n                            // return b.name - a.name;\r\n                        });\r\n\r\n                    default:\r\n                        return arr.sort((a, b) => {\r\n                            // console.log(\"ASC\", a.name - b.name);\r\n                            if (b.name < a.name) {\r\n                                return 1;\r\n                            }\r\n                            if (b.name > a.name) {\r\n                                return -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                }\r\n\r\n            default:\r\n                switch (dir) {\r\n                    case \"DESC\":\r\n                        return arr.sort((a, b) => {\r\n                            return b.level - a.level;\r\n                        });\r\n\r\n                    default:\r\n                        return arr.sort((a, b) => {\r\n                            return a.level - b.level;\r\n                        });\r\n                }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.Task);\r\n\r\n        const taskListSearched = this.props.Task.filter((task) => {\r\n            return task.name\r\n                .toLowerCase()\r\n                .includes(this.props.search.toLowerCase());\r\n        });\r\n\r\n        const taskListSorted = this.sort(\r\n            taskListSearched,\r\n            this.props.by,\r\n            this.props.dir\r\n        );\r\n        console.log(taskListSorted);\r\n        const taskList = this.props.Task.map((task, index) => {\r\n            return (\r\n                <TaskRow\r\n                    key={index}\r\n                    index={index}\r\n                    task={task}\r\n                    saveClick={this.handleSave}\r\n                ></TaskRow>\r\n            );\r\n        });\r\n        console.log(\"table-render\");\r\n        return (\r\n            <Col>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Header>List Task</Card.Header>\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th\r\n                                        style={{ width: \"10%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        #\r\n                                    </th>\r\n                                    <th>Task</th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Level\r\n                                    </th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Action\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>{taskList}</tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    Task: state.TaskList,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TaskTable);\r\n"]},"metadata":{},"sourceType":"module"}
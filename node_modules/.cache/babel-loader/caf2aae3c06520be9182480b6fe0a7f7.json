{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskTable.js\";\nimport React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Edit from \"./Edit\";\nimport TaskRow from \"./TaskRow\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\";\n\nclass TaskTable extends Component {\n  constructor(props) {\n    super(props); // local = localStorage.getItem(\"Tasks\");\n    // if (local === \"undefined\") {\n    //     console.log(local);\n    //     //local = JSON.stringify(TaskList.Task);\n    //     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n    // }\n    //localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n\n    this.addTask = this.addTask.bind(this); // this.delete = this.delete.bind(this);\n\n    this.update = this.update.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.nameChange = this.nameChange.bind(this);\n    this.levelChange = this.levelChange.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\n    this.state = {\n      // Task: JSON.parse(local),\n      // newTask: this.props.newTask,\n      isEdit: false\n    }; //console.log(this.state.TaskList.Task);\n  } // update(oldName, newName, newLevel) {\n  //     // console.log(oldName, newName, newLevel);\n  //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\n  //     const tmpArr = this.state.Task.map((task) => {\n  //         if (task.name === oldName) {\n  //             return { name: newName, level: newLevel };\n  //         } else return task;\n  //     });\n  //     this.setState({\n  //         Task: tmpArr,\n  //     });\n  //     //console.log(tmpArr);\n  //     // this.state.Task[index].name = newName;\n  //     // this.state.Task[index].level = newLevel;\n  // }\n  // delete(name) {\n  //     // console.log(\"delete\");\n  //     const tmpArr = this.props.Task.filter((task) => {\n  //         return task.name !== name;\n  //     });\n  //     this.setState({\n  //         Task: tmpArr,\n  //     });\n  // }\n  // handleEdit(name, level) {\n  //     this.setState({\n  //         isEdit: true,\n  //     });\n  //     // console.log(\"edit\", name, \" \", level);\n  //     this.props.setNameAndLevel(name, level);\n  // }\n  // nameChange(e) {\n  //     this.setState({\n  //         newName: e.target.value,\n  //         isEdit: true,\n  //     });\n  // }\n\n\n  isEditName(task) {\n    if (task.name !== this.props.editName || this.props.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (this.props.isEdit === true) {\n      // console.log(\"text \", task.name);\n      return /*#__PURE__*/React.createElement(Edit, {\n        newName: this.props.newName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }) // <td>\n      //     <Form.Control\n      //         type=\"text\"\n      //         value={this.state.newName}\n      //         onChange={this.nameChange}\n      //     ></Form.Control>\n      // </td>\n      ;\n    }\n  }\n\n  isEditLevel(task) {\n    if (task.name !== this.props.editName || this.props.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 20\n        }\n      }, this.level(task.level));\n    } else if (this.props.isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.newLevel,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: this.levelChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  } // levelChange(e) {\n  //     this.setState({\n  //         newLevel: e.target.value,\n  //     });\n  // }\n  // addTask(newTask) {\n  //     // console.log(newTask);\n  //     if (newTask !== null) {\n  //         const taskListAdded = [...this.state.Task, ...newTask];\n  //         //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\n  //         this.setState({\n  //             Task: taskListAdded,\n  //         });\n  //         this.props.resetNewTask();\n  //         return taskListAdded;\n  //     } else return this.state.Task;\n  // }\n\n\n  level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  } // handleSave(oldName, newName, newLevel) {\n  //     // this.setState({ isEdit: false });\n  //     this.update(oldName, newName, parseInt(newLevel));\n  // }\n  // toggleEditOrSave(task) {\n  //     if (this.props.isEdit) {\n  //         return (\n  //             <Button\n  //                 variant=\"warning\"\n  //                 onClick={() => this.handleSave(task.name, task.level)}\n  //             >\n  //                 Save\n  //             </Button>\n  //         );\n  //     } else {\n  //         return (\n  //             <Button\n  //                 variant=\"warning\"\n  //                 onClick={() => this.handleEdit(task.name, task.level)}\n  //             >\n  //                 Edit\n  //             </Button>\n  //         );\n  //     }\n  // }\n\n\n  sort(arr, by, dir) {\n    switch (by) {\n      case \"Name\":\n        switch (dir) {\n          case \"DESC\":\n            return arr.sort((a, b) => {\n              // console.log(\"DESC\", a.name - b.name);\n              if (b.name < a.name) {\n                return -1;\n              }\n\n              if (b.name > a.name) {\n                return 1;\n              } // name trÃ¹ng nhau\n\n\n              return 0; // return b.name - a.name;\n            });\n\n          default:\n            return arr.sort((a, b) => {\n              // console.log(\"ASC\", a.name - b.name);\n              if (b.name < a.name) {\n                return 1;\n              }\n\n              if (b.name > a.name) {\n                return -1;\n              }\n\n              return 0;\n            });\n        }\n\n      default:\n        switch (dir) {\n          case \"DESC\":\n            return arr.sort((a, b) => {\n              return b.level - a.level;\n            });\n\n          default:\n            return arr.sort((a, b) => {\n              return a.level - b.level;\n            });\n        }\n\n    }\n  }\n\n  render() {\n    console.log(this.props.Task);\n    const taskList = this.props.Task.map((task, index) => {\n      return /*#__PURE__*/React.createElement(TaskRow, {\n        key: index,\n        index: index,\n        task: task,\n        saveClick: this.handleSave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }\n      });\n    });\n    console.log(\"table-render\");\n    return /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, \"List Task\"), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"10%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 37\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 37\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 37\n      }\n    }, \"Level\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 37\n      }\n    }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 29\n      }\n    }, taskList)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  Task: state.TaskList,\n  isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  newName: state.NewTask.name\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, null)(TaskTable);","map":{"version":3,"sources":["E:/Há»c Táº­p/React-Redux/react-app/src/Component/TaskTable.js"],"names":["React","Component","Card","Col","Table","Badge","Form","Button","Edit","TaskRow","connect","Action","TaskTable","constructor","props","addTask","bind","update","handleEdit","nameChange","levelChange","handleSave","toggleEditOrSave","state","isEdit","isEditName","task","name","editName","newName","isEditLevel","level","newLevel","sort","arr","by","dir","a","b","render","console","log","Task","taskList","map","index","width","mapStateToProps","TaskList","ToggleEdit","EditTask","NewTask","mapDispatchToProps","dispatch","toggleEdit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Edit from \"./Edit\";\r\nimport TaskRow from \"./TaskRow\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n\r\nclass TaskTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // local = localStorage.getItem(\"Tasks\");\r\n        // if (local === \"undefined\") {\r\n        //     console.log(local);\r\n        //     //local = JSON.stringify(TaskList.Task);\r\n        //     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n        // }\r\n\r\n        //localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n        this.addTask = this.addTask.bind(this);\r\n        // this.delete = this.delete.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.nameChange = this.nameChange.bind(this);\r\n        this.levelChange = this.levelChange.bind(this);\r\n        this.handleSave = this.handleSave.bind(this);\r\n        this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\r\n\r\n        this.state = {\r\n            // Task: JSON.parse(local),\r\n            // newTask: this.props.newTask,\r\n            isEdit: false,\r\n        };\r\n\r\n        //console.log(this.state.TaskList.Task);\r\n    }\r\n\r\n    // update(oldName, newName, newLevel) {\r\n    //     // console.log(oldName, newName, newLevel);\r\n    //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n    //     const tmpArr = this.state.Task.map((task) => {\r\n    //         if (task.name === oldName) {\r\n    //             return { name: newName, level: newLevel };\r\n    //         } else return task;\r\n    //     });\r\n    //     this.setState({\r\n    //         Task: tmpArr,\r\n    //     });\r\n    //     //console.log(tmpArr);\r\n    //     // this.state.Task[index].name = newName;\r\n    //     // this.state.Task[index].level = newLevel;\r\n    // }\r\n\r\n    // delete(name) {\r\n    //     // console.log(\"delete\");\r\n    //     const tmpArr = this.props.Task.filter((task) => {\r\n    //         return task.name !== name;\r\n    //     });\r\n    //     this.setState({\r\n    //         Task: tmpArr,\r\n    //     });\r\n    // }\r\n\r\n    // handleEdit(name, level) {\r\n    //     this.setState({\r\n    //         isEdit: true,\r\n    //     });\r\n\r\n    //     // console.log(\"edit\", name, \" \", level);\r\n    //     this.props.setNameAndLevel(name, level);\r\n    // }\r\n\r\n    // nameChange(e) {\r\n    //     this.setState({\r\n    //         newName: e.target.value,\r\n    //         isEdit: true,\r\n    //     });\r\n    // }\r\n\r\n    isEditName(task) {\r\n        if (task.name !== this.props.editName || this.props.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n            return <td>{task.name}</td>;\r\n        } else if (this.props.isEdit === true) {\r\n            // console.log(\"text \", task.name);\r\n            return (\r\n                <Edit newName={this.props.newName}></Edit>\r\n                // <td>\r\n                //     <Form.Control\r\n                //         type=\"text\"\r\n                //         value={this.state.newName}\r\n                //         onChange={this.nameChange}\r\n                //     ></Form.Control>\r\n                // </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    isEditLevel(task) {\r\n        if (task.name !== this.props.editName || this.props.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n            return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n        } else if (this.props.isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={this.state.newLevel}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={this.levelChange}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    // levelChange(e) {\r\n    //     this.setState({\r\n    //         newLevel: e.target.value,\r\n    //     });\r\n    // }\r\n\r\n    // addTask(newTask) {\r\n    //     // console.log(newTask);\r\n    //     if (newTask !== null) {\r\n    //         const taskListAdded = [...this.state.Task, ...newTask];\r\n    //         //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\r\n    //         this.setState({\r\n    //             Task: taskListAdded,\r\n    //         });\r\n    //         this.props.resetNewTask();\r\n    //         return taskListAdded;\r\n    //     } else return this.state.Task;\r\n    // }\r\n\r\n    level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    // handleSave(oldName, newName, newLevel) {\r\n    //     // this.setState({ isEdit: false });\r\n    //     this.update(oldName, newName, parseInt(newLevel));\r\n    // }\r\n\r\n    // toggleEditOrSave(task) {\r\n    //     if (this.props.isEdit) {\r\n    //         return (\r\n    //             <Button\r\n    //                 variant=\"warning\"\r\n    //                 onClick={() => this.handleSave(task.name, task.level)}\r\n    //             >\r\n    //                 Save\r\n    //             </Button>\r\n    //         );\r\n    //     } else {\r\n    //         return (\r\n    //             <Button\r\n    //                 variant=\"warning\"\r\n    //                 onClick={() => this.handleEdit(task.name, task.level)}\r\n    //             >\r\n    //                 Edit\r\n    //             </Button>\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    sort(arr, by, dir) {\r\n        switch (by) {\r\n            case \"Name\":\r\n                switch (dir) {\r\n                    case \"DESC\":\r\n                        return arr.sort((a, b) => {\r\n                            // console.log(\"DESC\", a.name - b.name);\r\n                            if (b.name < a.name) {\r\n                                return -1;\r\n                            }\r\n                            if (b.name > a.name) {\r\n                                return 1;\r\n                            }\r\n\r\n                            // name trÃ¹ng nhau\r\n                            return 0;\r\n                            // return b.name - a.name;\r\n                        });\r\n\r\n                    default:\r\n                        return arr.sort((a, b) => {\r\n                            // console.log(\"ASC\", a.name - b.name);\r\n                            if (b.name < a.name) {\r\n                                return 1;\r\n                            }\r\n                            if (b.name > a.name) {\r\n                                return -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                }\r\n\r\n            default:\r\n                switch (dir) {\r\n                    case \"DESC\":\r\n                        return arr.sort((a, b) => {\r\n                            return b.level - a.level;\r\n                        });\r\n\r\n                    default:\r\n                        return arr.sort((a, b) => {\r\n                            return a.level - b.level;\r\n                        });\r\n                }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.Task);\r\n\r\n        const taskList = this.props.Task.map((task, index) => {\r\n            return (\r\n                <TaskRow\r\n                    key={index}\r\n                    index={index}\r\n                    task={task}\r\n                    saveClick={this.handleSave}\r\n                ></TaskRow>\r\n            );\r\n        });\r\n        console.log(\"table-render\");\r\n        return (\r\n            <Col>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Header>List Task</Card.Header>\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th\r\n                                        style={{ width: \"10%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        #\r\n                                    </th>\r\n                                    <th>Task</th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Level\r\n                                    </th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Action\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>{taskList}</tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    Task: state.TaskList,\r\n    isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    newName: state.NewTask.name,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(TaskTable);\r\n"]},"metadata":{},"sourceType":"module"}
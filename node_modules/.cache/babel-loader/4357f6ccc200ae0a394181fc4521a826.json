{"ast":null,"code":"import * as TYPE from \"../Const/Types\"; // import TaskList from \"../Tasks/Task.json\";\n\nimport * as URL from \"../Const/URL\"; // import Cookies from \"js-cookie\";\n// import { wait } from \"@testing-library/react\";\n// import $ from \"jquery\";\n// var local;\n// local = localStorage.getItem(\"Tasks\");\n// if (local === \"undefined\") {\n//     console.log(\"resetdata\");\n//     //local = JSON.stringify(TaskList.Task);\n//     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n// }\n// local = localStorage.getItem(\"Tasks\");\n\nfunction getTask() {\n  fetch(URL.URL_API).then(response => {\n    // console.log(response);\n    return response.json();\n  }).catch(e => {\n    console.log(\"Err\", e);\n  }).then(data => {\n    // console.log(data);\n    // console.log(data);\n    localStorage.setItem(\"Tasks\", JSON.stringify(data)); // Cookies.set(\"Task\", data);\n    // console.log(localStorage.getItem(\"Tasks\"));\n  });\n}\n\ngetTask();\nconst initialState = localStorage.getItem(\"Tasks\") !== \"undefined\" ? JSON.parse(localStorage.getItem(\"Tasks\")) : [{}]; // console.log(initialState);\n\nfunction addTask(task) {\n  // const item = task;\n  fetch(URL.URL_API, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name: task.name,\n      level: task.level\n    })\n  }).catch(error => console.error(\"Unable to add item.\", error)).then(() => {\n    getTask();\n  });\n}\n\nfunction deleteTask(taskId) {\n  fetch(URL.URL_API + \"/\" + taskId, {\n    method: \"DELETE\"\n  }).catch(error => console.error(\"Unable to delete item.\", error)).then(() => {\n    getTask();\n  });\n} // function updateTask(task) {\n//     fetch(URL.URL_API + \"/\" + task.id, {\n//         method: \"PUT\",\n//         headers: {\n//             Accept: \"application/json\",\n//             \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(task),\n//     })\n//         .then(() => {\n//             getTask();\n//             console.log(JSON.parse(localStorage.getItem(\"Tasks\")));\n//         })\n//         .catch((error) => console.error(\"Unable to update item.\", error));\n// }\n\n\nfunction sort(arr, by, dir) {\n  switch (by) {\n    case \"Name\":\n      switch (dir) {\n        case \"DESC\":\n          return arr.sort((a, b) => {\n            // console.log(\"DESC\", a.name - b.name);\n            if (b.name < a.name) {\n              return -1;\n            }\n\n            if (b.name > a.name) {\n              return 1;\n            } // name trùng nhau\n\n\n            return 0; // return b.name - a.name;\n          });\n\n        default:\n          return arr.sort((a, b) => {\n            // console.log(\"ASC\", a.name - b.name);\n            if (b.name < a.name) {\n              return 1;\n            }\n\n            if (b.name > a.name) {\n              return -1;\n            }\n\n            return 0;\n          });\n      }\n\n    default:\n      switch (dir) {\n        case \"DESC\":\n          return arr.sort((a, b) => {\n            return b.level - a.level;\n          });\n\n        default:\n          return arr.sort((a, b) => {\n            return a.level - b.level;\n          });\n      }\n\n  }\n}\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case TYPE.LIST:\n      // console.log(\"reducer\", action);\n      return state;\n\n    case TYPE.ADD_TASK:\n      // console.log(\"reducer\", action);\n      addTask(action.task); // addTask(action.task);\n\n      state.push(action.task); // fetch(URL.URL_API, {\n      //     method: \"POST\",\n      //     headers: {\n      //         Accept: \"application/json\",\n      //         \"Content-Type\": \"application/json\",\n      //     },\n      //     body: JSON.stringify({\n      //         name: action.task.name,\n      //         level: action.task.level,\n      //     }),\n      // })\n      //     .catch((error) => console.error(\"Unable to add item.\", error))\n      //     .then(() => {\n      //         getTask();\n      //     });\n      // console.log(\"js\", tmp);\n      // localStorage.setItem(\"Tasks\", JSON.stringify(state));\n      // console.log(\"state\", JSON.parse(localStorage.getItem(\"Tasks\")));\n      // console.log(\"state\", state);\n\n      return [...state];\n\n    case TYPE.DELETE_TASK:\n      // console.log(\"reducer\", URL.URL_API + \"/\" + action.taskId);\n      deleteTask(action.taskId);\n      let tmpArr = JSON.parse(localStorage.getItem(\"Tasks\")).filter(task => {\n        return task.id !== action.taskId;\n      }); // let tmpArr2 = state.filter((task) => {\n      //     return task.id !== action.id;\n      // });\n      // console.log(\"state\", tmpArr);\n      // console.log(\"js\", JSON.stringify(tmpArr));\n      // localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\n\n      console.log(\"reducer 1\", tmpArr); // console.log(\"reducer 2\", tmpArr2);\n\n      return [...tmpArr];\n\n    case TYPE.UPDATE_TASK:\n      // updateTask(action.newTask);\n      console.log(\"Update\", action);\n      let updateArr = state.map(task => {\n        if (task.id === action.newTask.id) {\n          return {\n            id: action.newTask.id,\n            name: action.newTask.name,\n            level: action.newTask.level\n          };\n        } else return task;\n      }); // console.log(\"state\", updateArr);\n      // console.log(\"js\", JSON.stringify(updateArr));\n\n      localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\n      console.log(\"UpdateArr\", updateArr);\n      return [...updateArr];\n\n    case TYPE.SEARCH:\n      // console.log(\"SEARCH\", action);\n      // JSON.parse(localStorage.getItem(\"Tasks\"))\n      const taskListSearched = JSON.parse(localStorage.getItem(\"Tasks\")).filter(task => {\n        return task.name.toLowerCase().includes(action.search.toLowerCase());\n      }); // console.log(\"state\", state);\n      // console.log(\"js\", JSON.stringify(taskListSearched));\n      // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\n\n      return [...taskListSearched];\n\n    case TYPE.SORT:\n      // console.log(\"Sort\", action);\n      // console.log(\"state\", state);\n      // JSON.parse(localStorage.getItem(\"Tasks\"))\n      const taskListSorted = sort(state, action.by, action.dir); // console.log(\"state\", taskListSorted);\n      // console.log(\"js\", JSON.stringify(taskListSearched));\n      // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\n\n      return [...taskListSorted];\n\n    case TYPE.RESET_TASK:\n      // console.log(localStorage.getItem(\"Tasks\"));\n      return JSON.parse(localStorage.getItem(\"Tasks\"));\n\n    default:\n      return state;\n  } // return state;\n\n});","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Reducer/ListTask.js"],"names":["TYPE","URL","getTask","fetch","URL_API","then","response","json","catch","e","console","log","data","localStorage","setItem","JSON","stringify","initialState","getItem","parse","addTask","task","method","headers","Accept","body","name","level","error","deleteTask","taskId","sort","arr","by","dir","a","b","state","action","type","LIST","ADD_TASK","push","DELETE_TASK","tmpArr","filter","id","UPDATE_TASK","updateArr","map","newTask","SEARCH","taskListSearched","toLowerCase","includes","search","SORT","taskListSorted","RESET_TASK"],"mappings":"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","sourcesContent":["import * as TYPE from \"../Const/Types\";\r\n// import TaskList from \"../Tasks/Task.json\";\r\nimport * as URL from \"../Const/URL\";\r\n// import Cookies from \"js-cookie\";\r\n// import { wait } from \"@testing-library/react\";\r\n// import $ from \"jquery\";\r\n// var local;\r\n// local = localStorage.getItem(\"Tasks\");\r\n// if (local === \"undefined\") {\r\n//     console.log(\"resetdata\");\r\n//     //local = JSON.stringify(TaskList.Task);\r\n//     localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n// }\r\n// local = localStorage.getItem(\"Tasks\");\r\nfunction getTask() {\r\n    fetch(URL.URL_API)\r\n        .then((response) => {\r\n            // console.log(response);\r\n\r\n            return response.json();\r\n        })\r\n        .catch((e) => {\r\n            console.log(\"Err\", e);\r\n        })\r\n        .then((data) => {\r\n            // console.log(data);\r\n            // console.log(data);\r\n            localStorage.setItem(\"Tasks\", JSON.stringify(data));\r\n            // Cookies.set(\"Task\", data);\r\n            // console.log(localStorage.getItem(\"Tasks\"));\r\n        });\r\n}\r\ngetTask();\r\nconst initialState =\r\n    localStorage.getItem(\"Tasks\") !== \"undefined\"\r\n        ? JSON.parse(localStorage.getItem(\"Tasks\"))\r\n        : [{}];\r\n// console.log(initialState);\r\nfunction addTask(task) {\r\n    // const item = task;\r\n\r\n    fetch(URL.URL_API, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n            name: task.name,\r\n            level: task.level,\r\n        }),\r\n    })\r\n        .catch((error) => console.error(\"Unable to add item.\", error))\r\n        .then(() => {\r\n            getTask();\r\n        });\r\n}\r\n\r\nfunction deleteTask(taskId) {\r\n    fetch(URL.URL_API + \"/\" + taskId, {\r\n        method: \"DELETE\",\r\n    })\r\n        .catch((error) => console.error(\"Unable to delete item.\", error))\r\n        .then(() => {\r\n            getTask();\r\n        });\r\n}\r\n\r\n// function updateTask(task) {\r\n//     fetch(URL.URL_API + \"/\" + task.id, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//             Accept: \"application/json\",\r\n//             \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(task),\r\n//     })\r\n//         .then(() => {\r\n//             getTask();\r\n//             console.log(JSON.parse(localStorage.getItem(\"Tasks\")));\r\n//         })\r\n//         .catch((error) => console.error(\"Unable to update item.\", error));\r\n// }\r\n\r\nfunction sort(arr, by, dir) {\r\n    switch (by) {\r\n        case \"Name\":\r\n            switch (dir) {\r\n                case \"DESC\":\r\n                    return arr.sort((a, b) => {\r\n                        // console.log(\"DESC\", a.name - b.name);\r\n                        if (b.name < a.name) {\r\n                            return -1;\r\n                        }\r\n                        if (b.name > a.name) {\r\n                            return 1;\r\n                        }\r\n\r\n                        // name trùng nhau\r\n                        return 0;\r\n                        // return b.name - a.name;\r\n                    });\r\n\r\n                default:\r\n                    return arr.sort((a, b) => {\r\n                        // console.log(\"ASC\", a.name - b.name);\r\n                        if (b.name < a.name) {\r\n                            return 1;\r\n                        }\r\n                        if (b.name > a.name) {\r\n                            return -1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n            }\r\n\r\n        default:\r\n            switch (dir) {\r\n                case \"DESC\":\r\n                    return arr.sort((a, b) => {\r\n                        return b.level - a.level;\r\n                    });\r\n\r\n                default:\r\n                    return arr.sort((a, b) => {\r\n                        return a.level - b.level;\r\n                    });\r\n            }\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TYPE.LIST:\r\n            // console.log(\"reducer\", action);\r\n            return state;\r\n        case TYPE.ADD_TASK:\r\n            // console.log(\"reducer\", action);\r\n            addTask(action.task);\r\n            // addTask(action.task);\r\n            state.push(action.task);\r\n            // fetch(URL.URL_API, {\r\n            //     method: \"POST\",\r\n            //     headers: {\r\n            //         Accept: \"application/json\",\r\n            //         \"Content-Type\": \"application/json\",\r\n            //     },\r\n            //     body: JSON.stringify({\r\n            //         name: action.task.name,\r\n            //         level: action.task.level,\r\n            //     }),\r\n            // })\r\n            //     .catch((error) => console.error(\"Unable to add item.\", error))\r\n            //     .then(() => {\r\n            //         getTask();\r\n            //     });\r\n            // console.log(\"js\", tmp);\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(state));\r\n            // console.log(\"state\", JSON.parse(localStorage.getItem(\"Tasks\")));\r\n            // console.log(\"state\", state);\r\n            return [...state];\r\n        case TYPE.DELETE_TASK:\r\n            // console.log(\"reducer\", URL.URL_API + \"/\" + action.taskId);\r\n            deleteTask(action.taskId);\r\n            let tmpArr = JSON.parse(localStorage.getItem(\"Tasks\")).filter(\r\n                (task) => {\r\n                    return task.id !== action.taskId;\r\n                }\r\n            );\r\n            // let tmpArr2 = state.filter((task) => {\r\n            //     return task.id !== action.id;\r\n            // });\r\n            // console.log(\"state\", tmpArr);\r\n            // console.log(\"js\", JSON.stringify(tmpArr));\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\r\n            console.log(\"reducer 1\", tmpArr);\r\n            // console.log(\"reducer 2\", tmpArr2);\r\n\r\n            return [...tmpArr];\r\n        case TYPE.UPDATE_TASK:\r\n            // updateTask(action.newTask);\r\n            console.log(\"Update\", action);\r\n            let updateArr = state.map((task) => {\r\n                if (task.id === action.newTask.id) {\r\n                    return {\r\n                        id: action.newTask.id,\r\n                        name: action.newTask.name,\r\n                        level: action.newTask.level,\r\n                    };\r\n                } else return task;\r\n            });\r\n            // console.log(\"state\", updateArr);\r\n            // console.log(\"js\", JSON.stringify(updateArr));\r\n            localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\r\n            console.log(\"UpdateArr\", updateArr);\r\n\r\n            return [...updateArr];\r\n        case TYPE.SEARCH:\r\n            // console.log(\"SEARCH\", action);\r\n            // JSON.parse(localStorage.getItem(\"Tasks\"))\r\n            const taskListSearched = JSON.parse(\r\n                localStorage.getItem(\"Tasks\")\r\n            ).filter((task) => {\r\n                return task.name\r\n                    .toLowerCase()\r\n                    .includes(action.search.toLowerCase());\r\n            });\r\n            // console.log(\"state\", state);\r\n            // console.log(\"js\", JSON.stringify(taskListSearched));\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\r\n            return [...taskListSearched];\r\n        case TYPE.SORT:\r\n            // console.log(\"Sort\", action);\r\n            // console.log(\"state\", state);\r\n\r\n            // JSON.parse(localStorage.getItem(\"Tasks\"))\r\n            const taskListSorted = sort(state, action.by, action.dir);\r\n            // console.log(\"state\", taskListSorted);\r\n            // console.log(\"js\", JSON.stringify(taskListSearched));\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\r\n            return [...taskListSorted];\r\n        case TYPE.RESET_TASK:\r\n            // console.log(localStorage.getItem(\"Tasks\"));\r\n            return JSON.parse(localStorage.getItem(\"Tasks\"));\r\n        default:\r\n            return state;\r\n    }\r\n    // return state;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
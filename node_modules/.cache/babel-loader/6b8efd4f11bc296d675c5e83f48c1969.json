{"ast":null,"code":"import * as TYPE from \"../Const/Types\";\nimport TaskList from \"../Tasks/Task.json\";\nimport * as URL from \"../Const/URL\"; // import Cookies from \"js-cookie\";\n// import { wait } from \"@testing-library/react\";\n// import $ from \"jquery\";\n\nvar local;\nlocal = localStorage.getItem(\"Tasks\");\n\nif (local === \"undefined\") {\n  console.log(\"resetdata\"); //local = JSON.stringify(TaskList.Task);\n\n  localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n}\n\nlocal = localStorage.getItem(\"Tasks\");\n\nfunction getTask() {\n  fetch(URL.URL_API).then(response => response.json()).catch(e => {\n    console.log(\"Err\", e);\n  }).then(data => {\n    // console.log(data);\n    localStorage.setItem(\"Tasks\", JSON.stringify(data)); // Cookies.set(\"Task\", data);\n    // console.log(localStorage.getItem(\"Tasks\"));\n  });\n}\n\ngetTask(); // fetch(\"http://localhost:3000/api/TodoTasks\")\n//     .then((response) => response.json())\n//     .catch((e) => {\n//         console.log(\"Err\", e);\n//     })\n//     .then((data) => {\n//         console.log(data);\n//         Cookies.set(\"Task\", data);\n//         console.log(Cookies.get(\"Task\"));\n//     });\n// console.log(JSON.parse(Cookies.get(\"Task\")));\n\nconst initialState = JSON.parse(localStorage.getItem(\"Tasks\"));\n\nfunction addTask(task) {\n  // const item = task;\n  fetch(URL.URL_API, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name: task.name,\n      level: task.level\n    })\n  }).catch(error => console.error(\"Unable to add item.\", error)).then(() => {\n    getTask();\n  });\n}\n\nfunction deleteTask(taskId) {\n  // const item = task;\n  fetch(URL.URL_API + \"/\" + taskId, {\n    method: \"DELETE\"\n  }).catch(error => console.error(\"Unable to delete item.\", error)).then(() => {\n    getTask();\n  });\n}\n\nfunction updateTask(task) {\n  fetch(URL.URL_API + \"/\" + task.id, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(task)\n  }).then(() => getItems()).catch(error => console.error(\"Unable to update item.\", error));\n}\n\nfunction sort(arr, by, dir) {\n  switch (by) {\n    case \"Name\":\n      switch (dir) {\n        case \"DESC\":\n          return arr.sort((a, b) => {\n            // console.log(\"DESC\", a.name - b.name);\n            if (b.name < a.name) {\n              return -1;\n            }\n\n            if (b.name > a.name) {\n              return 1;\n            } // name trùng nhau\n\n\n            return 0; // return b.name - a.name;\n          });\n\n        default:\n          return arr.sort((a, b) => {\n            // console.log(\"ASC\", a.name - b.name);\n            if (b.name < a.name) {\n              return 1;\n            }\n\n            if (b.name > a.name) {\n              return -1;\n            }\n\n            return 0;\n          });\n      }\n\n    default:\n      switch (dir) {\n        case \"DESC\":\n          return arr.sort((a, b) => {\n            return b.level - a.level;\n          });\n\n        default:\n          return arr.sort((a, b) => {\n            return a.level - b.level;\n          });\n      }\n\n  }\n}\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case TYPE.LIST:\n      // console.log(\"reducer\", action);\n      return state;\n\n    case TYPE.ADD_TASK:\n      // console.log(\"reducer\", action);\n      addTask(action.task); // addTask(action.task);\n\n      state.push(action.task); // fetch(URL.URL_API, {\n      //     method: \"POST\",\n      //     headers: {\n      //         Accept: \"application/json\",\n      //         \"Content-Type\": \"application/json\",\n      //     },\n      //     body: JSON.stringify({\n      //         name: action.task.name,\n      //         level: action.task.level,\n      //     }),\n      // })\n      //     .catch((error) => console.error(\"Unable to add item.\", error))\n      //     .then(() => {\n      //         getTask();\n      //     });\n      // console.log(\"js\", tmp);\n      // localStorage.setItem(\"Tasks\", JSON.stringify(state));\n      // console.log(\"state\", JSON.parse(localStorage.getItem(\"Tasks\")));\n      // console.log(\"state\", state);\n\n      return [...state];\n\n    case TYPE.DELETE_TASK:\n      // console.log(\"reducer\", URL.URL_API + \"/\" + action.taskId);\n      deleteTask(action.taskId);\n      let tmpArr = JSON.parse(localStorage.getItem(\"Tasks\")).filter(task => {\n        return task.id !== action.taskId;\n      }); // let tmpArr2 = state.filter((task) => {\n      //     return task.id !== action.id;\n      // });\n      // console.log(\"state\", tmpArr);\n      // console.log(\"js\", JSON.stringify(tmpArr));\n      // localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\n\n      console.log(\"reducer 1\", tmpArr); // console.log(\"reducer 2\", tmpArr2);\n\n      return [...tmpArr];\n\n    case TYPE.UPDATE_TASK:\n      console.log(\"Update\", action);\n      let updateArr = state.map(task => {\n        if (task.name === action.oldName) {\n          return {\n            name: action.newTask.name,\n            level: action.newTask.level\n          };\n        } else return task;\n      }); // console.log(\"state\", updateArr);\n      // console.log(\"js\", JSON.stringify(updateArr));\n\n      localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\n      return [...updateArr];\n\n    case TYPE.SEARCH:\n      // console.log(\"SEARCH\", action);\n      // JSON.parse(localStorage.getItem(\"Tasks\"))\n      const taskListSearched = JSON.parse(localStorage.getItem(\"Tasks\")).filter(task => {\n        return task.name.toLowerCase().includes(action.search.toLowerCase());\n      }); // console.log(\"state\", state);\n      // console.log(\"js\", JSON.stringify(taskListSearched));\n      // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\n\n      return [...taskListSearched];\n\n    case TYPE.SORT:\n      // console.log(\"Sort\", action);\n      // console.log(\"state\", state);\n      // JSON.parse(localStorage.getItem(\"Tasks\"))\n      const taskListSorted = sort(state, action.by, action.dir); // console.log(\"state\", taskListSorted);\n      // console.log(\"js\", JSON.stringify(taskListSearched));\n      // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\n\n      return [...taskListSorted];\n\n    default:\n      return state;\n  } // return state;\n\n});","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Reducer/ListTask.js"],"names":["TYPE","TaskList","URL","local","localStorage","getItem","console","log","setItem","JSON","stringify","Task","getTask","fetch","URL_API","then","response","json","catch","e","data","initialState","parse","addTask","task","method","headers","Accept","body","name","level","error","deleteTask","taskId","updateTask","id","getItems","sort","arr","by","dir","a","b","state","action","type","LIST","ADD_TASK","push","DELETE_TASK","tmpArr","filter","UPDATE_TASK","updateArr","map","oldName","newTask","SEARCH","taskListSearched","toLowerCase","includes","search","SORT","taskListSorted"],"mappings":"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","sourcesContent":["import * as TYPE from \"../Const/Types\";\r\nimport TaskList from \"../Tasks/Task.json\";\r\nimport * as URL from \"../Const/URL\";\r\n// import Cookies from \"js-cookie\";\r\n// import { wait } from \"@testing-library/react\";\r\n// import $ from \"jquery\";\r\nvar local;\r\nlocal = localStorage.getItem(\"Tasks\");\r\nif (local === \"undefined\") {\r\n    console.log(\"resetdata\");\r\n    //local = JSON.stringify(TaskList.Task);\r\n    localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n}\r\nlocal = localStorage.getItem(\"Tasks\");\r\nfunction getTask() {\r\n    fetch(URL.URL_API)\r\n        .then((response) => response.json())\r\n        .catch((e) => {\r\n            console.log(\"Err\", e);\r\n        })\r\n        .then((data) => {\r\n            // console.log(data);\r\n            localStorage.setItem(\"Tasks\", JSON.stringify(data));\r\n            // Cookies.set(\"Task\", data);\r\n            // console.log(localStorage.getItem(\"Tasks\"));\r\n        });\r\n}\r\ngetTask();\r\n// fetch(\"http://localhost:3000/api/TodoTasks\")\r\n//     .then((response) => response.json())\r\n//     .catch((e) => {\r\n//         console.log(\"Err\", e);\r\n//     })\r\n//     .then((data) => {\r\n//         console.log(data);\r\n//         Cookies.set(\"Task\", data);\r\n//         console.log(Cookies.get(\"Task\"));\r\n//     });\r\n\r\n// console.log(JSON.parse(Cookies.get(\"Task\")));\r\nconst initialState = JSON.parse(localStorage.getItem(\"Tasks\"));\r\n\r\nfunction addTask(task) {\r\n    // const item = task;\r\n\r\n    fetch(URL.URL_API, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n            name: task.name,\r\n            level: task.level,\r\n        }),\r\n    })\r\n        .catch((error) => console.error(\"Unable to add item.\", error))\r\n        .then(() => {\r\n            getTask();\r\n        });\r\n}\r\n\r\nfunction deleteTask(taskId) {\r\n    // const item = task;\r\n\r\n    fetch(URL.URL_API + \"/\" + taskId, {\r\n        method: \"DELETE\",\r\n    })\r\n        .catch((error) => console.error(\"Unable to delete item.\", error))\r\n        .then(() => {\r\n            getTask();\r\n        });\r\n}\r\n\r\nfunction updateTask(task) {\r\n    fetch(URL.URL_API + \"/\" + task.id, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(task),\r\n    })\r\n        .then(() => getItems())\r\n        .catch((error) => console.error(\"Unable to update item.\", error));\r\n}\r\n\r\nfunction sort(arr, by, dir) {\r\n    switch (by) {\r\n        case \"Name\":\r\n            switch (dir) {\r\n                case \"DESC\":\r\n                    return arr.sort((a, b) => {\r\n                        // console.log(\"DESC\", a.name - b.name);\r\n                        if (b.name < a.name) {\r\n                            return -1;\r\n                        }\r\n                        if (b.name > a.name) {\r\n                            return 1;\r\n                        }\r\n\r\n                        // name trùng nhau\r\n                        return 0;\r\n                        // return b.name - a.name;\r\n                    });\r\n\r\n                default:\r\n                    return arr.sort((a, b) => {\r\n                        // console.log(\"ASC\", a.name - b.name);\r\n                        if (b.name < a.name) {\r\n                            return 1;\r\n                        }\r\n                        if (b.name > a.name) {\r\n                            return -1;\r\n                        }\r\n                        return 0;\r\n                    });\r\n            }\r\n\r\n        default:\r\n            switch (dir) {\r\n                case \"DESC\":\r\n                    return arr.sort((a, b) => {\r\n                        return b.level - a.level;\r\n                    });\r\n\r\n                default:\r\n                    return arr.sort((a, b) => {\r\n                        return a.level - b.level;\r\n                    });\r\n            }\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TYPE.LIST:\r\n            // console.log(\"reducer\", action);\r\n            return state;\r\n        case TYPE.ADD_TASK:\r\n            // console.log(\"reducer\", action);\r\n            addTask(action.task);\r\n            // addTask(action.task);\r\n            state.push(action.task);\r\n            // fetch(URL.URL_API, {\r\n            //     method: \"POST\",\r\n            //     headers: {\r\n            //         Accept: \"application/json\",\r\n            //         \"Content-Type\": \"application/json\",\r\n            //     },\r\n            //     body: JSON.stringify({\r\n            //         name: action.task.name,\r\n            //         level: action.task.level,\r\n            //     }),\r\n            // })\r\n            //     .catch((error) => console.error(\"Unable to add item.\", error))\r\n            //     .then(() => {\r\n            //         getTask();\r\n            //     });\r\n            // console.log(\"js\", tmp);\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(state));\r\n            // console.log(\"state\", JSON.parse(localStorage.getItem(\"Tasks\")));\r\n            // console.log(\"state\", state);\r\n            return [...state];\r\n        case TYPE.DELETE_TASK:\r\n            // console.log(\"reducer\", URL.URL_API + \"/\" + action.taskId);\r\n            deleteTask(action.taskId);\r\n            let tmpArr = JSON.parse(localStorage.getItem(\"Tasks\")).filter(\r\n                (task) => {\r\n                    return task.id !== action.taskId;\r\n                }\r\n            );\r\n            // let tmpArr2 = state.filter((task) => {\r\n            //     return task.id !== action.id;\r\n            // });\r\n            // console.log(\"state\", tmpArr);\r\n            // console.log(\"js\", JSON.stringify(tmpArr));\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\r\n            console.log(\"reducer 1\", tmpArr);\r\n            // console.log(\"reducer 2\", tmpArr2);\r\n\r\n            return [...tmpArr];\r\n        case TYPE.UPDATE_TASK:\r\n            console.log(\"Update\", action);\r\n            let updateArr = state.map((task) => {\r\n                if (task.name === action.oldName) {\r\n                    return {\r\n                        name: action.newTask.name,\r\n                        level: action.newTask.level,\r\n                    };\r\n                } else return task;\r\n            });\r\n            // console.log(\"state\", updateArr);\r\n            // console.log(\"js\", JSON.stringify(updateArr));\r\n            localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\r\n            return [...updateArr];\r\n        case TYPE.SEARCH:\r\n            // console.log(\"SEARCH\", action);\r\n            // JSON.parse(localStorage.getItem(\"Tasks\"))\r\n            const taskListSearched = JSON.parse(\r\n                localStorage.getItem(\"Tasks\")\r\n            ).filter((task) => {\r\n                return task.name\r\n                    .toLowerCase()\r\n                    .includes(action.search.toLowerCase());\r\n            });\r\n            // console.log(\"state\", state);\r\n            // console.log(\"js\", JSON.stringify(taskListSearched));\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\r\n            return [...taskListSearched];\r\n        case TYPE.SORT:\r\n            // console.log(\"Sort\", action);\r\n            // console.log(\"state\", state);\r\n\r\n            // JSON.parse(localStorage.getItem(\"Tasks\"))\r\n            const taskListSorted = sort(state, action.by, action.dir);\r\n            // console.log(\"state\", taskListSorted);\r\n            // console.log(\"js\", JSON.stringify(taskListSearched));\r\n            // localStorage.setItem(\"Tasks\", JSON.stringify(updateArr));\r\n            return [...taskListSorted];\r\n        default:\r\n            return state;\r\n    }\r\n    // return state;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
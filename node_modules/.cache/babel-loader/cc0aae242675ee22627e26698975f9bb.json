{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { Component } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\"; // import Edit from \"./Edit\";\n\nclass TaskRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: this.props.index,\n      // task: this.props.task,\n      // editName: this.props.task.name,\n      newName: this.props.task.name,\n      newLevel: 1 // isEdit: false,\n\n    };\n    this.nameChange = this.nameChange.bind(this);\n    this.levelChange = this.levelChange.bind(this);\n  }\n\n  update(oldName, newName, newLevel) {\n    // console.log(oldName, newName, newLevel);\n    // const index = this.state.Task.findIndex((task) => task.name == oldName);\n    this.props.updateTask(oldName, {\n      name: newName,\n      level: newLevel\n    });\n    const local = localStorage.getItem(\"Tasks\");\n    let taskList = JSON.parse(local);\n    const tmpArr = taskList.map(task => {\n      if (task.name === oldName) {\n        return {\n          name: newName,\n          level: newLevel\n        };\n      } else return task;\n    });\n    localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr)); // this.setState({\n    //     Task: tmpArr,\n    // });\n    //console.log(tmpArr);\n    // this.state.Task[index].name = newName;\n    // this.state.Task[index].level = newLevel;\n  }\n\n  handleSave() {\n    this.props.toggleEdit();\n    console.log(this.state.editName, this.state.newName, this.state.newLevel);\n    this.setState({\n      // isEdit: false,\n      task: {\n        name: this.state.newName,\n        level: parseInt(this.state.newLevel)\n      }\n    });\n    this.update(this.state.editName, this.state.newName, parseInt(this.state.newLevel));\n  }\n\n  toggleEditOrSave(task) {\n    if (this.props.isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      }, \"Save\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  handleEdit(name, level) {\n    this.props.toggleEdit();\n    this.props.newTask({\n      name: name,\n      level: level\n    });\n    this.props.editTask({\n      name: name,\n      level: level\n    });\n    this.setState({\n      editName: name,\n      newName: name,\n      newLevel: level // isEdit: true,\n\n    }); // console.log(\"edit\", name, \" \", level);\n    //this.props.setNameAndLevel(name, level);\n  }\n\n  level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  nameChange(e) {\n    // this.setState({ newName: e.target.value });\n    this.props.newTask({\n      name: e.target.value,\n      level: this.props.newTaskLevel\n    });\n  }\n\n  isEditName(task) {\n    if (task.name !== this.props.editName || this.props.isEdit === false) {\n      // console.log(\n      //     \"nor \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (this.props.isEdit === true) {\n      // console.log(\n      //     \"tex \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return (\n        /*#__PURE__*/\n        // <Edit newName={this.state.newName}></Edit>\n        React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          type: \"text\",\n          value: this.props.newTaskName,\n          onChange: this.nameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }\n        }))\n      );\n    }\n  }\n\n  delete(name) {\n    // console.log(\"delete\");\n    const tmpArr = this.state.Task.filter(task => {\n      return task.name !== name;\n    });\n    this.setState({\n      Task: tmpArr\n    });\n  }\n\n  isEditLevel(task) {\n    if (task.name !== this.props.editName || this.props.isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 20\n        }\n      }, this.level(task.level));\n    } else if (this.props.isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.props.newTaskLevel,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: this.levelChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  }\n\n  levelChange(e) {\n    // this.setState({\n    //     newLevel: e.target.value,\n    // });\n    console.log(e.target.value);\n    this.props.newTask({\n      name: this.props.newTaskName,\n      level: e.target.value\n    });\n  }\n\n  render() {\n    // console.log(\n    //     \"this.props.editTaskTarget\",\n    //     this.props.editTaskTarget ? this.props.editTaskTarget : null\n    // );\n    return (\n      /*#__PURE__*/\n      // <tr key={index}>\n      React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }\n      }, this.props.index + 1), this.isEditName(this.props.task), this.isEditLevel(this.props.task), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }\n      }, this.toggleEditOrSave(this.props.task), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => {\n          // return this.delete(this.state.task.name);\n          return this.props.deleteTask(this.props.task.name);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }\n      }, \"Delete\"))))\n    );\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  // editTaskTarget: state.EditTask,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskName => {\n      dispatch(Action.deleteTask(taskName));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    },\n    editTask: task => {\n      dispatch(Action.editTask(task));\n    },\n    newTask: task => {\n      dispatch(Action.newTask(task));\n    },\n    updateTask: (oldName, newTask) => {\n      dispatch(Action.newTask(oldName, newTask));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","Component","ButtonGroup","Form","Button","Badge","connect","Action","TaskRow","constructor","props","state","index","newName","task","name","newLevel","nameChange","bind","levelChange","update","oldName","updateTask","level","local","localStorage","getItem","taskList","JSON","parse","tmpArr","map","setItem","stringify","handleSave","toggleEdit","console","log","editName","setState","parseInt","toggleEditOrSave","isEdit","handleEdit","newTask","editTask","e","target","value","newTaskLevel","isEditName","newTaskName","delete","Task","filter","isEditLevel","render","deleteTask","mapStateToProps","ToggleEdit","EditTask","NewTask","mapDispatchToProps","dispatch","taskName"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n// import Edit from \"./Edit\";\r\nclass TaskRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            index: this.props.index,\r\n            // task: this.props.task,\r\n            // editName: this.props.task.name,\r\n            newName: this.props.task.name,\r\n            newLevel: 1,\r\n            // isEdit: false,\r\n        };\r\n        this.nameChange = this.nameChange.bind(this);\r\n        this.levelChange = this.levelChange.bind(this);\r\n    }\r\n\r\n    update(oldName, newName, newLevel) {\r\n        // console.log(oldName, newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        this.props.updateTask(oldName, { name: newName, level: newLevel });\r\n        const local = localStorage.getItem(\"Tasks\");\r\n        let taskList = JSON.parse(local);\r\n        const tmpArr = taskList.map((task) => {\r\n            if (task.name === oldName) {\r\n                return { name: newName, level: newLevel };\r\n            } else return task;\r\n        });\r\n        localStorage.setItem(\"Tasks\", JSON.stringify(tmpArr));\r\n        // this.setState({\r\n        //     Task: tmpArr,\r\n        // });\r\n        //console.log(tmpArr);\r\n        // this.state.Task[index].name = newName;\r\n        // this.state.Task[index].level = newLevel;\r\n    }\r\n\r\n    handleSave() {\r\n        this.props.toggleEdit();\r\n        console.log(\r\n            this.state.editName,\r\n            this.state.newName,\r\n            this.state.newLevel\r\n        );\r\n        this.setState({\r\n            // isEdit: false,\r\n            task: {\r\n                name: this.state.newName,\r\n                level: parseInt(this.state.newLevel),\r\n            },\r\n        });\r\n        this.update(\r\n            this.state.editName,\r\n            this.state.newName,\r\n            parseInt(this.state.newLevel)\r\n        );\r\n    }\r\n\r\n    toggleEditOrSave(task) {\r\n        if (this.props.isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleSave(task.name, task.level)}\r\n                >\r\n                    Save\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleEdit(name, level) {\r\n        this.props.toggleEdit();\r\n        this.props.newTask({ name: name, level: level });\r\n        this.props.editTask({ name: name, level: level });\r\n        this.setState({\r\n            editName: name,\r\n            newName: name,\r\n            newLevel: level,\r\n            // isEdit: true,\r\n        });\r\n\r\n        // console.log(\"edit\", name, \" \", level);\r\n        //this.props.setNameAndLevel(name, level);\r\n    }\r\n\r\n    level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    nameChange(e) {\r\n        // this.setState({ newName: e.target.value });\r\n        this.props.newTask({\r\n            name: e.target.value,\r\n            level: this.props.newTaskLevel,\r\n        });\r\n    }\r\n\r\n    isEditName(task) {\r\n        if (task.name !== this.props.editName || this.props.isEdit === false) {\r\n            // console.log(\r\n            //     \"nor \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n\r\n            return <td>{task.name}</td>;\r\n        } else if (this.props.isEdit === true) {\r\n            // console.log(\r\n            //     \"tex \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n            return (\r\n                // <Edit newName={this.state.newName}></Edit>\r\n                <td>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={this.props.newTaskName}\r\n                        onChange={this.nameChange}\r\n                    ></Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    delete(name) {\r\n        // console.log(\"delete\");\r\n        const tmpArr = this.state.Task.filter((task) => {\r\n            return task.name !== name;\r\n        });\r\n        this.setState({\r\n            Task: tmpArr,\r\n        });\r\n    }\r\n\r\n    isEditLevel(task) {\r\n        if (task.name !== this.props.editName || this.props.isEdit === false) {\r\n            return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n        } else if (this.props.isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={this.props.newTaskLevel}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={this.levelChange}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    levelChange(e) {\r\n        // this.setState({\r\n        //     newLevel: e.target.value,\r\n        // });\r\n        console.log(e.target.value);\r\n        this.props.newTask({\r\n            name: this.props.newTaskName,\r\n            level: e.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // console.log(\r\n        //     \"this.props.editTaskTarget\",\r\n        //     this.props.editTaskTarget ? this.props.editTaskTarget : null\r\n        // );\r\n        return (\r\n            // <tr key={index}>\r\n            <tr>\r\n                <td className=\"text-center\">{this.props.index + 1}</td>\r\n                {this.isEditName(this.props.task)}\r\n                {this.isEditLevel(this.props.task)}\r\n                {/* <td>{task.name}</td> */}\r\n                {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n                <td className=\"text-center\">\r\n                    <ButtonGroup>\r\n                        {this.toggleEditOrSave(this.props.task)}\r\n                        {/* <Button\r\n                    variant=\"warning\"\r\n                    onClick={() =>\r\n                        this.handleEdit(task.name, task.level)\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button> */}\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            onClick={() => {\r\n                                // return this.delete(this.state.task.name);\r\n                                return this.props.deleteTask(\r\n                                    this.props.task.name\r\n                                );\r\n                            }}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    // editTaskTarget: state.EditTask,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskName) => {\r\n            dispatch(Action.deleteTask(taskName));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n        editTask: (task) => {\r\n            dispatch(Action.editTask(task));\r\n        },\r\n        newTask: (task) => {\r\n            dispatch(Action.newTask(task));\r\n        },\r\n        updateTask: (oldName, newTask) => {\r\n            dispatch(Action.newTask(oldName, newTask));\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
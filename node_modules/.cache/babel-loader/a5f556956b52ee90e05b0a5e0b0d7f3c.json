{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\"; // import React, { useState, useEffect } from \"react\";\n// import Edit from \"./Edit\";\n\nfunction TaskRow(props) {\n  // constructor(props) {\n  //     super(props);\n  //     this.nameChange = this.nameChange.bind(this);\n  //     this.levelChange = this.levelChange.bind(this);\n  // }\n  const [nameChange, setNameChange] = useState(\"\");\n  const [levelChange, setLevelChange] = useState(1);\n\n  function update(oldName, newName, newLevel) {\n    console.log(oldName, newName, newLevel); // const index = this.state.Task.findIndex((task) => task.name == oldName);\n\n    props.updateTask(oldName, {\n      name: newName,\n      level: newLevel\n    });\n  }\n\n  function handleSave() {\n    props.toggleEdit();\n    console.log(props.editName, props.newTaskName, parseInt(props.newTaskLevel));\n    update(props.editName, props.newTaskName, parseInt(props.newTaskLevel));\n  }\n\n  function toggleEditOrSave(task) {\n    if (props.isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }, \"Save\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  function shouldComponentUpdate(nextProps, nextState) {}\n\n  function handleEdit(name, level) {\n    props.toggleEdit();\n    props.newTask({\n      name: name,\n      level: level\n    });\n    props.editTask({\n      name: name,\n      level: level\n    });\n  }\n\n  function level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  } // function nameChange(e) {\n  //     // this.setState({ newName: e.target.value });\n  //     this.props.newTask({\n  //         name: e.target.value,\n  //         level: this.props.newTaskLevel,\n  //     });\n  // }\n\n\n  function isEditName(task) {\n    if (task.name !== props.editName || props.isEdit === false) {\n      // console.log(\n      //     \"nor \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (props.isEdit === true) {\n      // console.log(\n      //     \"tex \",\n      //     task.name,\n      //     this.props.editName,\n      //     this.props.isEdit\n      // );\n      return (\n        /*#__PURE__*/\n        // <Edit newName={this.state.newName}></Edit>\n        React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          type: \"text\",\n          value: props.newTaskName,\n          onChange: nameChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }\n        }))\n      );\n    }\n  }\n\n  function isEditLevel(task) {\n    if (task.name !== this.props.editName || this.props.isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 20\n        }\n      }, this.level(task.level));\n    } else if (this.props.isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.props.newTaskLevel,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: this.levelChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  } // function levelChange(e) {\n  //     // this.setState({\n  //     //     newLevel: e.target.value,\n  //     // });\n  //     console.log(e.target.value);\n  //     this.props.newTask({\n  //         name: this.props.newTaskName,\n  //         level: e.target.value,\n  //     });\n  // }\n\n\n  console.log(\"row-render\"); // console.log(\n  //     \"this.props.editTaskTarget\",\n  //     this.props.editTaskTarget ? this.props.editTaskTarget : null\n  // );\n\n  return (\n    /*#__PURE__*/\n    // <tr key={index}>\n    React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, props.index + 1), isEditName(props.task), isEditLevel(props.task), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }, toggleEditOrSave(props.task), /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: () => {\n        // return this.delete(this.state.task.name);\n        return props.deleteTask(props.task.name);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, \"Delete\"))))\n  );\n}\n\nconst mapStateToProps = state => ({\n  isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  // editTaskTarget: state.EditTask,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskName => {\n      dispatch(Action.deleteTask(taskName));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    },\n    editTask: task => {\n      dispatch(Action.editTask(task));\n    },\n    newTask: task => {\n      dispatch(Action.newTask(task));\n    },\n    updateTask: (oldName, newTask) => {\n      dispatch(Action.updateTask(oldName, newTask));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","useState","useEffect","ButtonGroup","Form","Button","Badge","connect","Action","TaskRow","props","nameChange","setNameChange","levelChange","setLevelChange","update","oldName","newName","newLevel","console","log","updateTask","name","level","handleSave","toggleEdit","editName","newTaskName","parseInt","newTaskLevel","toggleEditOrSave","task","isEdit","handleEdit","shouldComponentUpdate","nextProps","nextState","newTask","editTask","isEditName","isEditLevel","index","deleteTask","mapStateToProps","state","ToggleEdit","EditTask","NewTask","mapDispatchToProps","dispatch","taskName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Edit from \"./Edit\";\r\nfunction TaskRow(props) {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.nameChange = this.nameChange.bind(this);\r\n    //     this.levelChange = this.levelChange.bind(this);\r\n    // }\r\n\r\n    const [nameChange, setNameChange] = useState(\"\");\r\n    const [levelChange, setLevelChange] = useState(1);\r\n\r\n    function update(oldName, newName, newLevel) {\r\n        console.log(oldName, newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        props.updateTask(oldName, { name: newName, level: newLevel });\r\n    }\r\n\r\n    function handleSave() {\r\n        props.toggleEdit();\r\n        console.log(\r\n            props.editName,\r\n            props.newTaskName,\r\n            parseInt(props.newTaskLevel)\r\n        );\r\n\r\n        update(props.editName, props.newTaskName, parseInt(props.newTaskLevel));\r\n    }\r\n\r\n    function toggleEditOrSave(task) {\r\n        if (props.isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => handleSave(task.name, task.level)}\r\n                >\r\n                    Save\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    function shouldComponentUpdate(nextProps, nextState) {}\r\n\r\n    function handleEdit(name, level) {\r\n        props.toggleEdit();\r\n        props.newTask({ name: name, level: level });\r\n        props.editTask({ name: name, level: level });\r\n    }\r\n\r\n    function level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    // function nameChange(e) {\r\n    //     // this.setState({ newName: e.target.value });\r\n    //     this.props.newTask({\r\n    //         name: e.target.value,\r\n    //         level: this.props.newTaskLevel,\r\n    //     });\r\n    // }\r\n\r\n    function isEditName(task) {\r\n        if (task.name !== props.editName || props.isEdit === false) {\r\n            // console.log(\r\n            //     \"nor \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n\r\n            return <td>{task.name}</td>;\r\n        } else if (props.isEdit === true) {\r\n            // console.log(\r\n            //     \"tex \",\r\n            //     task.name,\r\n            //     this.props.editName,\r\n            //     this.props.isEdit\r\n            // );\r\n            return (\r\n                // <Edit newName={this.state.newName}></Edit>\r\n                <td>\r\n                    <Form.Control\r\n                        type=\"text\"\r\n                        value={props.newTaskName}\r\n                        onChange={nameChange}\r\n                    ></Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    function isEditLevel(task) {\r\n        if (task.name !== this.props.editName || this.props.isEdit === false) {\r\n            return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n        } else if (this.props.isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={this.props.newTaskLevel}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={this.levelChange}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    // function levelChange(e) {\r\n    //     // this.setState({\r\n    //     //     newLevel: e.target.value,\r\n    //     // });\r\n    //     console.log(e.target.value);\r\n    //     this.props.newTask({\r\n    //         name: this.props.newTaskName,\r\n    //         level: e.target.value,\r\n    //     });\r\n    // }\r\n\r\n    console.log(\"row-render\");\r\n    // console.log(\r\n    //     \"this.props.editTaskTarget\",\r\n    //     this.props.editTaskTarget ? this.props.editTaskTarget : null\r\n    // );\r\n    return (\r\n        // <tr key={index}>\r\n        <tr>\r\n            <td className=\"text-center\">{props.index + 1}</td>\r\n            {isEditName(props.task)}\r\n            {isEditLevel(props.task)}\r\n            {/* <td>{task.name}</td> */}\r\n            {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n            <td className=\"text-center\">\r\n                <ButtonGroup>\r\n                    {toggleEditOrSave(props.task)}\r\n                    {/* <Button\r\n                    variant=\"warning\"\r\n                    onClick={() =>\r\n                        this.handleEdit(task.name, task.level)\r\n                    }\r\n                >\r\n                    Edit\r\n                </Button> */}\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => {\r\n                            // return this.delete(this.state.task.name);\r\n                            return props.deleteTask(props.task.name);\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    // editTaskTarget: state.EditTask,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskName) => {\r\n            dispatch(Action.deleteTask(taskName));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n        editTask: (task) => {\r\n            dispatch(Action.editTask(task));\r\n        },\r\n        newTask: (task) => {\r\n            dispatch(Action.newTask(task));\r\n        },\r\n        updateTask: (oldName, newTask) => {\r\n            dispatch(Action.updateTask(oldName, newTask));\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\React-Redux\\\\react-app\\\\src\\\\Component\\\\TaskRow.js\";\nimport React, { useState } from \"react\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"; // import InputGroup from \"react-bootstrap/InputGroup\";\n// import Row from \"react-bootstrap/Row\";\n// import Col from \"react-bootstrap/Col\";\n// import Form from \"react-bootstrap/Form\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { connect } from \"react-redux\";\nimport * as Action from \"../Actions/index\"; // import EditFields from \"./EditFields\";\n\nimport \"../Form.css\";\nimport EditForm from \"./EditForm\"; // import { Field, reduxForm, submit } from \"redux-form\";\n// import { Field, reduxForm } from \"redux-form\";\n// import { submit } from \"redux-form\";\n// import React, { useState, useEffect } from \"react\";\n// import Edit from \"./Edit\";\n\nfunction TaskRow(props) {\n  // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\n  // TaskRow = createReduxForm(TaskRow);\n  // constructor(props) {\n  //     super(props);\n  //     this.nameChange = this.nameChange.bind(this);\n  //     this.levelChange = this.levelChange.bind(this);\n  // }\n  // const { handleSubmit, pristine, reset, submitting } = props;\n  const [nameChange, setNameChange] = useState(\"\");\n  const [levelChange, setLevelChange] = useState(1);\n  const [editName, setEditName] = useState(props.editName);\n  const [isEdit, setIsEdit] = useState(false); // const [id, setId] = useState(props.task.id);\n  // function test(values) {\n  //     console.log(values);\n  // }\n  // function update(newName, newLevel) {\n  //     console.log(newName, newLevel);\n  //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\n  //     props.updateTask({ id: props.task.id, name: newName, level: newLevel });\n  // }\n\n  function getTask() {\n    fetch(URL.URL_API).then(response => response.json()).catch(e => {\n      console.log(\"Err\", e);\n    }).then(data => {\n      // console.log(data);\n      localStorage.setItem(\"Tasks\", JSON.stringify(data)); // Cookies.set(\"Task\", data);\n      // console.log(localStorage.getItem(\"Tasks\"));\n    });\n  } // console.log(\"Unable to update item.\", error)\n\n\n  async function updateTask(task) {\n    await fetch(URL.URL_API + \"/\" + task.id, {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(task)\n    }).then(() => getTask()).catch(error => false);\n    return true;\n  }\n\n  async function update(values) {\n    let tmp = await updateTask({\n      id: props.task.id,\n      name: values.name,\n      level: parseInt(values.level)\n    });\n    console.log(tmp); // const index = this.state.Task.findIndex((task) => task.name == oldName);\n\n    if (tmp) {\n      props.updateTask({\n        id: props.task.id,\n        name: values.name,\n        level: parseInt(values.level)\n      });\n      props.updateChart();\n    }\n  } // function handleSave() {\n  //     // props.toggleEdit();\n  //     setIsEdit(false);\n  //     console.log(editName, nameChange, parseInt(levelChange));\n  //     update(nameChange, parseInt(levelChange));\n  //     props.updateChart();\n  // }\n  // function toggleEditOrSave(task) {\n  //     if (isEdit) {\n  //         return (\n  //             <Button\n  //                 variant=\"warning\"\n  //                 // onClick={() => handleSave(task.name, task.level)}\n  //                 onClick={() => props.submitform()}\n  //             >\n  //                 Done\n  //             </Button>\n  //         );\n  //     } else {\n  //         return (\n  //             <Button\n  //                 variant=\"warning\"\n  //                 onClick={() => handleEdit(task.name, task.level)}\n  //             >\n  //                 Edit\n  //             </Button>\n  //         );\n  //     }\n  // }\n\n\n  function handleEdit(name, level) {\n    // console.log(name);\n    // console.log(nameChange);\n    props.editTask({\n      id: props.task.id,\n      name: props.task.name,\n      level: props.task.level\n    });\n    setIsEdit(true);\n    setNameChange(name);\n    setLevelChange(level);\n    setEditName(name); // console.log(nameChange);\n    // props.toggleEdit();\n    // props.newTask({ name: name, level: level });\n    // props.editTask({ name: name, level: level });\n  }\n\n  function level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  } // function test(value) {\n  //     console.log(\"test \", value);\n  // }\n  // function isEditName(task) {\n  // console.log(task.name !== editName || isEdit === false);\n  // if (task.name !== editName || isEdit === false) {\n  // console.log(\n  //     \"nor \",\n  //     task.name,\n  //     this.props.editName,\n  //     this.props.isEdit\n  // );\n  // return <td>{task.name}</td>;\n  // } else if (isEdit === true) {\n  // console.log(\n  //     \"tex \",\n  //     task.name,\n  //     this.props.editName,\n  //     this.props.isEdit\n  // );\n  // return (\n  // <Edit newName={this.state.newName}></Edit>\n  // <td>\n  //     <Row>\n  //         <Col md={12}>\n  //             <EditFields\n  //                 nameChange={task.name}\n  //                 onSubmit={update}\n  //             ></EditFields>\n  //         </Col>\n  // {\n  //     /* <Col md={{ span: 3, offset: 1 }}>\n  //                         <Form.Control\n  //                             value={levelChange}\n  //                             as=\"select\"\n  //                             name=\"ds\"\n  //                             id=\"inputDs\"\n  //                             onChange={(e) => setLevelChange(e.target.value)}\n  //                         >\n  //                             <option value={1}>Low</option>\n  //                             <option value={2}>Medium</option>\n  //                             <option value={3}>High</option>\n  //                         </Form.Control>\n  //                     </Col> */\n  // }\n  // </Row>\n  // {\n  //     /* <InputGroup>\n  //                     <EditFields\n  //                         nameChange={task.name}\n  //                         onSubmit={test}\n  //                     ></EditFields>\n  //                     <Form.Control\n  //                         value={levelChange}\n  //                         as=\"select\"\n  //                         name=\"ds\"\n  //                         id=\"inputDs\"\n  //                         onChange={(e) => setLevelChange(e.target.value)}\n  //                     >\n  //                         <option value={1}>Low</option>\n  //                         <option value={2}>Medium</option>\n  //                         <option value={3}>High</option>\n  //                     </Form.Control>\n  //                 </InputGroup> */\n  // }\n  // {\n  //     /* <Form.Control\n  //                     type=\"text\"\n  //                     value={nameChange}\n  //                     onChange={(e) => setNameChange(e.target.value)}\n  //                 ></Form.Control> */\n  // }\n  // {\n  //     /* <form\n  //                     onSubmit={() => {\n  //                         test();\n  //                     }}\n  //                 >\n  //                     <Field\n  //                         name=\"name\"\n  //                         type=\"text\"\n  //                         component={renderField}\n  //                         // label=\"last name\"\n  //                     />\n  //                 </form> */\n  // }\n  // {\n  //     /* <Field\n  //                     // previousValue={nameChange}\n  //                     name=\"row\"\n  //                     value={nameChange}\n  //                     className=\"form-control\"\n  //                     component=\"input\"\n  //                     type=\"text\"\n  //                 /> */\n  // }\n  // // </td>\n  // //         );\n  // //     }\n  // // }\n  // function isEditLevel(task) {\n  //     if (task.name !== editName || isEdit === false) {\n  //         return <td className=\"text-center\">{level(task.level)}</td>;\n  //     } else if (isEdit === true) {\n  //         // console.log(\"select \", task.name);\n  //         return null;\n  //         // (\n  //         //     <td className=\"text-center\">\n  //         //         <Form.Control\n  //         //             value={levelChange}\n  //         //             as=\"select\"\n  //         //             name=\"ds\"\n  //         //             id=\"inputDs\"\n  //         //             onChange={(e) => setLevelChange(e.target.value)}\n  //         //         >\n  //         //             <option value={1}>Low</option>\n  //         //             <option value={2}>Medium</option>\n  //         //             <option value={3}>High</option>\n  //         //         </Form.Control>\n  //         //     </td>\n  //         // );\n  //     }\n  // }\n\n\n  function isEditForm(task) {\n    // console.log(task);\n    if (task.name !== editName || isEdit === false) {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }\n      }, props.index + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 21\n        }\n      }, task.name), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }\n      }, level(task.level)), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 29\n        }\n      }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: () => {\n          // return this.delete(this.state.task.name);\n          return props.deleteTask(props.task.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 29\n        }\n      }, \"Delete\"))));\n    } else if (isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(EditForm, {\n        form: \"Row\" + (props.index + 1),\n        task: task,\n        index: props.index,\n        onSubmit: update,\n        onClose: () => {\n          setIsEdit(false);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 17\n        }\n      });\n    }\n  }\n\n  console.log(\"row-render\");\n  return isEditForm(props.task);\n}\n\nconst mapStateToProps = state => ({\n  // isEdit: state.ToggleEdit,\n  editName: state.EditTask.name,\n  // editTaskTarget: state.EditTask,\n  newTaskName: state.NewTask.name,\n  newTaskLevel: state.NewTask.level\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTask: taskId => {\n      dispatch(Action.deleteTask(taskId));\n    },\n    toggleEdit: () => {\n      dispatch(Action.toggleEdit());\n    },\n    editTask: task => {\n      dispatch(Action.editTask(task));\n    },\n    newTask: task => {\n      dispatch(Action.newTask(task));\n    },\n    updateTask: newTask => {\n      dispatch(Action.updateTask(newTask));\n    },\n    updateChart: () => {\n      dispatch(Action.resetChart());\n    } // submitform: () => {\n    //     dispatch(submit(\"row\"));\n    // },\n\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);","map":{"version":3,"sources":["E:/Học Tập/React-Redux/react-app/src/Component/TaskRow.js"],"names":["React","useState","ButtonGroup","Button","Badge","connect","Action","EditForm","TaskRow","props","nameChange","setNameChange","levelChange","setLevelChange","editName","setEditName","isEdit","setIsEdit","getTask","fetch","URL","URL_API","then","response","json","catch","e","console","log","data","localStorage","setItem","JSON","stringify","updateTask","task","id","method","headers","Accept","body","error","update","values","tmp","name","level","parseInt","updateChart","handleEdit","editTask","isEditForm","index","deleteTask","mapStateToProps","state","EditTask","newTaskName","NewTask","newTaskLevel","mapDispatchToProps","dispatch","taskId","toggleEdit","newTask","resetChart"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\n// import InputGroup from \"react-bootstrap/InputGroup\";\r\n// import Row from \"react-bootstrap/Row\";\r\n// import Col from \"react-bootstrap/Col\";\r\n// import Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport * as Action from \"../Actions/index\";\r\n// import EditFields from \"./EditFields\";\r\nimport \"../Form.css\";\r\nimport EditForm from \"./EditForm\";\r\n// import { Field, reduxForm, submit } from \"redux-form\";\r\n\r\n// import { Field, reduxForm } from \"redux-form\";\r\n// import { submit } from \"redux-form\";\r\n// import React, { useState, useEffect } from \"react\";\r\n// import Edit from \"./Edit\";\r\nfunction TaskRow(props) {\r\n    // var createReduxForm = reduxForm({ form: \"task\" + props.task.id });\r\n    // TaskRow = createReduxForm(TaskRow);\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.nameChange = this.nameChange.bind(this);\r\n    //     this.levelChange = this.levelChange.bind(this);\r\n    // }\r\n    // const { handleSubmit, pristine, reset, submitting } = props;\r\n    const [nameChange, setNameChange] = useState(\"\");\r\n    const [levelChange, setLevelChange] = useState(1);\r\n    const [editName, setEditName] = useState(props.editName);\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    // const [id, setId] = useState(props.task.id);\r\n\r\n    // function test(values) {\r\n    //     console.log(values);\r\n    // }\r\n\r\n    // function update(newName, newLevel) {\r\n    //     console.log(newName, newLevel);\r\n    //     // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n    //     props.updateTask({ id: props.task.id, name: newName, level: newLevel });\r\n    // }\r\n    function getTask() {\r\n        fetch(URL.URL_API)\r\n            .then((response) => response.json())\r\n            .catch((e) => {\r\n                console.log(\"Err\", e);\r\n            })\r\n            .then((data) => {\r\n                // console.log(data);\r\n                localStorage.setItem(\"Tasks\", JSON.stringify(data));\r\n                // Cookies.set(\"Task\", data);\r\n                // console.log(localStorage.getItem(\"Tasks\"));\r\n            });\r\n    }\r\n    // console.log(\"Unable to update item.\", error)\r\n    async function updateTask(task) {\r\n        await fetch(URL.URL_API + \"/\" + task.id, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(task),\r\n        })\r\n            .then(() => getTask())\r\n            .catch((error) => false);\r\n        return true;\r\n    }\r\n\r\n    async function update(values) {\r\n        let tmp = await updateTask({\r\n            id: props.task.id,\r\n            name: values.name,\r\n            level: parseInt(values.level),\r\n        });\r\n        console.log(tmp);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        if (tmp) {\r\n            props.updateTask({\r\n                id: props.task.id,\r\n                name: values.name,\r\n                level: parseInt(values.level),\r\n            });\r\n            props.updateChart();\r\n        }\r\n    }\r\n\r\n    // function handleSave() {\r\n    //     // props.toggleEdit();\r\n    //     setIsEdit(false);\r\n    //     console.log(editName, nameChange, parseInt(levelChange));\r\n    //     update(nameChange, parseInt(levelChange));\r\n    //     props.updateChart();\r\n    // }\r\n\r\n    // function toggleEditOrSave(task) {\r\n    //     if (isEdit) {\r\n    //         return (\r\n    //             <Button\r\n    //                 variant=\"warning\"\r\n    //                 // onClick={() => handleSave(task.name, task.level)}\r\n    //                 onClick={() => props.submitform()}\r\n    //             >\r\n    //                 Done\r\n    //             </Button>\r\n    //         );\r\n    //     } else {\r\n    //         return (\r\n    //             <Button\r\n    //                 variant=\"warning\"\r\n    //                 onClick={() => handleEdit(task.name, task.level)}\r\n    //             >\r\n    //                 Edit\r\n    //             </Button>\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    function handleEdit(name, level) {\r\n        // console.log(name);\r\n        // console.log(nameChange);\r\n        props.editTask({\r\n            id: props.task.id,\r\n            name: props.task.name,\r\n            level: props.task.level,\r\n        });\r\n        setIsEdit(true);\r\n        setNameChange(name);\r\n        setLevelChange(level);\r\n        setEditName(name);\r\n        // console.log(nameChange);\r\n        // props.toggleEdit();\r\n        // props.newTask({ name: name, level: level });\r\n        // props.editTask({ name: name, level: level });\r\n    }\r\n\r\n    function level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    // function test(value) {\r\n    //     console.log(\"test \", value);\r\n    // }\r\n\r\n    // function isEditName(task) {\r\n    // console.log(task.name !== editName || isEdit === false);\r\n\r\n    // if (task.name !== editName || isEdit === false) {\r\n    // console.log(\r\n    //     \"nor \",\r\n    //     task.name,\r\n    //     this.props.editName,\r\n    //     this.props.isEdit\r\n    // );\r\n\r\n    // return <td>{task.name}</td>;\r\n    // } else if (isEdit === true) {\r\n    // console.log(\r\n    //     \"tex \",\r\n    //     task.name,\r\n    //     this.props.editName,\r\n    //     this.props.isEdit\r\n    // );\r\n\r\n    // return (\r\n    // <Edit newName={this.state.newName}></Edit>\r\n\r\n    // <td>\r\n    //     <Row>\r\n    //         <Col md={12}>\r\n    //             <EditFields\r\n    //                 nameChange={task.name}\r\n    //                 onSubmit={update}\r\n    //             ></EditFields>\r\n    //         </Col>\r\n    // {\r\n    //     /* <Col md={{ span: 3, offset: 1 }}>\r\n    //                         <Form.Control\r\n    //                             value={levelChange}\r\n    //                             as=\"select\"\r\n    //                             name=\"ds\"\r\n    //                             id=\"inputDs\"\r\n    //                             onChange={(e) => setLevelChange(e.target.value)}\r\n    //                         >\r\n    //                             <option value={1}>Low</option>\r\n    //                             <option value={2}>Medium</option>\r\n    //                             <option value={3}>High</option>\r\n    //                         </Form.Control>\r\n    //                     </Col> */\r\n    // }\r\n    // </Row>\r\n    // {\r\n    //     /* <InputGroup>\r\n    //                     <EditFields\r\n    //                         nameChange={task.name}\r\n    //                         onSubmit={test}\r\n    //                     ></EditFields>\r\n    //                     <Form.Control\r\n    //                         value={levelChange}\r\n    //                         as=\"select\"\r\n    //                         name=\"ds\"\r\n    //                         id=\"inputDs\"\r\n    //                         onChange={(e) => setLevelChange(e.target.value)}\r\n    //                     >\r\n    //                         <option value={1}>Low</option>\r\n    //                         <option value={2}>Medium</option>\r\n    //                         <option value={3}>High</option>\r\n    //                     </Form.Control>\r\n    //                 </InputGroup> */\r\n    // }\r\n\r\n    // {\r\n    //     /* <Form.Control\r\n    //                     type=\"text\"\r\n    //                     value={nameChange}\r\n    //                     onChange={(e) => setNameChange(e.target.value)}\r\n    //                 ></Form.Control> */\r\n    // }\r\n\r\n    // {\r\n    //     /* <form\r\n    //                     onSubmit={() => {\r\n    //                         test();\r\n    //                     }}\r\n    //                 >\r\n    //                     <Field\r\n    //                         name=\"name\"\r\n    //                         type=\"text\"\r\n    //                         component={renderField}\r\n    //                         // label=\"last name\"\r\n    //                     />\r\n    //                 </form> */\r\n    // }\r\n    // {\r\n    //     /* <Field\r\n    //                     // previousValue={nameChange}\r\n    //                     name=\"row\"\r\n    //                     value={nameChange}\r\n    //                     className=\"form-control\"\r\n    //                     component=\"input\"\r\n    //                     type=\"text\"\r\n    //                 /> */\r\n    // }\r\n    // // </td>\r\n    // //         );\r\n    // //     }\r\n    // // }\r\n\r\n    // function isEditLevel(task) {\r\n    //     if (task.name !== editName || isEdit === false) {\r\n    //         return <td className=\"text-center\">{level(task.level)}</td>;\r\n    //     } else if (isEdit === true) {\r\n    //         // console.log(\"select \", task.name);\r\n    //         return null;\r\n    //         // (\r\n    //         //     <td className=\"text-center\">\r\n    //         //         <Form.Control\r\n    //         //             value={levelChange}\r\n    //         //             as=\"select\"\r\n    //         //             name=\"ds\"\r\n    //         //             id=\"inputDs\"\r\n    //         //             onChange={(e) => setLevelChange(e.target.value)}\r\n    //         //         >\r\n    //         //             <option value={1}>Low</option>\r\n    //         //             <option value={2}>Medium</option>\r\n    //         //             <option value={3}>High</option>\r\n    //         //         </Form.Control>\r\n    //         //     </td>\r\n    //         // );\r\n    //     }\r\n    // }\r\n\r\n    function isEditForm(task) {\r\n        // console.log(task);\r\n        if (task.name !== editName || isEdit === false) {\r\n            return (\r\n                <tr>\r\n                    <td className=\"text-center\">{props.index + 1}</td>\r\n                    {/* {isEditName(props.task)} */}\r\n                    {/* {isEditLevel(props.task)} */}\r\n                    <td>{task.name}</td>\r\n                    <td className=\"text-center\">{level(task.level)}</td>\r\n                    <td className=\"text-center\">\r\n                        <ButtonGroup>\r\n                            {/* {toggleEditOrSave(props.task)} */}\r\n                            <Button\r\n                                variant=\"warning\"\r\n                                onClick={() =>\r\n                                    handleEdit(task.name, task.level)\r\n                                }\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"danger\"\r\n                                onClick={() => {\r\n                                    // return this.delete(this.state.task.name);\r\n                                    return props.deleteTask(props.task.id);\r\n                                }}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        } else if (isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <EditForm\r\n                    form={\"Row\" + (props.index + 1)}\r\n                    task={task}\r\n                    index={props.index}\r\n                    onSubmit={update}\r\n                    onClose={() => {\r\n                        setIsEdit(false);\r\n                    }}\r\n                ></EditForm>\r\n            );\r\n        }\r\n    }\r\n\r\n    console.log(\"row-render\");\r\n\r\n    return isEditForm(props.task);\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    // isEdit: state.ToggleEdit,\r\n    editName: state.EditTask.name,\r\n    // editTaskTarget: state.EditTask,\r\n    newTaskName: state.NewTask.name,\r\n    newTaskLevel: state.NewTask.level,\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        deleteTask: (taskId) => {\r\n            dispatch(Action.deleteTask(taskId));\r\n        },\r\n        toggleEdit: () => {\r\n            dispatch(Action.toggleEdit());\r\n        },\r\n        editTask: (task) => {\r\n            dispatch(Action.editTask(task));\r\n        },\r\n        newTask: (task) => {\r\n            dispatch(Action.newTask(task));\r\n        },\r\n        updateTask: (newTask) => {\r\n            dispatch(Action.updateTask(newTask));\r\n        },\r\n        updateChart: () => {\r\n            dispatch(Action.resetChart());\r\n        },\r\n        // submitform: () => {\r\n        //     dispatch(submit(\"row\"));\r\n        // },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskRow);\r\n"]},"metadata":{},"sourceType":"module"}
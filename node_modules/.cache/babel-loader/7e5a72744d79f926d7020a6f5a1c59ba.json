{"ast":null,"code":"var _jsxFileName = \"E:\\\\H\\u1ECDc T\\u1EADp\\\\Web\\\\React\\\\react-app\\\\src\\\\Component\\\\TaskTable.js\";\nimport React, { Component } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport Badge from \"react-bootstrap/Badge\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Edit from \"./Edit\";\nimport TaskRow from \"./TaskRow\";\nimport TaskList from \"../Tasks/Task.json\";\nexport default class TaskTable extends Component {\n  constructor(props) {\n    super(props);\n    local = localStorage.getItem(\"Tasks\");\n\n    if (local === undefined) {\n      local = JSON.stringify(TaskList.Task);\n    }\n\n    localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\n    this.addTask = this.addTask.bind(this);\n    this.delete = this.delete.bind(this);\n    this.update = this.update.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.nameChange = this.nameChange.bind(this);\n    this.levelChange = this.levelChange.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\n    var local;\n    console.log(localStorage.getItem(\"Tasks\"));\n    local = localStorage.getItem(\"Tasks\"); // local = JSON.stringify(TaskList.Task);\n\n    this.state = {\n      Task: JSON.parse(local),\n      newTask: this.props.newTask,\n      isEdit: false,\n      editName: \"\",\n      newName: \"\",\n      newLevel: 1\n    }; //console.log(this.state.TaskList.Task);\n  }\n\n  UNSAFE_componentWillMount() {}\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.newTask !== null) {\n      // this.addTask(nextProps.newTask);\n      this.addTask(nextProps.newTask);\n    }\n\n    if (nextProps.updateTask !== null) {\n      this.update(nextProps.updateTask.oldName, nextProps.updateTask.name, nextProps.updateTask.level);\n    }\n  }\n\n  componentDidUpdate() {\n    // console.log(\"local save : \", JSON.stringify(this.state.Task));\n    localStorage.setItem(\"Tasks\", JSON.stringify(this.state.Task));\n  }\n\n  update(oldName, newName, newLevel) {\n    // console.log(oldName, newName, newLevel);\n    // const index = this.state.Task.findIndex((task) => task.name == oldName);\n    const tmpArr = this.state.Task.map(task => {\n      if (task.name === oldName) {\n        return {\n          name: newName,\n          level: newLevel\n        };\n      } else return task;\n    });\n    this.setState({\n      Task: tmpArr\n    }); //console.log(tmpArr);\n    // this.state.Task[index].name = newName;\n    // this.state.Task[index].level = newLevel;\n  }\n\n  delete(name) {\n    // console.log(\"delete\");\n    const tmpArr = this.state.Task.filter(task => {\n      return task.name !== name;\n    });\n    this.setState({\n      Task: tmpArr\n    });\n  }\n\n  handleEdit(name, level) {\n    this.setState({\n      editName: name,\n      newName: name,\n      newLevel: level,\n      isEdit: true\n    }); // console.log(\"edit\", name, \" \", level);\n\n    this.props.setNameAndLevel(name, level);\n  }\n\n  nameChange(e) {\n    this.setState({\n      newName: e.target.value,\n      isEdit: true\n    });\n  }\n\n  isEditName(task) {\n    if (task.name !== this.state.editName || this.state.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 20\n        }\n      }, task.name);\n    } else if (this.state.isEdit === true) {\n      // console.log(\"text \", task.name);\n      return /*#__PURE__*/React.createElement(Edit, {\n        newName: this.state.newName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }\n      }) // <td>\n      //     <Form.Control\n      //         type=\"text\"\n      //         value={this.state.newName}\n      //         onChange={this.nameChange}\n      //     ></Form.Control>\n      // </td>\n      ;\n    }\n  }\n\n  isEditLevel(task) {\n    if (task.name !== this.state.editName || this.state.isEdit === false) {\n      // console.log(\"nor \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 20\n        }\n      }, this.level(task.level));\n    } else if (this.state.isEdit === true) {\n      // console.log(\"select \", task.name);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Control, {\n        value: this.state.newLevel,\n        as: \"select\",\n        name: \"ds\",\n        id: \"inputDs\",\n        onChange: this.levelChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }\n      }, \"High\")));\n    }\n  }\n\n  levelChange(e) {\n    this.setState({\n      newLevel: e.target.value\n    });\n  }\n\n  addTask(newTask) {\n    // console.log(newTask);\n    if (newTask !== null) {\n      const taskListAdded = [...this.state.Task, ...newTask]; //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\n\n      this.setState({\n        Task: taskListAdded\n      });\n      this.props.resetNewTask();\n      return taskListAdded;\n    } else return this.state.Task;\n  }\n\n  level(level) {\n    switch (level) {\n      case 1:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"light\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 24\n          }\n        }, \"Low\");\n\n      case 2:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"info\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 24\n          }\n        }, \"Medium\");\n\n      case 3:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 24\n          }\n        }, \"High\");\n\n      default:\n        return /*#__PURE__*/React.createElement(Badge, {\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 24\n          }\n        }, \"No Level\");\n    }\n  }\n\n  handleSave(oldName, newName, newLevel) {\n    this.setState({\n      isEdit: false\n    });\n    this.update(oldName, newName, parseInt(newLevel));\n  }\n\n  toggleEditOrSave(task) {\n    if (this.state.isEdit) {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleSave(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }\n      }, \"Save\");\n    } else {\n      return /*#__PURE__*/React.createElement(Button, {\n        variant: \"warning\",\n        onClick: () => this.handleEdit(task.name, task.level),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }\n      }, \"Edit\");\n    }\n  }\n\n  sort(arr, by, dir) {\n    switch (by) {\n      case \"Name\":\n        switch (dir) {\n          case \"DESC\":\n            return arr.sort((a, b) => {\n              // console.log(\"DESC\", a.name - b.name);\n              if (b.name < a.name) {\n                return -1;\n              }\n\n              if (b.name > a.name) {\n                return 1;\n              } // name trÃ¹ng nhau\n\n\n              return 0; // return b.name - a.name;\n            });\n\n          default:\n            return arr.sort((a, b) => {\n              // console.log(\"ASC\", a.name - b.name);\n              if (b.name < a.name) {\n                return 1;\n              }\n\n              if (b.name > a.name) {\n                return -1;\n              }\n\n              return 0;\n            });\n        }\n\n      default:\n        switch (dir) {\n          case \"DESC\":\n            return arr.sort((a, b) => {\n              return b.level - a.level;\n            });\n\n          default:\n            return arr.sort((a, b) => {\n              return a.level - b.level;\n            });\n        }\n\n    }\n  }\n\n  render() {\n    // console.log(\"render\");\n    // if (this.props.newTask !== null) {\n    //     const taskListAdded = [...this.state.Task, ...this.props.newTask];\n    //     console.log(taskListAdded);\n    // }\n    const taskListSearched = this.state.Task.filter(task => {\n      return task.name.toLowerCase().includes(this.props.search.toLowerCase());\n    }); // const taskListSearched = this.state.Task.filter((task) => {\n    //     return task.name\n    //         .toLowerCase()\n    //         .includes(this.props.search.toLowerCase());\n    // });\n\n    const taskListSorted = this.sort(taskListSearched, this.props.by, this.props.dir); // console.log(taskListSorted);up\n\n    const taskList = taskListSorted.map((task, index) => {\n      return /*#__PURE__*/React.createElement(TaskRow, {\n        key: index,\n        index: index,\n        task: task,\n        saveClick: this.handleSave,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }\n      }) // <tr key={index}>\n      //     <td className=\"text-center\">{index + 1}</td>\n      //     {this.isEditName(task)}\n      //     {this.isEditLevel(task)}\n      //     {/* <td>{task.name}</td> */}\n      //     {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\n      //     <td className=\"text-center\">\n      //         <ButtonGroup>\n      //             {this.toggleEditOrSave(task)}\n      //             {/* <Button\n      //                 variant=\"warning\"\n      //                 onClick={() =>\n      //                     this.handleEdit(task.name, task.level)\n      //                 }\n      //             >\n      //                 Edit\n      //             </Button> */}\n      //             <Button\n      //                 variant=\"danger\"\n      //                 onClick={() => {\n      //                     return this.delete(task.name);\n      //                 }}\n      //             >\n      //                 Delete\n      //             </Button>\n      //         </ButtonGroup>\n      //     </td>\n      // </tr>\n      ;\n    });\n    console.log(\"table-render\");\n    return /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 25\n      }\n    }, \"List Task\"), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"10%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 37\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 37\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 37\n      }\n    }, \"Level\"), /*#__PURE__*/React.createElement(\"th\", {\n      style: {\n        width: \"20%\"\n      },\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 37\n      }\n    }, \"Action\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 29\n      }\n    }, taskList)))));\n  }\n\n}","map":{"version":3,"sources":["E:/Há»c Táº­p/Web/React/react-app/src/Component/TaskTable.js"],"names":["React","Component","Card","Col","Table","Badge","ButtonGroup","Form","Button","Edit","TaskRow","TaskList","TaskTable","constructor","props","local","localStorage","getItem","undefined","JSON","stringify","Task","setItem","addTask","bind","delete","update","handleEdit","nameChange","levelChange","handleSave","toggleEditOrSave","console","log","state","parse","newTask","isEdit","editName","newName","newLevel","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","nextProps","updateTask","oldName","name","level","componentDidUpdate","tmpArr","map","task","setState","filter","setNameAndLevel","e","target","value","isEditName","isEditLevel","taskListAdded","resetNewTask","parseInt","sort","arr","by","dir","a","b","render","taskListSearched","toLowerCase","includes","search","taskListSorted","taskList","index","width"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Edit from \"./Edit\";\r\nimport TaskRow from \"./TaskRow\";\r\nimport TaskList from \"../Tasks/Task.json\";\r\nexport default class TaskTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        local = localStorage.getItem(\"Tasks\");\r\n        if (local === undefined) {\r\n            local = JSON.stringify(TaskList.Task);\r\n        }\r\n        localStorage.setItem(\"Tasks\", JSON.stringify(TaskList.Task));\r\n        this.addTask = this.addTask.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.nameChange = this.nameChange.bind(this);\r\n        this.levelChange = this.levelChange.bind(this);\r\n        this.handleSave = this.handleSave.bind(this);\r\n        this.toggleEditOrSave = this.toggleEditOrSave.bind(this);\r\n        var local;\r\n        console.log(localStorage.getItem(\"Tasks\"));\r\n\r\n        local = localStorage.getItem(\"Tasks\");\r\n\r\n        // local = JSON.stringify(TaskList.Task);\r\n\r\n        this.state = {\r\n            Task: JSON.parse(local),\r\n            newTask: this.props.newTask,\r\n            isEdit: false,\r\n            editName: \"\",\r\n            newName: \"\",\r\n            newLevel: 1,\r\n        };\r\n\r\n        //console.log(this.state.TaskList.Task);\r\n    }\r\n\r\n    UNSAFE_componentWillMount() {}\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        if (nextProps.newTask !== null) {\r\n            // this.addTask(nextProps.newTask);\r\n            this.addTask(nextProps.newTask);\r\n        }\r\n        if (nextProps.updateTask !== null) {\r\n            this.update(\r\n                nextProps.updateTask.oldName,\r\n                nextProps.updateTask.name,\r\n                nextProps.updateTask.level\r\n            );\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        // console.log(\"local save : \", JSON.stringify(this.state.Task));\r\n        localStorage.setItem(\"Tasks\", JSON.stringify(this.state.Task));\r\n    }\r\n\r\n    update(oldName, newName, newLevel) {\r\n        // console.log(oldName, newName, newLevel);\r\n        // const index = this.state.Task.findIndex((task) => task.name == oldName);\r\n        const tmpArr = this.state.Task.map((task) => {\r\n            if (task.name === oldName) {\r\n                return { name: newName, level: newLevel };\r\n            } else return task;\r\n        });\r\n        this.setState({\r\n            Task: tmpArr,\r\n        });\r\n        //console.log(tmpArr);\r\n        // this.state.Task[index].name = newName;\r\n        // this.state.Task[index].level = newLevel;\r\n    }\r\n\r\n    delete(name) {\r\n        // console.log(\"delete\");\r\n        const tmpArr = this.state.Task.filter((task) => {\r\n            return task.name !== name;\r\n        });\r\n        this.setState({\r\n            Task: tmpArr,\r\n        });\r\n    }\r\n\r\n    handleEdit(name, level) {\r\n        this.setState({\r\n            editName: name,\r\n            newName: name,\r\n            newLevel: level,\r\n            isEdit: true,\r\n        });\r\n\r\n        // console.log(\"edit\", name, \" \", level);\r\n        this.props.setNameAndLevel(name, level);\r\n    }\r\n\r\n    nameChange(e) {\r\n        this.setState({\r\n            newName: e.target.value,\r\n            isEdit: true,\r\n        });\r\n    }\r\n\r\n    isEditName(task) {\r\n        if (task.name !== this.state.editName || this.state.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n            return <td>{task.name}</td>;\r\n        } else if (this.state.isEdit === true) {\r\n            // console.log(\"text \", task.name);\r\n            return (\r\n                <Edit newName={this.state.newName}></Edit>\r\n                // <td>\r\n                //     <Form.Control\r\n                //         type=\"text\"\r\n                //         value={this.state.newName}\r\n                //         onChange={this.nameChange}\r\n                //     ></Form.Control>\r\n                // </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    isEditLevel(task) {\r\n        if (task.name !== this.state.editName || this.state.isEdit === false) {\r\n            // console.log(\"nor \", task.name);\r\n            return <td className=\"text-center\">{this.level(task.level)}</td>;\r\n        } else if (this.state.isEdit === true) {\r\n            // console.log(\"select \", task.name);\r\n            return (\r\n                <td className=\"text-center\">\r\n                    <Form.Control\r\n                        value={this.state.newLevel}\r\n                        as=\"select\"\r\n                        name=\"ds\"\r\n                        id=\"inputDs\"\r\n                        onChange={this.levelChange}\r\n                    >\r\n                        <option value={1}>Low</option>\r\n                        <option value={2}>Medium</option>\r\n                        <option value={3}>High</option>\r\n                    </Form.Control>\r\n                </td>\r\n            );\r\n        }\r\n    }\r\n\r\n    levelChange(e) {\r\n        this.setState({\r\n            newLevel: e.target.value,\r\n        });\r\n    }\r\n\r\n    addTask(newTask) {\r\n        // console.log(newTask);\r\n        if (newTask !== null) {\r\n            const taskListAdded = [...this.state.Task, ...newTask];\r\n            //localStorage.setItem(\"Tasks\", JSON.stringify(taskListAdded));\r\n            this.setState({\r\n                Task: taskListAdded,\r\n            });\r\n            this.props.resetNewTask();\r\n            return taskListAdded;\r\n        } else return this.state.Task;\r\n    }\r\n\r\n    level(level) {\r\n        switch (level) {\r\n            case 1:\r\n                return <Badge variant=\"light\">Low</Badge>;\r\n            case 2:\r\n                return <Badge variant=\"info\">Medium</Badge>;\r\n            case 3:\r\n                return <Badge variant=\"danger\">High</Badge>;\r\n            default:\r\n                return <Badge variant=\"primary\">No Level</Badge>;\r\n        }\r\n    }\r\n\r\n    handleSave(oldName, newName, newLevel) {\r\n        this.setState({ isEdit: false });\r\n        this.update(oldName, newName, parseInt(newLevel));\r\n    }\r\n\r\n    toggleEditOrSave(task) {\r\n        if (this.state.isEdit) {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleSave(task.name, task.level)}\r\n                >\r\n                    Save\r\n                </Button>\r\n            );\r\n        } else {\r\n            return (\r\n                <Button\r\n                    variant=\"warning\"\r\n                    onClick={() => this.handleEdit(task.name, task.level)}\r\n                >\r\n                    Edit\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    sort(arr, by, dir) {\r\n        switch (by) {\r\n            case \"Name\":\r\n                switch (dir) {\r\n                    case \"DESC\":\r\n                        return arr.sort((a, b) => {\r\n                            // console.log(\"DESC\", a.name - b.name);\r\n                            if (b.name < a.name) {\r\n                                return -1;\r\n                            }\r\n                            if (b.name > a.name) {\r\n                                return 1;\r\n                            }\r\n\r\n                            // name trÃ¹ng nhau\r\n                            return 0;\r\n                            // return b.name - a.name;\r\n                        });\r\n\r\n                    default:\r\n                        return arr.sort((a, b) => {\r\n                            // console.log(\"ASC\", a.name - b.name);\r\n                            if (b.name < a.name) {\r\n                                return 1;\r\n                            }\r\n                            if (b.name > a.name) {\r\n                                return -1;\r\n                            }\r\n                            return 0;\r\n                        });\r\n                }\r\n\r\n            default:\r\n                switch (dir) {\r\n                    case \"DESC\":\r\n                        return arr.sort((a, b) => {\r\n                            return b.level - a.level;\r\n                        });\r\n\r\n                    default:\r\n                        return arr.sort((a, b) => {\r\n                            return a.level - b.level;\r\n                        });\r\n                }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"render\");\r\n        // if (this.props.newTask !== null) {\r\n        //     const taskListAdded = [...this.state.Task, ...this.props.newTask];\r\n        //     console.log(taskListAdded);\r\n        // }\r\n\r\n        const taskListSearched = this.state.Task.filter((task) => {\r\n            return task.name\r\n                .toLowerCase()\r\n                .includes(this.props.search.toLowerCase());\r\n        });\r\n\r\n        // const taskListSearched = this.state.Task.filter((task) => {\r\n        //     return task.name\r\n        //         .toLowerCase()\r\n        //         .includes(this.props.search.toLowerCase());\r\n        // });\r\n\r\n        const taskListSorted = this.sort(\r\n            taskListSearched,\r\n            this.props.by,\r\n            this.props.dir\r\n        );\r\n        // console.log(taskListSorted);up\r\n\r\n        const taskList = taskListSorted.map((task, index) => {\r\n            return (\r\n                <TaskRow\r\n                    key={index}\r\n                    index={index}\r\n                    task={task}\r\n                    saveClick={this.handleSave}\r\n                ></TaskRow>\r\n                // <tr key={index}>\r\n                //     <td className=\"text-center\">{index + 1}</td>\r\n                //     {this.isEditName(task)}\r\n                //     {this.isEditLevel(task)}\r\n                //     {/* <td>{task.name}</td> */}\r\n                //     {/* <td className=\"text-center\">{this.level(task.level)}</td> */}\r\n                //     <td className=\"text-center\">\r\n                //         <ButtonGroup>\r\n                //             {this.toggleEditOrSave(task)}\r\n                //             {/* <Button\r\n                //                 variant=\"warning\"\r\n                //                 onClick={() =>\r\n                //                     this.handleEdit(task.name, task.level)\r\n                //                 }\r\n                //             >\r\n                //                 Edit\r\n                //             </Button> */}\r\n                //             <Button\r\n                //                 variant=\"danger\"\r\n                //                 onClick={() => {\r\n                //                     return this.delete(task.name);\r\n                //                 }}\r\n                //             >\r\n                //                 Delete\r\n                //             </Button>\r\n                //         </ButtonGroup>\r\n                //     </td>\r\n                // </tr>\r\n            );\r\n        });\r\n        console.log(\"table-render\");\r\n        return (\r\n            <Col>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Header>List Task</Card.Header>\r\n                        <Table striped bordered hover variant=\"dark\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th\r\n                                        style={{ width: \"10%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        #\r\n                                    </th>\r\n                                    <th>Task</th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Level\r\n                                    </th>\r\n                                    <th\r\n                                        style={{ width: \"20%\" }}\r\n                                        className=\"text-center\"\r\n                                    >\r\n                                        Action\r\n                                    </th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>{taskList}</tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}